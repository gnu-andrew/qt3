
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 151
#define YY_END_OF_BUFFER 152
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[615] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  152,  151,
      139,  150,  151,  139,  134,  146,  139,  146,  146,  105,
      105,  105,  105,  105,  139,  134,  148,  139,  113,  148,
      148,  148,  130,  148,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,  139,  134,  140,  139,  140,  140,  106,
      106,  106,  106,   15,   16,  139,  134,  141,  139,  141,
      141,  107,  107,  107,  107,  107,   28,   29,  139,  134,

      145,  139,   54,   55,   58,  145,   59,   56,   57,   60,
      139,  134,  143,  139,   42,   43,   46,  143,   47,   44,
       45,  139,  134,  144,  139,   48,   49,   52,  144,   53,
       50,   51,  139,  134,  142,  139,  111,  142,   13,   14,
      139,  134,  137,  137,  112,   61,   62,  137,  137,  134,
      149,  139,  149,  139,  134,  147,  139,  147,  139,  134,
       34,   35,  100,  100,  100,  100,  100,  104,  101,  102,
      103,  139,  136,  135,  139,  134,  134,  134,    0,  108,
        0,  105,  105,  105,  105,  105,  113,    0,    0,  123,
        0,    0,  132,  131,  130,   92,   99,   99,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,    0,  109,
        0,  106,  106,  106,  106,  106,  106,    0,  110,    0,
      107,  107,  107,  107,  107,  111,    0,  138,  112,    0,
      138,  100,  100,  100,  100,  100,  100,  104,    0,  135,
      134,  105,  105,  105,  105,  114,    0,    0,  114,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       93,  131,   99,   99,   99,   99,   99,   99,   87,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   76,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  107,  107,  107,  107,  100,  100,  100,  100,
      100,  100,  134,  105,  105,  105,  105,  129,  125,  124,
      126,    0,  127,  122,  115,  116,  117,  118,  119,  120,
      121,    0,   99,   99,   99,   99,   99,   99,   99,   65,
       74,   99,   99,   99,   83,   99,   99,   99,   99,   77,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   82,

       99,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  107,  107,  107,  107,  100,   36,  100,  100,
      100,  100,  134,    1,  105,  105,    3,  127,  128,   99,
       99,   99,   99,   99,   99,   99,   84,   72,   99,   99,
       80,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       75,   99,   99,    7,   99,   99,   99,   96,   99,   86,
       99,   97,   99,   99,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,   21,   30,  107,  107,   33,  100,
       39,  100,  100,   37,  134,  105,  105,   99,   99,   99,
       99,   99,   12,   99,   81,   68,   63,   69,   99,   99,

       99,   99,   99,   90,   99,   99,   78,   67,   85,   99,
       99,   99,   99,   99,  106,  106,  106,  106,  106,   27,
      106,  106,   17,  106,  107,  107,  100,  100,   38,  134,
      105,  105,   99,   11,   99,   99,   99,   99,   95,   99,
       99,   88,   99,   99,    6,   99,   64,   99,   71,   99,
      106,   26,  106,  106,  106,   19,  106,   20,  107,  107,
      100,  100,  134,  134,  105,    4,   99,    5,   99,   99,
       99,   99,   91,   99,   66,   94,   79,   73,  106,   23,
      106,  106,  106,  107,   31,  100,  100,  133,    2,   99,
       99,   99,   99,   98,   89,  106,  106,  106,   18,   32,

      100,  100,   99,   10,    9,   70,  106,   25,   24,   40,
       41,    8,   22,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    5,    6,    1,    1,    1,    7,    8,
        9,   10,    1,   11,    1,   12,   13,   14,   15,   15,
       15,   15,   15,   15,   15,   16,   16,   17,   18,   19,
        1,   20,    1,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   28,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   28,   43,   28,
       44,   45,   46,    1,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   28,   28,   57,   58,   59,
       60,   61,   28,   62,   63,   64,   65,   66,   67,   68,
       69,   28,   70,    1,   71,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[72] =
    {   0,
        1,    1,    1,    2,    3,    1,    4,    1,    1,    1,
        1,    1,    1,    5,    5,    5,    1,    1,    1,    1,
        5,    5,    5,    5,    5,    5,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    1,    1,    1,    6,    5,    5,    5,
        5,    5,    5,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    1,
        1
    } ;

static yyconst flex_int16_t yy_base[642] =
    {   0,
        0,    3,   16,    5,   87,    9,  158,  229,  300,  176,
      370,  440,  207,  510,  382,  555,  184,  399,  600,  645,
      188,  254,  204,  266,  691,  177,  278,  416, 1189, 1190,
      182, 1190,  183,  220, 1137, 1190,  196,  207,  214,    0,
     1130, 1138, 1133, 1121,  260, 1132, 1190,  211, 1137,  243,
      281,  251,  382, 1164,    0, 1133, 1132,  213,  320, 1118,
      226,  138, 1118, 1116, 1110, 1126, 1112,  327, 1120,  351,
      378,  350,  375,  434, 1120, 1190,  408,  394,  442,    0,
     1123,  392,  403, 1190, 1190,  459, 1118, 1190,  461,  427,
      458,    0, 1111, 1119, 1114, 1102, 1190, 1190,  471, 1113,

     1190,  464, 1190, 1190, 1190,  465, 1190, 1190, 1190, 1190,
      477, 1112, 1190,  479, 1190, 1190, 1190,  475, 1190, 1190,
     1190,  487, 1111, 1190,  489, 1190, 1190, 1190,  484, 1190,
     1190, 1190,  493, 1110, 1190,  498, 1115,  492, 1190, 1190,
      501, 1108, 1190,  506, 1113, 1190, 1190,  507,  523, 1106,
     1190,  528,  514,  530, 1105, 1190,  532,  527,  536, 1104,
     1190, 1190,    0, 1129, 1128,  411, 1115, 1106, 1190, 1190,
     1190,  541, 1190,    0,  543,    0,    0, 1098,  505, 1190,
     1145,    0, 1100, 1089, 1088, 1089, 1099,  543, 1136, 1135,
      758, 1129,  537,  555,  560, 1190,    0,  554, 1084, 1081,

     1074, 1089, 1088, 1076, 1069, 1068, 1068, 1071, 1074,  220,
     1070, 1064, 1069, 1074,  522, 1076, 1070, 1063, 1068, 1061,
      493, 1062, 1057, 1057,  382, 1061, 1054,  524,  517, 1190,
     1111,    0,  560,  530, 1065, 1059, 1052,  555, 1190, 1107,
        0, 1062, 1051, 1050, 1051, 1061,  592,  604, 1060,  606,
      612,    0, 1066,  477, 1066, 1068, 1072, 1055,  612,    0,
     1046, 1035, 1045, 1035, 1036, 1190, 1087, 1086, 1085,  614,
      616, 1084, 1083, 1082, 1081, 1080, 1079, 1078, 1077, 1076,
     1190,  610, 1051, 1048,  465, 1043, 1054, 1019,    0, 1017,
     1014, 1012, 1011, 1024, 1014, 1019, 1022, 1017, 1012,    0,

     1013, 1018, 1013, 1002,  997,  998, 1004, 1004,  997,  999,
      993,  992,  990,  993,  993, 1000,  991,  994,  990,  984,
      996,  998, 1014, 1011,  543, 1006, 1017,  975,  976,  982,
      979,  973,  973,  983,  973,  974, 1003, 1007, 1005, 1000,
      991,  988,  970,  962,  961,  966,  968, 1190, 1190, 1190,
     1190,  620, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1014,  999,  979,  988,  992,  982,  976,  957,    0,
        0,  950,  948,  954,    0,  948,  945,  949,  948,    0,
      957,  942,  956,  955,  950,  945,  937,  935,  539,  935,
      941,  946,  938,  927,  942,  933,  937,  936,  924,    0,

      924,  966,  946,  955,  959,  949,  943,  933,  928,  923,
      930,  914,  913,  912,  917,  919,  945,    0,  932,  935,
      944,  943,  908,    0,  905,  917,    0, 1190, 1190,  922,
      920,  921,  904,  905,  895,  876,    0,    0,  875,  867,
        0,  867,  858,  845,  836,  832,  824,  832,  775,  759,
        0,  764,  768,    0,  768,  752,  767,    0,  762,    0,
      754,    0,  764,  754,  771,  776,  780,  767,  767,  763,
      736,  749,  748,  740,    0,    0,  735,  747,    0,  761,
        0,  754,  768,    0,  739,  742,  725,  750,  749,  763,
      748,  759,    0,  724,    0,    0,    0,    0,  730,  733,

      720,  727,  714,    0,  725,  713,    0,    0,    0,  711,
      721,  719,  713,  712,  730,  729,  743,  727,  665,    0,
      636,  623,    0,  623,  637,  620,  662,  661,    0,  636,
      630,  627,  649,    0,  638,  647,  638,  622,    0,  623,
      610,    0,  619,  608,    0,  617,    0,  617,    0,  615,
      637,    0,  624,  633,  624,    0,  608,    0,  609,  605,
      634,  633,  607,  372,  593,    0,  610,    0,  618,  602,
      593,  587,    0,  587,    0,    0,    0,    0,  604,    0,
      612,  594,  581,  570,    0,  581,  562, 1190,    0,  541,
      451,  413,  376,    0,    0,  361,  357,  255,    0,    0,

      246,  234,  171,    0,    0,    0,  147,    0,    0,    0,
        0,    0,    0, 1190,  826,  832,  838,  844,  850,  856,
      862,  868,  874,  880,  886,  888,  894,  900,  902,  908,
      910,  916,  918,  924,  930,  932,  938,  944,  950,  953,
      958
    } ;

static yyconst flex_int16_t yy_def[642] =
    {   0,
      615,  615,  614,    3,  614,    5,  616,  616,  614,    9,
      617,  617,  618,  618,  619,  619,  620,  620,  621,  621,
      622,  622,  623,  623,  614,   25,  615,  615,  614,  614,
      614,  614,  614,  614,  624,  614,  614,  625,  614,  626,
      626,  626,  626,  626,  614,  624,  614,  614,  627,  628,
      614,  614,  614,  614,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  614,  624,  614,  614,  630,  614,  631,
      631,  631,  631,  614,  614,  614,  624,  614,  614,  632,
      614,  633,  633,  633,  633,  633,  614,  614,  614,  624,

      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  624,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  624,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  624,  614,  614,  634,  614,  614,  614,
      614,  624,  614,  614,  635,  614,  614,  614,  614,  624,
      614,  614,  614,  614,  624,  614,  614,  614,  614,  624,
      614,  614,  636,  636,  636,  636,  636,  637,  614,  614,
      614,  614,  614,  638,  614,  624,  624,  624,  625,  614,
      625,  626,  626,  626,  626,  626,  627,  627,  614,  614,
      639,  614,  614,  614,  614,  614,  629,  629,  629,  629,

      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  630,  614,
      630,  631,  631,  631,  631,  631,  631,  632,  614,  632,
      633,  633,  633,  633,  633,  634,  634,  614,  635,  635,
      614,  636,  636,  636,  636,  636,  636,  637,  637,  638,
      624,  626,  626,  626,  626,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  640,
      614,  614,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,

      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  633,  633,  633,  633,  636,  636,  636,  636,
      636,  636,  624,  626,  626,  626,  626,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  640,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,

      629,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  633,  633,  633,  633,  636,  636,  636,  636,
      636,  636,  624,  626,  626,  626,  626,  614,  614,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  633,  633,  633,  633,  636,
      636,  636,  636,  636,  624,  626,  626,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,

      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  633,  633,  636,  636,  636,  641,
      626,  626,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      631,  631,  631,  631,  631,  631,  631,  631,  633,  633,
      636,  636,  641,  641,  626,  626,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  631,  631,
      631,  631,  631,  633,  633,  636,  636,  614,  626,  629,
      629,  629,  629,  629,  629,  631,  631,  631,  631,  633,

      636,  636,  629,  629,  629,  629,  631,  631,  631,  636,
      636,  629,  631,    0,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614
    } ;

static yyconst flex_int16_t yy_nxt[1262] =
    {   0,
      614,   31,   31,   32,   31,   34,   32,   45,   35,  614,
       46,   74,   33,  614,   75,   33,   36,   37,   37,   32,
       38,   36,   36,   36,   36,   36,   36,   36,   39,   36,
       36,   36,   36,   36,   36,   36,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   36,
       36,   36,   40,   40,   40,   41,   40,   40,   40,   40,
       40,   40,   40,   40,   42,   40,   40,   40,   40,   43,
       44,   40,   40,   40,   40,   36,   36,   47,   48,   48,
       32,   49,   47,   50,   47,   47,   47,   47,   51,   52,

       53,   53,   53,   54,   47,   47,   47,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   56,   55,   55,   55,   55,   55,   55,   55,
       47,   47,   47,   57,   58,   55,   59,   60,   61,   62,
       55,   55,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   55,   55,   55,   47,   47,   76,   77,
       77,   32,   78,   76,   76,   76,   76,   76,   76,   76,
       79,   76,   76,   76,   76,   76,   76,   76,   99,   34,
      613,  100,   35,  172,  172,  136,  136,   32,  137,  152,
      152,   32,  173,   81,  208,  174,  138,  172,  172,  209,

      153,   76,   76,   76,  612,  157,  157,   32,  114,  114,
       32,  180,  172,  172,  115,  116,  158,  117,   82,  118,
       83,  172,  175,  173,  119,  176,  174,   84,   85,   76,
       77,   86,   32,   78,   87,   76,   76,   76,   76,   76,
       76,   79,   76,   76,   76,   76,   76,   76,   76,  190,
      120,  181,  121,  139,  140,  152,  154,   32,  611,  155,
      173,  172,  175,  174,   81,  176,  153,  157,  159,   32,
      610,  160,   76,   76,   76,  200,  299,  201,  158,   31,
       31,   32,  168,  300,  206,  169,  170,  191,  171,   82,
       33,   83,  192,  207,  193,  193,  193,  609,   84,   85,

       88,   89,   89,   32,   90,   88,   88,   88,   88,   88,
       88,   88,   91,   88,   88,   88,   88,   88,   88,   88,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   88,   88,   88,   92,   92,   92,   93,
       92,   92,   92,   92,   92,   92,   92,   92,   94,   92,
       92,   92,   92,   95,   96,   92,   92,   92,   92,   97,
       98,  102,  102,   32,  202,  588,  203,  103,  104,  204,
      105,  608,  106,  125,  125,   32,  607,  107,  215,  126,
      127,  216,  128,  194,  129,  195,  195,  195,  230,  130,

      136,  141,   32,  137,  142,  218,  219,  220,  225,  172,
      172,  138,  226,  108,  221,  109,  564,   31,   34,   32,
      168,   35,  606,  169,  170,  131,  171,  132,   33,  222,
      227,  239,  223,  255,  228,  172,  175,  317,  231,  176,
      110,  102,  111,   32,  318,  112,  224,  103,  104,  256,
      105,  173,  106,  234,  174,  605,  235,  107,  236,  237,
      172,  175,  172,  172,  176,  172,  172,  173,  139,  140,
      174,  240,  172,  175,  173,  604,  176,  174,  172,  175,
      172,  172,  176,  108,  173,  109,  365,  174,  172,  175,
      172,  172,  176,  173,  172,  175,  174,  338,  176,  172,

      172,  173,  172,  175,  174,  366,  176,  248,  248,  180,
      110,  114,  122,   32,  339,  123,  173,  115,  116,  174,
      117,  230,  118,  173,  248,  251,  174,  119,  176,  172,
      172,  172,  175,  172,  172,  176,  173,  172,  175,  174,
      312,  176,  172,  172,  172,  175,  187,  187,  176,  181,
      193,  193,  193,  120,  313,  121,  125,  133,   32,  239,
      134,  231,  126,  127,  404,  128,  603,  129,  282,  282,
      282,  194,  130,  195,  195,  195,  283,  305,  284,  321,
      322,  306,  323,  405,  324,  328,  452,  285,  286,  329,
      453,  287,  602,  325,  326,  246,  246,  327,  131,  240,

      132,  144,  144,   32,  145,  248,  248,  146,  147,  249,
      249,  601,  148,  248,  251,  258,  258,  176,  146,  147,
      351,  600,  353,  282,  282,  282,  428,  352,  352,  352,
      352,  599,  598,  352,  352,  597,  596,  595,  594,  593,
      592,  591,  590,  146,  589,  147,  144,  149,   32,  145,
      150,  564,  146,  147,  587,  586,  585,  148,  584,  583,
      582,  581,  580,  146,  147,  579,  578,  577,  576,  575,
      574,  573,  572,  571,  570,  569,  568,  567,  566,  565,
      564,  562,  561,  560,  559,  558,  557,  556,  146,  555,
      147,   30,   31,   31,   32,   30,   30,   30,  161,  162,

       30,   30,   30,   33,   30,   30,   30,   30,   30,   30,
       30,  163,  163,  163,  164,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  165,  166,  163,
      163,  163,  167,  163,   30,   30,   30,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
       30,   30,  268,  554,  269,  553,  552,  551,  550,  549,
      548,  270,  271,  547,  546,  545,  544,  543,  542,  541,
      540,  539,  538,  537,  536,  535,  534,  533,  532,  531,
      530,  529,  528,  527,  526,  525,  524,  523,  522,  521,

      520,  519,  272,  518,  517,  273,  274,  516,  515,  514,
      275,  513,  512,  511,  510,  509,  276,  508,  507,  277,
      506,  278,  505,  279,  504,  280,   30,   30,   30,   30,
       30,   30,   80,   80,   80,   80,   80,   80,  101,  101,
      101,  101,  101,  101,  113,  113,  113,  113,  113,  113,
      124,  124,  124,  124,  124,  124,  135,  135,  135,  135,
      135,  135,  143,  143,  143,  143,  143,  143,  151,  151,
      151,  151,  151,  151,  156,  156,  156,  156,  156,  156,
      177,  503,  177,  177,  177,  177,  179,  502,  179,  179,
      179,  179,  182,  182,  187,  501,  500,  187,  187,  187,

      189,  499,  189,  189,  189,  189,  197,  197,  229,  498,
      229,  229,  229,  229,  232,  232,  238,  497,  238,  238,
      238,  238,  241,  241,  246,  496,  495,  246,  246,  246,
      249,  494,  493,  249,  249,  249,  252,  252,  258,  492,
      491,  258,  258,  258,  260,  490,  260,  260,  260,  260,
      267,  489,  267,  267,  267,  267,  362,  362,  563,  488,
      563,  563,  563,  563,  487,  486,  485,  484,  483,  482,
      481,  480,  479,  478,  477,  476,  475,  474,  473,  472,
      471,  470,  469,  468,  467,  466,  465,  464,  463,  462,
      461,  460,  459,  458,  457,  456,  455,  454,  451,  450,

      449,  448,  447,  446,  445,  444,  443,  442,  441,  440,
      439,  438,  437,  436,  435,  434,  433,  432,  431,  430,
      429,  427,  426,  425,  424,  423,  422,  421,  420,  419,
      418,  417,  416,  415,  414,  413,  412,  411,  410,  409,
      408,  407,  406,  403,  402,  401,  400,  399,  398,  397,
      396,  395,  394,  393,  392,  391,  390,  389,  388,  387,
      386,  385,  384,  383,  382,  381,  380,  379,  378,  377,
      376,  375,  374,  373,  372,  371,  370,  369,  368,  367,
      364,  363,  348,  361,  360,  359,  358,  357,  356,  355,
      354,  350,  349,  348,  347,  346,  345,  344,  343,  259,

      342,  341,  340,  337,  250,  247,  336,  335,  334,  333,
      238,  332,  331,  330,  229,  320,  319,  316,  315,  314,
      311,  310,  309,  308,  307,  304,  303,  302,  301,  298,
      297,  296,  295,  294,  293,  292,  291,  290,  289,  288,
      281,  266,  266,  188,  265,  264,  263,  262,  179,  261,
      259,  257,  254,  253,  178,  178,  178,  250,  178,  247,
      178,  178,  178,  178,  245,  244,  243,  242,  178,  233,
      178,  217,  214,  213,  212,  211,  210,  205,  199,  198,
      196,  188,  178,  186,  185,  184,  183,  178,  614,   29,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,

      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614
    } ;

static yyconst flex_int16_t yy_chk[1262] =
    {   0,
        0,    1,    1,    1,    2,    2,    2,    4,    2,    0,
        4,    6,    1,    0,    6,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,   10,   26,
      607,   10,   26,   31,   31,   17,   17,   17,   17,   21,
       21,   21,   33,    7,   62,   33,   17,   37,   37,   62,

       21,    7,    7,    7,  603,   23,   23,   23,   13,   13,
       13,   38,   48,   48,   13,   13,   23,   13,    7,   13,
        7,   34,   34,   39,   13,   34,   39,    7,    7,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,   50,
       13,   38,   13,   17,   17,   22,   22,   22,  602,   22,
       52,   45,   45,   52,    8,   45,   22,   24,   24,   24,
      601,   24,    8,    8,    8,   58,  210,   58,   24,   27,
       27,   27,   27,  210,   61,   27,   27,   50,   27,    8,
       27,    8,   51,   61,   51,   51,   51,  598,    8,    8,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   11,   11,   11,   59,  564,   59,   11,   11,   59,
       11,  597,   11,   15,   15,   15,  596,   11,   68,   15,
       15,   68,   15,   53,   15,   53,   53,   53,   78,   15,

       18,   18,   18,   18,   18,   70,   70,   70,   72,   77,
       77,   18,   72,   11,   70,   11,  564,   28,   28,   28,
       28,   28,  593,   28,   28,   15,   28,   15,   28,   71,
       73,   90,   71,  166,   73,   74,   74,  225,   78,   74,
       11,   12,   12,   12,  225,   12,   71,   12,   12,  166,
       12,   79,   12,   82,   79,  592,   82,   12,   83,   83,
       86,   86,   89,   89,   86,  102,  102,   91,   18,   18,
       91,   90,   99,   99,  106,  591,   99,  106,  111,  111,
      114,  114,  111,   12,  118,   12,  285,  118,  122,  122,
      125,  125,  122,  129,  133,  133,  129,  254,  133,  136,

      136,  138,  141,  141,  138,  285,  141,  144,  144,  179,
       12,   14,   14,   14,  254,   14,  148,   14,   14,  148,
       14,  229,   14,  153,  149,  149,  153,   14,  149,  152,
      152,  154,  154,  157,  157,  154,  158,  159,  159,  158,
      221,  159,  172,  172,  175,  175,  188,  188,  175,  179,
      193,  193,  193,   14,  221,   14,   16,   16,   16,  238,
       16,  229,   16,   16,  325,   16,  590,   16,  194,  194,
      194,  195,   16,  195,  195,  195,  198,  215,  198,  228,
      228,  215,  233,  325,  233,  234,  389,  198,  198,  234,
      389,  198,  587,  233,  233,  247,  247,  233,   16,  238,

       16,   19,   19,   19,   19,  248,  248,   19,   19,  250,
      250,  586,   19,  251,  251,  259,  259,  251,   19,   19,
      270,  584,  271,  282,  282,  282,  352,  270,  270,  271,
      271,  583,  582,  352,  352,  581,  579,  574,  572,  571,
      570,  569,  567,   19,  565,   19,   20,   20,   20,   20,
       20,  563,   20,   20,  562,  561,  560,   20,  559,  557,
      555,  554,  553,   20,   20,  551,  550,  548,  546,  544,
      543,  541,  540,  538,  537,  536,  535,  533,  532,  531,
      530,  528,  527,  526,  525,  524,  522,  521,   20,  519,
       20,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,  191,  518,  191,  517,  516,  515,  514,  513,
      512,  191,  191,  511,  510,  506,  505,  503,  502,  501,
      500,  499,  494,  492,  491,  490,  489,  488,  487,  486,
      485,  483,  482,  480,  478,  477,  474,  473,  472,  471,

      470,  469,  191,  468,  467,  191,  191,  466,  465,  464,
      191,  463,  461,  459,  457,  456,  191,  455,  453,  191,
      452,  191,  450,  191,  449,  191,  615,  615,  615,  615,
      615,  615,  616,  616,  616,  616,  616,  616,  617,  617,
      617,  617,  617,  617,  618,  618,  618,  618,  618,  618,
      619,  619,  619,  619,  619,  619,  620,  620,  620,  620,
      620,  620,  621,  621,  621,  621,  621,  621,  622,  622,
      622,  622,  622,  622,  623,  623,  623,  623,  623,  623,
      624,  448,  624,  624,  624,  624,  625,  447,  625,  625,
      625,  625,  626,  626,  627,  446,  445,  627,  627,  627,

      628,  444,  628,  628,  628,  628,  629,  629,  630,  443,
      630,  630,  630,  630,  631,  631,  632,  442,  632,  632,
      632,  632,  633,  633,  634,  440,  439,  634,  634,  634,
      635,  436,  435,  635,  635,  635,  636,  636,  637,  434,
      433,  637,  637,  637,  638,  432,  638,  638,  638,  638,
      639,  431,  639,  639,  639,  639,  640,  640,  641,  430,
      641,  641,  641,  641,  426,  425,  423,  422,  421,  420,
      419,  417,  416,  415,  414,  413,  412,  411,  410,  409,
      408,  407,  406,  405,  404,  403,  402,  401,  399,  398,
      397,  396,  395,  394,  393,  392,  391,  390,  388,  387,

      386,  385,  384,  383,  382,  381,  379,  378,  377,  376,
      374,  373,  372,  369,  368,  367,  366,  365,  364,  363,
      362,  347,  346,  345,  344,  343,  342,  341,  340,  339,
      338,  337,  336,  335,  334,  333,  332,  331,  330,  329,
      328,  327,  326,  324,  323,  322,  321,  320,  319,  318,
      317,  316,  315,  314,  313,  312,  311,  310,  309,  308,
      307,  306,  305,  304,  303,  302,  301,  299,  298,  297,
      296,  295,  294,  293,  292,  291,  290,  288,  287,  286,
      284,  283,  280,  279,  278,  277,  276,  275,  274,  273,
      272,  269,  268,  267,  265,  264,  263,  262,  261,  258,

      257,  256,  255,  253,  249,  246,  245,  244,  243,  242,
      240,  237,  236,  235,  231,  227,  226,  224,  223,  222,
      220,  219,  218,  217,  216,  214,  213,  212,  211,  209,
      208,  207,  206,  205,  204,  203,  202,  201,  200,  199,
      192,  190,  189,  187,  186,  185,  184,  183,  181,  178,
      168,  167,  165,  164,  160,  155,  150,  145,  142,  137,
      134,  123,  112,  100,   96,   95,   94,   93,   87,   81,
       75,   69,   67,   66,   65,   64,   63,   60,   57,   56,
       54,   49,   46,   44,   43,   42,   41,   35,   29,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,

      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "moc.l"
/****************************************************************************
** $Id: qt/moc_lex.cpp   3.3.8   edited Feb 2 14:59 $
**
** Lexical analyzer for meta object compiler
**
** Created : 930417
**
** Copyright (C) 1992-2007 Trolltech ASA.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be used under the terms of the GNU General Public
** License versions 2.0 or 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file. Alternatively you may (at your option) use any
** later version of the GNU General Public License if such license has
** been publicly approved by Trolltech ASA (or its successors, if any)
** and the KDE Free Qt Foundation.
**
** Please review the following information to ensure GNU General
** Public Licensing requirements will be met:
** http://trolltech.com/products/qt/licenses/licensing/opensource/.
** If you are unsure which license is appropriate for your use, please
** review the following information:
** http://trolltech.com/products/qt/licenses/licensing/licensingoverview
** or contact the sales department at sales@trolltech.com.
**
** This file may be used under the terms of the Q Public License as
** defined by Trolltech ASA and appearing in the file LICENSE.QPL
** included in the packaging of this file.  Licensees holding valid Qt
** Commercial licenses may use this file in accordance with the Qt
** Commercial License Agreement provided with the Software.
**
** This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
** INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE. Trolltech reserves all rights not granted
** herein.
**
*****************************************************************************/
#line 39 "moc.l"
#ifdef MOC_YACC_CODE

#ifdef MOC_MWERKS_PLUGIN
#ifdef Q_OS_MAC9
# define isascii(c)   ((int)( (unsigned int) (c) <= (unsigned char)0x7F ))
#endif
const char *buf_buffer = NULL;
long buf_size_total = 0, buf_index = 0;
#define YY_INPUT(buf, result, max_size) \
     { \
          if(buf_index < buf_size_total ) { \
              while(!isascii(buf_buffer[buf_index])) buf_index++; \
              int ms = ((max_size < buf_size_total) ? max_size : buf_size_total); \
              for(result = 0; result < ms; result++) { \
                 char c = buf_buffer[buf_index + result]; \
                 if(!isascii(c)) { \
                    buf_index++; \
                    break; \
                 } \
                 buf[result] = c == '\r' ? '\n' : c; \
              } \
              buf_index += result; \
          } else result = YY_NULL; \
     }
#endif

#include "qstring.h"


#define input yyinput				// yyinput in C++

#define X if(lexDebug){fprintf(stderr,"LEX (%i) : %s\n",lineNo,yytext);};
#define Y if(lexDebug){fprintf(stderr,"LEX (%i) : %s\n",lineNo,yytext);};
/*
#define Y if(lexDebug){fprintf(stderr,"LEX (%i) : %s updates level to %i\n"\
                                 ,lineNo,yytext,templLevel);};
*/
#define Z if(lexDebug){fprintf(stderr,"LEX (%i) : skipped the string %s\"\n"\
                               ,lineNo,yytext);};
#define BEGIN_INSIDE


#define linput() \
    ( (c = input()) == '\n' ? (lineNo++, c) : (c == EOF) ? 0 : c )

#include <string.h>
#include <stdlib.h>

int classPLevel      = 1;  /* Depth of nested curly braces in IN_CLASS */
int namespacePLevel  = 1;  /* Depth of nested curly braces in IN_NAMESPACE */
int expLevel         = 1;  /* Depth of nested parentheses in IN_EXPR */
int enumLevel         = 1;  /* Depth of nested parentheses in IN_ENUM */
int fctLevel         = 1;  /* Depth of nested parentheses in IN_FCT */
int templLevel       = 1;  /* Depth of levels in IN_TEMPL_ARGS */

int lastState        = 0;  /* Remembers the state when a
                              MOC_SKIP_BEGIN is encountered */
int skipLevel        = 0; /* Depth of MOC_SKIP_BEGINs */

class QString;

extern void addExpressionChar( const char );
extern void addExpressionString( const char * );
extern void moc_warn( const char *msg );

#line 1033 "lex.yy.c"

#define INITIAL 0
#define OUTSIDE 1
#define QT_DEF 2
#define IN_CLASS 3
#define IN_NAMESPACE 4
#define IN_ENUM 5
#define IN_EXPR 6
#define IN_DEF_ARG 7
#define IN_FCT 8
#define IN_TEMPL_ARGS 9
#define GIMME_SEMICOLON 10
#define SKIP 11
#define IN_PROPERTY 12
#define IN_CLASSINFO 13

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 110 "moc.l"


#line 1203 "lex.yy.c"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 615 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1190 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 112 "moc.l"
{ X;
				  BEGIN QT_DEF;
				  return CLASS; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 115 "moc.l"
{ X;
				  BEGIN QT_DEF;
				  return NAMESPACE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 118 "moc.l"
{ X;
                                  BEGIN QT_DEF;
				  return USING; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 121 "moc.l"
{ X;
				  BEGIN QT_DEF;
				  return TEMPLATE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 124 "moc.l"
{ X; return Q_OBJECT; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 125 "moc.l"
{ X; return SIGNALS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 126 "moc.l"
{ X; return SLOTS; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 127 "moc.l"
{ X; return Q_CLASSINFO; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 128 "moc.l"
{ X; return Q_PROPERTY; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 129 "moc.l"
{ X; return Q_OVERRIDE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 130 "moc.l"
{ X; return Q_ENUMS; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 131 "moc.l"
{ X; return Q_SETS; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 133 "moc.l"
{ fctLevel++;Y; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 134 "moc.l"
{ fctLevel--;Y;if (fctLevel==0){X;return '}';}}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 135 "moc.l"
{ classPLevel++;Y; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 136 "moc.l"
{ classPLevel--;Y;if (classPLevel == 0)
                                                      {X;return '}';} }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 138 "moc.l"
{ X;if( classPLevel == 1 ) return PUBLIC; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 139 "moc.l"
{ X;if( classPLevel == 1 ) return PROTECTED; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 140 "moc.l"
{ X;if( classPLevel == 1 ) return PRIVATE; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 141 "moc.l"
{ X;if( classPLevel == 1 ) return SIGNALS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 142 "moc.l"
{ X;if( classPLevel == 1 ) return SLOTS; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 143 "moc.l"
{ X;if( classPLevel == 1 ) return Q_CLASSINFO; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 144 "moc.l"
{ X;
				  if ( classPLevel == 1 )
				      return Q_OBJECT;
				  else if ( classPLevel > 1 )
				      moc_warn( "Cannot use Q_OBJECT in nested class." );
				}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 150 "moc.l"
{ X;if( classPLevel == 1 ) return Q_PROPERTY; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 151 "moc.l"
{ X;if( classPLevel == 1 ) return Q_OVERRIDE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 152 "moc.l"
{ X;if( classPLevel == 1 ) return Q_ENUMS; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 153 "moc.l"
{ X;if( classPLevel == 1 ) return Q_SETS; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 155 "moc.l"
{ namespacePLevel++;Y; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 156 "moc.l"
{ namespacePLevel--;Y;if (namespacePLevel == 0)
                                                          {X;return '}';}}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 158 "moc.l"
{ X;
                                  BEGIN QT_DEF;
				  return CLASS; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 161 "moc.l"
{ X;
                                  BEGIN QT_DEF;
                                  return TEMPLATE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 164 "moc.l"
{ X;
				  BEGIN QT_DEF;
				  return NAMESPACE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 167 "moc.l"
{ X;
                                  BEGIN QT_DEF;
				  return USING; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 171 "moc.l"
{ X; return '('; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 172 "moc.l"
{ X; return ')'; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 173 "moc.l"
{ X; return READ; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 174 "moc.l"
{ X; return WRITE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 175 "moc.l"
{ X; return STORED; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 176 "moc.l"
{ X; return RESET; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 177 "moc.l"
{ X; return DESIGNABLE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 178 "moc.l"
{ X; return SCRIPTABLE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 181 "moc.l"
{ expLevel++;X; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 182 "moc.l"
{ expLevel--;Y;if (expLevel == 0)
					{ X; BEGIN QT_DEF; return ')';} }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 184 "moc.l"
{ expLevel++;X; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 185 "moc.l"
{ expLevel--;X;if (expLevel == 0)
					{ X; BEGIN QT_DEF; return ']';} }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 187 "moc.l"
{ if (expLevel == 0)
					{ X; BEGIN QT_DEF; return ',' ;} }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 189 "moc.l"
{ if (expLevel == 0)
					{ X; BEGIN QT_DEF; return ';' ;} }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 191 "moc.l"
{ expLevel++;X; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 192 "moc.l"
{ expLevel--;Y;if (expLevel == 0)
					{ X; BEGIN QT_DEF; return ')';} }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 194 "moc.l"
{ expLevel++;X; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 195 "moc.l"
{ expLevel--;X;if (expLevel == 0)
					{ X; BEGIN QT_DEF; return ']';} }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 197 "moc.l"
{ if (expLevel <= 1)
					{ X; BEGIN QT_DEF; return ',' ;} }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 199 "moc.l"
{ if (expLevel == 0)
					{ X; BEGIN QT_DEF; return ';' ;} }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 201 "moc.l"
{ enumLevel++;X; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 202 "moc.l"
{ enumLevel--;X; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 203 "moc.l"
{ enumLevel++;X; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 204 "moc.l"
{ enumLevel--;X }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 205 "moc.l"
{ if (enumLevel == 0)
					{ X; BEGIN QT_DEF; return ',' ;} }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 207 "moc.l"
{ if (enumLevel == 0)
					{ X; BEGIN QT_DEF; return ';' ;} }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 209 "moc.l"
{ if (enumLevel == 0)
					{ X; BEGIN QT_DEF; return '}' ;} }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 211 "moc.l"
{ templLevel++;
				  Y;
				  addExpressionChar( yytext[0] );
				}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 215 "moc.l"
{ templLevel--;
				  Y;
				  if ( templLevel == 0 ) {
				      X;
				      BEGIN QT_DEF;
				      return yytext[0];
				  } else {
				      addExpressionChar( yytext[0] );
				  }
				}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 225 "moc.l"
{ X;return FRIEND; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 226 "moc.l"
{ X;return TYPEDEF; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 227 "moc.l"
{ X;return AUTO; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 228 "moc.l"
{ X;return REGISTER; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 229 "moc.l"
{ X;return STATIC; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 230 "moc.l"
{ X;return EXTERN; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 231 "moc.l"
{ X;return INLINE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 232 "moc.l"
{ X;return INLINE; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 233 "moc.l"
{ X;return VIRTUAL; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 234 "moc.l"
{ X;return CONST; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 235 "moc.l"
{ X;return VOLATILE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 236 "moc.l"
{ X;return CHAR; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 237 "moc.l"
{ X;return SHORT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 238 "moc.l"
{ X;return INT; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 239 "moc.l"
{ X;return LONG; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 240 "moc.l"
{ X;return SIGNED; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 241 "moc.l"
{ X;return UNSIGNED; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 242 "moc.l"
{ X;return FLOAT; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 243 "moc.l"
{ X;return DOUBLE; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 244 "moc.l"
{ X;return VOID; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 245 "moc.l"
{ X;return ENUM; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 246 "moc.l"
{ X;return CLASS; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 247 "moc.l"
{ X;return STRUCT; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 248 "moc.l"
{ X;return UNION; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 249 "moc.l"
{ X;return ASM; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 250 "moc.l"
{ X;return PRIVATE; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 251 "moc.l"
{ X;return PROTECTED; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 252 "moc.l"
{ X;return PUBLIC; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 253 "moc.l"
{ X;return OPERATOR; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 254 "moc.l"
{ X;return DBL_COLON; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 255 "moc.l"
{ X;return TRIPLE_DOT; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 256 "moc.l"
{ X;return TEMPLATE; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 257 "moc.l"
{ X;return MUTABLE; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 258 "moc.l"
{ X;return THROW; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 259 "moc.l"
{ X;return USING; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 260 "moc.l"
{ X;return NAMESPACE; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 262 "moc.l"
{
			  X;
			  yylval.string = qstrdup(yytext);
			  return IDENTIFIER;
			}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 268 "moc.l"
{
			  X;
			  yylval.string = qstrdup(yytext);
			  return IDENTIFIER;
			}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 274 "moc.l"
{ X; return '('; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 275 "moc.l"
{ X; return ')'; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 276 "moc.l"
{ X; return ','; }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 278 "moc.l"
{
			  X;
			  yylval.string = qstrdup( yytext + 1 );
			  input();		/* discard the '"' */
			  return STRING;
			}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 285 "moc.l"
;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 286 "moc.l"
;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 287 "moc.l"
;
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 289 "moc.l"
{				/* discard strings */
			  Z;
			}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 293 "moc.l"
{				/* discard strings */
			  Z;
			}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 297 "moc.l"
{			/* discard strings */
			  Z;
			}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 301 "moc.l"
{			/* discard strings */
			  Z;
			  addExpressionString( yytext );
			  input();		/* discard the '"' */
			}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 308 "moc.l"
{
			  X;
			  addExpressionString( yytext );
			  input();		/* discard the '"' */
			  return STRING;
			}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 315 "moc.l"
{
			  X;
			  yylval.string = qstrdup( yytext + 1 );
			  input();		/* discard the '"' */
			  return STRING;
			}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 322 "moc.l"
{ X;
			  yylval.char_val = yytext[1];
			  return CHAR_VAL;
			}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 327 "moc.l"
{ X;
			 yylval.char_val = '\a';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 332 "moc.l"
{ X;
			 yylval.char_val = '\b';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 337 "moc.l"
{ X;
			 yylval.char_val = '\f';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 342 "moc.l"
{ X;
			 yylval.char_val = '\n';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 347 "moc.l"
{ X;
			 yylval.char_val = '\r';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 352 "moc.l"
{ X;
			 yylval.char_val = '\t';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 357 "moc.l"
{ X;
			 yylval.char_val = '\v';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 362 "moc.l"
{ X;
			 yylval.char_val = '\\';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 367 "moc.l"
{ X;
			 yylval.char_val = '\?';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 372 "moc.l"
{ X;
			 yylval.char_val = '\'';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 377 "moc.l"
{ X;
			 yylval.char_val = '\"';	/* " */
			 return CHAR_VAL;
		       }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 382 "moc.l"
{ X;
			 yylval.char_val = '\0';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 387 "moc.l"
{ X;
			 yylval.char_val =
			   (char)strtol( &yytext[1], 0, 8 );
			 return CHAR_VAL;
		       }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 393 "moc.l"
{ X;
			 yylval.char_val =
			   (char)strtol( &yytext[2], 0, 16 );
			 return CHAR_VAL;
		       }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 399 "moc.l"
{ X;
			 yylval.char_val = ' ';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 404 "moc.l"
{ X;
			  yylval.int_val = atoi(yytext);
			  return INT_VAL;
			}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 409 "moc.l"
{ X;
			  yylval.double_val = atof(yytext);
			  return DOUBLE_VAL;
			}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 414 "moc.l"
{ X;
			  yylval.double_val = atof(yytext);
			  return DOUBLE_VAL;
			}
	YY_BREAK
case 133:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 420 "moc.l"
{ /* skip multi-line macro-definitions */
			  int c, c1;
			  input();   /* Discard the '\n'. */
			  do {
			      c1=' ';
			      while((c = linput()) != '\n' && c != 0) c1=c;
			      if (c == 0) break;
			  } while(c1=='\\');
			  unput(c);  /* put back the '\n' or the EOF */
			}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 431 "moc.l"
{ /* preprocessor commands are skipped */}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 432 "moc.l"
{ /* C++ comment */
			  QCString s = yytext;
                          if ( s.contains( "MOC_SKIP_BEGIN" ) ) {
                            skipLevel++;
                            if ( skipLevel == 1 ) {
                              lastState = YYSTATE;
                              BEGIN SKIP;
                            }
                          } else
                          if ( s.contains( "MOC_SKIP_END" ) ) {
                            if ( skipLevel == 0 ) {
                              moc_warn(" MOC_SKIP_END without MOC_SKIP_BEGIN");
                            } else {
                              skipLevel--;
                              if ( skipLevel == 0 ) {
                                BEGIN lastState;
                              }
                            }
                          }
                        }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 452 "moc.l"
{ /* C comment */
			  int c = ' ';
			  do {
			      if ( c!= '*' ) {
				  while((c = linput()) != '*' && c != 0)
				      ;
			      }
			      if (c == 0) break;
			  } while(((c = linput())) != '/' && c != 0);
			  if (c == 0)
			      unput(c);
			}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 465 "moc.l"
{ addExpressionChar( yytext[0] ); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 467 "moc.l"
{
				    /* spaces are important in template args,
				       e.g. Foo<const int> */
				    addExpressionChar( yytext[0] ); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 471 "moc.l"
;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 472 "moc.l"
;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 473 "moc.l"
;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 474 "moc.l"
;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 475 "moc.l"
{ addExpressionChar( yytext[0] ); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 476 "moc.l"
;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 477 "moc.l"
{ addExpressionChar( yytext[0] ); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 478 "moc.l"
;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 479 "moc.l"
;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 480 "moc.l"
{
			  X;
			  return yytext[0];
			}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 484 "moc.l"
{
			  X;
			  return ';';
			}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 488 "moc.l"
{
			  lineNo++;
			}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 493 "moc.l"
ECHO;
	YY_BREAK
#line 2241 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(OUTSIDE):
case YY_STATE_EOF(QT_DEF):
case YY_STATE_EOF(IN_CLASS):
case YY_STATE_EOF(IN_NAMESPACE):
case YY_STATE_EOF(IN_ENUM):
case YY_STATE_EOF(IN_EXPR):
case YY_STATE_EOF(IN_DEF_ARG):
case YY_STATE_EOF(IN_FCT):
case YY_STATE_EOF(IN_TEMPL_ARGS):
case YY_STATE_EOF(GIMME_SEMICOLON):
case YY_STATE_EOF(SKIP):
case YY_STATE_EOF(IN_PROPERTY):
case YY_STATE_EOF(IN_CLASSINFO):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 615 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 615 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 614);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yy_str )
{
    
	return yy_scan_bytes(yy_str,strlen(yy_str) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * bytes, int  len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 493 "moc.l"



#endif // MOC_YACC_CODE

