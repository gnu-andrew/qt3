'\" t
.TH QIntCacheIterator 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QIntCacheIterator \- Iterator for QIntCache collections
.SH SYNOPSIS
\fC#include <qintcache.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQIntCacheIterator\fR ( const QIntCache<type> & cache )"
.br
.ti -1c
.BI "\fBQIntCacheIterator\fR ( const QIntCacheIterator<type> & ci )"
.br
.ti -1c
.BI "QIntCacheIterator<type> & \fBoperator=\fR ( const QIntCacheIterator<type> & ci )"
.br
.ti -1c
.BI "uint \fBcount\fR () const"
.br
.ti -1c
.BI "bool \fBisEmpty\fR () const"
.br
.ti -1c
.BI "bool \fBatFirst\fR () const"
.br
.ti -1c
.BI "bool \fBatLast\fR () const"
.br
.ti -1c
.BI "type * \fBtoFirst\fR ()"
.br
.ti -1c
.BI "type * \fBtoLast\fR ()"
.br
.ti -1c
.BI "\fBoperator type *\fR () const"
.br
.ti -1c
.BI "type * \fBcurrent\fR () const"
.br
.ti -1c
.BI "long \fBcurrentKey\fR () const"
.br
.ti -1c
.BI "type * \fBoperator()\fR ()"
.br
.ti -1c
.BI "type * \fBoperator++\fR ()"
.br
.ti -1c
.BI "type * \fBoperator+=\fR ( uint jump )"
.br
.ti -1c
.BI "type * \fBoperator--\fR ()"
.br
.ti -1c
.BI "type * \fBoperator-=\fR ( uint jump )"
.br
.in -1c
.SH DESCRIPTION
The QIntCacheIterator class provides an iterator for QIntCache collections.
.PP
Note that the traversal order is arbitrary; you are not guaranteed any particular order. If new objects are inserted into the cache while the iterator is active, the iterator may or may not see them.
.PP
Multiple iterators are completely independent, even when they operate on the same QIntCache. QIntCache updates all iterators that refer an item when that item is removed.
.PP
QIntCacheIterator provides an operator++(), and an operator+=() to traverse the cache; current() and currentKey() to access the current cache item and its key; atFirst() atLast(), which return TRUE if the iterator points to the first/last item in the cache; isEmpty(), which returns TRUE if the cache is empty; and count(), which returns the number of items in the cache.
.PP
Note that atFirst() and atLast() refer to the iterator's arbitrary ordering, not to the cache's internal least recently used list.
.PP
See also QIntCache, Collection Classes, and Non-GUI Classes.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QIntCacheIterator::QIntCacheIterator ( const QIntCache<type> & cache )"
Constructs an iterator for \fIcache\fR. The current iterator item is set to point to the first item in the \fIcache\fR (or rather, the first item is defined to be the item at which this constructor sets the iterator to point).
.SH "QIntCacheIterator::QIntCacheIterator ( const QIntCacheIterator<type> & ci )"
Constructs an iterator for the same cache as \fIci\fR. The new iterator starts at the same item as ci.current(), but moves independently from there on.
.SH "bool QIntCacheIterator::atFirst () const"
Returns TRUE if the iterator points to the first item in the cache; otherwise returns FALSE. Note that this refers to the iterator's arbitrary ordering, not to the cache's internal least recently used list.
.PP
See also toFirst() and atLast().
.SH "bool QIntCacheIterator::atLast () const"
Returns TRUE if the iterator points to the last item in the cache; otherwise returns FALSE. Note that this refers to the iterator's arbitrary ordering, not to the cache's internal least recently used list.
.PP
See also toLast() and atFirst().
.SH "uint QIntCacheIterator::count () const"
Returns the number of items in the cache on which this iterator operates.
.PP
See also isEmpty().
.SH "type * QIntCacheIterator::current () const"
Returns a pointer to the current iterator item.
.SH "long QIntCacheIterator::currentKey () const"
Returns the key for the current iterator item.
.SH "bool QIntCacheIterator::isEmpty () const"
Returns TRUE if the cache is empty; otherwise returns FALSE.
.PP
See also count().
.SH "QIntCacheIterator::operator type * () const"
Cast operator. Returns a pointer to the current iterator item. Same as current().
.SH "type * QIntCacheIterator::operator() ()"
Makes the succeeding item current and returns the original current item.
.PP
If the current iterator item was the last item in the cache or if it was 0, 0 is returned.
.SH "type * QIntCacheIterator::operator++ ()"
Prefix ++ makes the iterator point to the item just after current(), and makes it the new current item for the iterator. If current() was the last item, operator--() returns 0.
.SH "type * QIntCacheIterator::operator+= ( uint jump )"
Returns the item \fIjump\fR positions after the current item, or 0 if it is beyond the last item. Makes this the current item.
.SH "type * QIntCacheIterator::operator-- ()"
Prefix -- makes the iterator point to the item just before current(), and makes it the new current item for the iterator. If current() was the first item, operator--() returns 0.
.SH "type * QIntCacheIterator::operator-= ( uint jump )"
Returns the item \fIjump\fR positions before the current item, or 0 if it is beyond the first item. Makes this the current item.
.SH "QIntCacheIterator<type> & QIntCacheIterator::operator= ( const QIntCacheIterator<type> & ci )"
Makes this an iterator for the same cache as \fIci\fR. The new iterator starts at the same item as ci.current(), but moves independently thereafter.
.SH "type * QIntCacheIterator::toFirst ()"
Sets the iterator to point to the first item in the cache and returns a pointer to the item.
.PP
Sets the iterator to 0, and returns 0, if the cache is empty.
.PP
See also toLast() and isEmpty().
.SH "type * QIntCacheIterator::toLast ()"
Sets the iterator to point to the last item in the cache and returns a pointer to the item.
.PP
Sets the iterator to 0, and returns 0, if the cache is empty.
.PP
See also toFirst() and isEmpty().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qintcacheiterator.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qintcacheiterator.3qt) and the Qt
version (3.3.8).
