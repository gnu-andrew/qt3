'\" t
.TH QCheckListItem 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QCheckListItem \- Checkable list view items
.SH SYNOPSIS
\fC#include <qlistview.h>\fR
.PP
Inherits QListViewItem.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "enum \fBType\fR { RadioButton, CheckBox, Controller, RadioButtonController = Controller, CheckBoxController }"
.br
.ti -1c
.BI "enum \fBToggleState\fR { Off, NoChange, On }"
.br
.ti -1c
.BI "\fBQCheckListItem\fR ( QCheckListItem * parent, const QString & text, Type tt = RadioButtonController )"
.br
.ti -1c
.BI "\fBQCheckListItem\fR ( QCheckListItem * parent, QListViewItem * after, const QString & text, Type tt = RadioButtonController )"
.br
.ti -1c
.BI "\fBQCheckListItem\fR ( QListViewItem * parent, const QString & text, Type tt = RadioButtonController )"
.br
.ti -1c
.BI "\fBQCheckListItem\fR ( QListViewItem * parent, QListViewItem * after, const QString & text, Type tt = RadioButtonController )"
.br
.ti -1c
.BI "\fBQCheckListItem\fR ( QListView * parent, const QString & text, Type tt = RadioButtonController )"
.br
.ti -1c
.BI "\fBQCheckListItem\fR ( QListView * parent, QListViewItem * after, const QString & text, Type tt = RadioButtonController )"
.br
.ti -1c
.BI "\fBQCheckListItem\fR ( QListViewItem * parent, const QString & text, const QPixmap & p )"
.br
.ti -1c
.BI "\fBQCheckListItem\fR ( QListView * parent, const QString & text, const QPixmap & p )"
.br
.ti -1c
.BI "\fB~QCheckListItem\fR ()"
.br
.ti -1c
.BI "virtual void \fBpaintCell\fR ( QPainter * p, const QColorGroup & cg, int column, int width, int align )"
.br
.ti -1c
.BI "virtual void \fBpaintFocus\fR ( QPainter * p, const QColorGroup & cg, const QRect & r )"
.br
.ti -1c
.BI "virtual void \fBsetOn\fR ( bool b )"
.br
.ti -1c
.BI "bool \fBisOn\fR () const"
.br
.ti -1c
.BI "Type \fBtype\fR () const"
.br
.ti -1c
.BI "QString \fBtext\fR () const"
.br
.ti -1c
.BI "void \fBsetTristate\fR ( bool b )"
.br
.ti -1c
.BI "bool \fBisTristate\fR () const"
.br
.ti -1c
.BI "ToggleState \fBstate\fR () const"
.br
.ti -1c
.BI "void \fBsetState\fR ( ToggleState s )"
.br
.ti -1c
.BI "virtual int \fBrtti\fR () const"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual void \fBactivate\fR ()"
.br
.ti -1c
.BI "void \fBturnOffChild\fR ()"
.br
.ti -1c
.BI "virtual void \fBstateChange\fR ( bool )"
.br
.in -1c
.SH DESCRIPTION
The QCheckListItem class provides checkable list view items.
.PP
QCheckListItems are used in QListViews to provide QListViewItems that are checkboxes, radio buttons or controllers.
.PP
Checkbox and controller check list items may be inserted at any level in a list view. Radio button check list items must be children of a controller check list item.
.PP
The item can be checked or unchecked with setOn(). Its type can be retrieved with type() and its text retrieved with text().
.PP
<center>
.ce 1
.B "[Image Omitted]"
.PP
</center>
.PP
See also QListViewItem, QListView, and Advanced Widgets.
.SS "Member Type Documentation"
.SH "QCheckListItem::ToggleState"
This enum specifies a QCheckListItem's toggle state.
.TP
\fCQCheckListItem::Off\fR
.TP
\fCQCheckListItem::NoChange\fR
.TP
\fCQCheckListItem::On\fR
.SH "QCheckListItem::Type"
This enum type specifies a QCheckListItem's type:
.TP
\fCQCheckListItem::RadioButton\fR
.TP
\fCQCheckListItem::CheckBox\fR
.TP
\fCQCheckListItem::Controller\fR - \fIobsolete\fR (use RadioButtonController instead)
.TP
\fCQCheckListItem::RadioButtonController\fR
.TP
\fCQCheckListItem::CheckBoxController\fR
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QCheckListItem::QCheckListItem ( QCheckListItem * parent, const QString & text, Type tt = RadioButtonController )"
Constructs a checkable item with parent \fIparent\fR, text \fItext\fR and of type \fItt\fR. Note that a RadioButton must be the child of a RadioButtonController, otherwise it will not toggle.
.SH "QCheckListItem::QCheckListItem ( QCheckListItem * parent, QListViewItem * after, const QString & text, Type tt = RadioButtonController )"
Constructs a checkable item with parent \fIparent\fR, which is after \fIafter\fR in the parent's list of children, and with text \fItext\fR and of type \fItt\fR. Note that a RadioButton must be the child of a RadioButtonController, otherwise it will not toggle.
.SH "QCheckListItem::QCheckListItem ( QListViewItem * parent, const QString & text, Type tt = RadioButtonController )"
Constructs a checkable item with parent \fIparent\fR, text \fItext\fR and of type \fItt\fR. Note that this item must \fInot\fR be a RadioButton. Radio buttons must be children of a RadioButtonController.
.SH "QCheckListItem::QCheckListItem ( QListViewItem * parent, QListViewItem * after, const QString & text, Type tt = RadioButtonController )"
Constructs a checkable item with parent \fIparent\fR, which is after \fIafter\fR in the parent's list of children, with text \fItext\fR and of type \fItt\fR. Note that this item must \fInot\fR be a RadioButton. Radio buttons must be children of a RadioButtonController.
.SH "QCheckListItem::QCheckListItem ( QListView * parent, const QString & text, Type tt = RadioButtonController )"
Constructs a checkable item with parent \fIparent\fR, text \fItext\fR and of type \fItt\fR. Note that \fItt\fR must \fInot\fR be RadioButton. Radio buttons must be children of a RadioButtonController.
.SH "QCheckListItem::QCheckListItem ( QListView * parent, QListViewItem * after, const QString & text, Type tt = RadioButtonController )"
Constructs a checkable item with parent \fIparent\fR, which is after \fIafter\fR in the parent's list of children, with text \fItext\fR and of type \fItt\fR. Note that \fItt\fR must \fInot\fR be RadioButton. Radio buttons must be children of a RadioButtonController.
.SH "QCheckListItem::QCheckListItem ( QListViewItem * parent, const QString & text, const QPixmap & p )"
Constructs a RadioButtonController item with parent \fIparent\fR, text \fItext\fR and pixmap \fIp\fR.
.SH "QCheckListItem::QCheckListItem ( QListView * parent, const QString & text, const QPixmap & p )"
Constructs a RadioButtonController item with parent \fIparent\fR, text \fItext\fR and pixmap \fIp\fR.
.SH "QCheckListItem::~QCheckListItem ()"
Destroys the item, and all its children to any depth, freeing up all allocated resources.
.SH "void QCheckListItem::activate ()\fC [virtual protected]\fR"
Toggle check box or set radio button to on.
.PP
Reimplemented from QListViewItem.
.SH "bool QCheckListItem::isOn () const"
Returns TRUE if the item is toggled on; otherwise returns FALSE.
.SH "bool QCheckListItem::isTristate () const"
Returns TRUE if the item is tristate; otherwise returns FALSE.
.PP
See also setTristate().
.SH "void QCheckListItem::paintCell ( QPainter * p, const QColorGroup & cg, int column, int width, int align )\fC [virtual]\fR"
Paints the item using the painter \fIp\fR and the color group \fIcg\fR. The item is in column \fIcolumn\fR, has width \fIwidth\fR and has alignment \fIalign\fR. (See Qt::AlignmentFlags for valid alignments.)
.PP
Reimplemented from QListViewItem.
.SH "void QCheckListItem::paintFocus ( QPainter * p, const QColorGroup & cg, const QRect & r )\fC [virtual]\fR"
Draws the focus rectangle \fIr\fR using the color group \fIcg\fR on the painter \fIp\fR.
.PP
Reimplemented from QListViewItem.
.SH "int QCheckListItem::rtti () const\fC [virtual]\fR"
Returns 1.
.PP
Make your derived classes return their own values for rtti(), and you can distinguish between list view items. You should use values greater than 1000, to allow for extensions to this class.
.PP
Reimplemented from QListViewItem.
.SH "void QCheckListItem::setOn ( bool b )\fC [virtual]\fR"
Sets the button on if \fIb\fR is TRUE, otherwise sets it off. Maintains radio button exclusivity.
.SH "void QCheckListItem::setState ( ToggleState s )"
Sets the toggle state of the checklistitem to \fIs\fR. \fIs\fR can be Off, NoChange or On.
.PP
Tristate can only be enabled for CheckBox or CheckBoxController, therefore the NoChange only applies to them.
.PP
Setting the state to On or Off on a CheckBoxController will recursivly set the states of its children to the same state.
.PP
Setting the state to NoChange on a CheckBoxController will make it recursivly recall the previous stored state of its children. If there was no previous stored state the children are all set to On.
.SH "void QCheckListItem::setTristate ( bool b )"
Sets tristate to \fIb\fR if the Type is either a CheckBoxController or a CheckBox.
.PP
\fCCheckBoxControllers\fR are tristate by default.
.PP
See also state() and isTristate().
.SH "ToggleState QCheckListItem::state () const"
Returns the state of the item.
.PP
See also QCheckListItem::ToggleState.
.SH "void QCheckListItem::stateChange ( bool )\fC [virtual protected]\fR"
This virtual function is called when the item changes its state. NoChange (if tristate is enabled and the type is either CheckBox or CheckBoxController) reports the same as Off, so use state() to determine if the state is actually Off or NoChange.
.SH "QString QCheckListItem::text () const"
Returns the item's text.
.SH "void QCheckListItem::turnOffChild ()\fC [protected]\fR"
If this is a RadioButtonController that has RadioButton children, turn off the child that is on.
.SH "Type QCheckListItem::type () const"
Returns the type of this item.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qchecklistitem.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qchecklistitem.3qt) and the Qt
version (3.3.8).
