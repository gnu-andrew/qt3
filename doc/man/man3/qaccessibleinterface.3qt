'\" t
.TH QAccessibleInterface 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QAccessibleInterface \- Defines an interface that exposes information about accessible objects
.SH SYNOPSIS
\fC#include <qaccessible.h>\fR
.PP
Inherits QAccessible.
.PP
Inherited by QAccessibleObject.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "virtual bool \fBisValid\fR () const = 0"
.br
.ti -1c
.BI "virtual int \fBchildCount\fR () const = 0"
.br
.ti -1c
.BI "virtual QRESULT \fBqueryChild\fR ( int control, QAccessibleInterface ** iface ) const = 0"
.br
.ti -1c
.BI "virtual QRESULT \fBqueryParent\fR ( QAccessibleInterface ** iface ) const = 0"
.br
.ti -1c
.BI "virtual int \fBcontrolAt\fR ( int x, int y ) const = 0"
.br
.ti -1c
.BI "virtual QRect \fBrect\fR ( int control ) const = 0"
.br
.ti -1c
.BI "virtual int \fBnavigate\fR ( NavDirection direction, int startControl ) const = 0"
.br
.ti -1c
.BI "virtual QString \fBtext\fR ( Text t, int control ) const = 0"
.br
.ti -1c
.BI "virtual void \fBsetText\fR ( Text t, int control, const QString & text ) = 0"
.br
.ti -1c
.BI "virtual Role \fBrole\fR ( int control ) const = 0"
.br
.ti -1c
.BI "virtual State \fBstate\fR ( int control ) const = 0"
.br
.ti -1c
.BI "virtual QMemArray<int> \fBselection\fR () const = 0"
.br
.ti -1c
.BI "virtual bool \fBdoDefaultAction\fR ( int control ) = 0"
.br
.ti -1c
.BI "virtual bool \fBsetFocus\fR ( int control ) = 0"
.br
.ti -1c
.BI "virtual bool \fBsetSelected\fR ( int control, bool on, bool extend ) = 0"
.br
.ti -1c
.BI "virtual void \fBclearSelection\fR () = 0"
.br
.in -1c
.SH DESCRIPTION
The QAccessibleInterface class defines an interface that exposes information about accessible objects.
.PP
See also Miscellaneous Classes.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "int QAccessibleInterface::childCount () const\fC [pure virtual]\fR"
Returns the number of children that belong to this object. A child can provide accessibility information on it's own (e.g. a child widget), or be a sub-element of this accessible object.
.PP
All objects provide this information.
.PP
See also queryChild().
.SH "void QAccessibleInterface::clearSelection ()\fC [pure virtual]\fR"
Removes any selection from the object.
.PP
See also setSelected().
.SH "int QAccessibleInterface::controlAt ( int x, int y ) const\fC [pure virtual]\fR"
Returns the ID of the child that contains the screen coordinates (\fIx\fR, \fIy\fR). This function returns 0 if the point is positioned on the object itself. If the tested point is outside the boundaries of the object this function returns -1.
.PP
All visual objects provide this information.
.SH "bool QAccessibleInterface::doDefaultAction ( int control )\fC [pure virtual]\fR"
Calling this function performs the default action of the child object specified by \fIcontrol\fR, or the default action of the object itself if \fIcontrol\fR is 0.
.SH "bool QAccessibleInterface::isValid () const\fC [pure virtual]\fR"
Returns TRUE if all the data necessary to use this interface implementation is valid (e.g. all pointers are non-null), otherwise returns FALSE.
.SH "int QAccessibleInterface::navigate ( NavDirection direction, int startControl ) const\fC [pure virtual]\fR"
This function traverses to another object, or to a sub-element of the current object. \fIdirection\fR specifies in which direction to navigate, and \fIstartControl\fR specifies the start point of the navigation, which is either 0 if the navigation starts at the object itself, or an ID of one of the object's sub-elements.
.PP
The function returns the ID of the sub-element located in the \fIdirection\fR specified. If there is nothing in the navigated \fIdirection\fR, this function returns -1.
.PP
All objects support navigation.
.SH "QRESULT QAccessibleInterface::queryChild ( int control, QAccessibleInterface ** iface ) const\fC [pure virtual]\fR"
Sets \fIiface\fR to point to the implementation of the QAccessibleInterface for the child specified with \fIcontrol\fR. If the child doesn't provide accessibility information on it's own, the value of \fIiface\fR is set to 0. For those elements, this object is responsible for exposing the child's properties.
.PP
All objects provide this information.
.PP
See also childCount() and queryParent().
.SH "QRESULT QAccessibleInterface::queryParent ( QAccessibleInterface ** iface ) const\fC [pure virtual]\fR"
Sets \fIiface\fR to point to the implementation of the QAccessibleInterface for the parent object, or to 0 if there is no such implementation or object.
.PP
All objects provide this information.
.PP
See also queryChild().
.SH "QRect QAccessibleInterface::rect ( int control ) const\fC [pure virtual]\fR"
Returns the location of the child specified with \fIcontrol\fR in screen coordinates. This function returns the location of the object itself if \fIcontrol\fR is 0.
.PP
All visual objects provide this information.
.SH "Role QAccessibleInterface::role ( int control ) const\fC [pure virtual]\fR"
Returns the role of the object if \fIcontrol\fR is 0, or the role of the object's sub-element with ID \fIcontrol\fR. The role of an object is usually static. All accessible objects have a role.
.PP
See also text(), state(), and selection().
.SH "QMemArray<int> QAccessibleInterface::selection () const\fC [pure virtual]\fR"
Returns the list of all the element IDs that are selected.
.PP
See also text(), role(), and state().
.SH "bool QAccessibleInterface::setFocus ( int control )\fC [pure virtual]\fR"
Gives the focus to the child object specified by \fIcontrol\fR, or to the object itself if \fIcontrol\fR is 0.
.PP
Returns TRUE if the focus could be set; otherwise returns FALSE.
.SH "bool QAccessibleInterface::setSelected ( int control, bool on, bool extend )\fC [pure virtual]\fR"
Sets the selection of the child object with ID \fIcontrol\fR to \fIon\fR. If \fIextend\fR is TRUE, all child elements between the focused item and the specified child object have their selection set to \fIon\fR.
.PP
Returns TRUE if the selection could be set; otherwise returns FALSE.
.PP
See also setFocus() and clearSelection().
.SH "void QAccessibleInterface::setText ( Text t, int control, const QString & text )\fC [pure virtual]\fR"
Sets the text property \fIt\fR of the child object \fIcontrol\fR to \fItext\fR. If \fIcontrol\fR is 0, the text property of the object itself is set.
.SH "State QAccessibleInterface::state ( int control ) const\fC [pure virtual]\fR"
Returns the current state of the object if \fIcontrol\fR is 0, or the state of the object's sub-element element with ID \fIcontrol\fR. All objects have a state.
.PP
See also text(), role(), and selection().
.SH "QString QAccessibleInterface::text ( Text t, int control ) const\fC [pure virtual]\fR"
Returns a string property \fIt\fR of the child object specified by \fIcontrol\fR, or the string property of the object itself if \fIcontrol\fR is 0.
.PP
The \fIName\fR is a string used by clients to identify, find or announce an accessible object for the user. All objects must have a name that is unique within their container.
.PP
An accessible object's \fIDescription\fR provides textual information about an object's visual appearance. The description is primarily used to provide greater context for low-vision or blind users, but is also used for context searching or other applications. Not all objects have a description. An "OK" button would not need a description, but a toolbutton that shows a picture of a smiley would.
.PP
The \fIValue\fR of an accessible object represents visual information contained by the object, e.g. the text in a line edit. Usually, the value can be modified by the user. Not all objects have a value, e.g. static text labels don't, and some objects have a state that already is the value, e.g. toggle buttons.
.PP
The \fIHelp\fR text provides information about the function and usage of an accessible object. Not all objects provide this information.
.PP
An accessible object's \fIDefaultAction\fR describes the object's primary method of manipulation, and should be a verb or a short phrase, e.g. "Press" for a button.
.PP
The accelerator is a keyboard shortcut that activates the default action of the object. A keyboard shortcut is the underlined character in the text of a menu, menu item or control, and is either the character itself, or a combination of this character and a modifier key like ALT, CTRL or SHIFT. Command controls like tool buttons also have shortcut keys and usually display them in their tooltip.
.PP
See also role(), state(), and selection().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qaccessibleinterface.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qaccessibleinterface.3qt) and the Qt
version (3.3.8).
