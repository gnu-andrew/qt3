'\" t
.TH QSpinBox 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QSpinBox \- Spin box widget (spin button)
.SH SYNOPSIS
\fC#include <qspinbox.h>\fR
.PP
Inherits QWidget and QRangeControl.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQSpinBox\fR ( QWidget * parent = 0, const char * name = 0 )"
.br
.ti -1c
.BI "\fBQSpinBox\fR ( int minValue, int maxValue, int step = 1, QWidget * parent = 0, const char * name = 0 )"
.br
.ti -1c
.BI "\fB~QSpinBox\fR ()"
.br
.ti -1c
.BI "QString \fBtext\fR () const"
.br
.ti -1c
.BI "virtual QString \fBprefix\fR () const"
.br
.ti -1c
.BI "virtual QString \fBsuffix\fR () const"
.br
.ti -1c
.BI "virtual QString \fBcleanText\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetSpecialValueText\fR ( const QString & text )"
.br
.ti -1c
.BI "QString \fBspecialValueText\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetWrapping\fR ( bool on )"
.br
.ti -1c
.BI "bool \fBwrapping\fR () const"
.br
.ti -1c
.BI "enum \fBButtonSymbols\fR { UpDownArrows, PlusMinus }"
.br
.ti -1c
.BI "virtual void \fBsetButtonSymbols\fR ( ButtonSymbols )"
.br
.ti -1c
.BI "ButtonSymbols \fBbuttonSymbols\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetValidator\fR ( const QValidator * v )"
.br
.ti -1c
.BI "const QValidator * \fBvalidator\fR () const"
.br
.ti -1c
.BI "int \fBminValue\fR () const"
.br
.ti -1c
.BI "int \fBmaxValue\fR () const"
.br
.ti -1c
.BI "void \fBsetMinValue\fR ( int )"
.br
.ti -1c
.BI "void \fBsetMaxValue\fR ( int )"
.br
.ti -1c
.BI "int \fBlineStep\fR () const"
.br
.ti -1c
.BI "void \fBsetLineStep\fR ( int )"
.br
.ti -1c
.BI "int \fBvalue\fR () const"
.br
.ti -1c
.BI "QRect \fBupRect\fR () const"
.br
.ti -1c
.BI "QRect \fBdownRect\fR () const"
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "virtual void \fBsetValue\fR ( int value )"
.br
.ti -1c
.BI "virtual void \fBsetPrefix\fR ( const QString & text )"
.br
.ti -1c
.BI "virtual void \fBsetSuffix\fR ( const QString & text )"
.br
.ti -1c
.BI "virtual void \fBstepUp\fR ()"
.br
.ti -1c
.BI "virtual void \fBstepDown\fR ()"
.br
.ti -1c
.BI "virtual void \fBselectAll\fR ()"
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void \fBvalueChanged\fR ( int value )"
.br
.ti -1c
.BI "void \fBvalueChanged\fR ( const QString & valueText )"
.br
.in -1c
.SS "Properties"
.in +1c
.ti -1c
.BI "ButtonSymbols \fBbuttonSymbols\fR - the current button symbol mode"
.br
.ti -1c
.BI "QString \fBcleanText\fR - the spin box's text with no prefix(), suffix() or leading or trailing whitespace  \fI(read " "only" ")\fR"
.br
.ti -1c
.BI "int \fBlineStep\fR - the line step"
.br
.ti -1c
.BI "int \fBmaxValue\fR - the maximum value of the spin box"
.br
.ti -1c
.BI "int \fBminValue\fR - the minimum value of the spin box"
.br
.ti -1c
.BI "QString \fBprefix\fR - the spin box's prefix"
.br
.ti -1c
.BI "QString \fBspecialValueText\fR - the special-value text"
.br
.ti -1c
.BI "QString \fBsuffix\fR - the suffix of the spin box"
.br
.ti -1c
.BI "QString \fBtext\fR - the spin box's " "text" ", including any prefix() and suffix()  \fI(read " "only" ")\fR"
.br
.ti -1c
.BI "int \fBvalue\fR - the value of the spin box"
.br
.ti -1c
.BI "bool \fBwrapping\fR - whether it is possible to step the value from the highest value to the lowest value and vice versa"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual QString \fBmapValueToText\fR ( int v )"
.br
.ti -1c
.BI "virtual int \fBmapTextToValue\fR ( bool * ok )"
.br
.ti -1c
.BI "QString \fBcurrentValueText\fR ()"
.br
.ti -1c
.BI "virtual void \fBupdateDisplay\fR ()"
.br
.ti -1c
.BI "virtual void \fBinterpretText\fR ()"
.br
.ti -1c
.BI "QLineEdit * \fBeditor\fR () const"
.br
.ti -1c
.BI "virtual void \fBvalueChange\fR ()"
.br
.ti -1c
.BI "virtual void \fBrangeChange\fR ()"
.br
.ti -1c
.BI "virtual bool \fBeventFilter\fR ( QObject * o, QEvent * ev )"
.br
.in -1c
.SS "Protected Slots"
.in +1c
.ti -1c
.BI "void \fBtextChanged\fR ()"
.br
.in -1c
.SH DESCRIPTION
The QSpinBox class provides a spin box widget (spin button).
.PP
QSpinBox allows the user to choose a value either by clicking the up/down buttons to increase/decrease the value currently displayed or by typing the value directly into the spin box. If the value is entered directly into the spin box, Enter (or Return) must be pressed to apply the new value. The value is usually an integer.
.PP
Every time the value changes QSpinBox emits the valueChanged() signal. The current value can be fetched with value() and set with setValue().
.PP
The spin box keeps the value within a numeric range, and to multiples of the lineStep() size (see QRangeControl for details). Clicking the up/down buttons or using the keyboard accelerator's up and down arrows will increase or decrease the current value in steps of size lineStep(). The minimum and maximum value and the step size can be set using one of the constructors, and can be changed later with setMinValue(), setMaxValue() and setLineStep().
.PP
Most spin boxes are directional, but QSpinBox can also operate as a circular spin box, i.e. if the range is 0-99 and the current value is 99, clicking "up" will give 0. Use setWrapping() if you want circular behavior.
.PP
The displayed value can be prepended and appended with arbitrary strings indicating, for example, currency or the unit of measurement. See setPrefix() and setSuffix(). The text in the spin box is retrieved with text() (which includes any prefix() and suffix()), or with cleanText() (which has no prefix(), no suffix() and no leading or trailing whitespace). currentValueText() returns the spin box's current value as text.
.PP
Normally the spin box displays up and down arrows in the buttons. You can use setButtonSymbols() to change the display to show \fB+\fR and \fB-\fR symbols if you prefer. In either case the up and down arrow keys work as expected.
.PP
It is often desirable to give the user a special (often default) choice in addition to the range of numeric values. See setSpecialValueText() for how to do this with QSpinBox.
.PP
The default QWidget::focusPolicy() is StrongFocus.
.PP
If using prefix(), suffix() and specialValueText() don't provide enough control, you can ignore them and subclass QSpinBox instead.
.PP
QSpinBox can easily be subclassed to allow the user to input things other than an integer value as long as the allowed input can be mapped to a range of integers. This can be done by overriding the virtual functions mapValueToText() and mapTextToValue(), and setting another suitable validator using setValidator().
.PP
For example, these functions could be changed so that the user provided values from 0.0 to 10.0, or -1 to signify 'Auto', while the range of integers used inside the program would be -1 to 100:
.PP
.nf
.br
        class MySpinBox : public QSpinBox
.br
        {
.br
            Q_OBJECT
.br
        public:
.br
            ...
.br
.br
            QString mapValueToText( int value )
.br
            {
.br
                if ( value == -1 ) // special case
.br
                    return QString( "Auto" );
.br
.br
                return QString( "%1.%2" ) // 0.0 to 10.0
.br
                    .arg( value / 10 ).arg( value % 10 );
.br
            }
.br
.br
            int mapTextToValue( bool *ok )
.br
            {
.br
                if ( text() == "Auto" ) // special case
.br
                    return -1;
.br
.br
                return (int) ( 10 * text().toFloat() ); // 0 to 100
.br
            }
.br
        };
.br
.fi
.PP
.ce 1
.B "[Image Omitted]"
.PP

.ce 1
.B "[Image Omitted]"
.PP
See also QScrollBar, QSlider, GUI Design Handbook: Spin Box, and Basic Widgets.
.SS "Member Type Documentation"
.SH "QSpinBox::ButtonSymbols"
This enum type determines what the buttons in a spin box show.
.TP
\fCQSpinBox::UpDownArrows\fR - the buttons show little arrows in the classic style.
.TP
\fCQSpinBox::PlusMinus\fR - the buttons show \fB+\fR and \fB-\fR symbols.
.PP
See also QSpinBox::buttonSymbols.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QSpinBox::QSpinBox ( QWidget * parent = 0, const char * name = 0 )"
Constructs a spin box with the default QRangeControl range and step values. It is called \fIname\fR and has parent \fIparent\fR.
.PP
See also minValue, maxValue, setRange(), lineStep, and setSteps().
.SH "QSpinBox::QSpinBox ( int minValue, int maxValue, int step = 1, QWidget * parent = 0, const char * name = 0 )"
Constructs a spin box that allows values from \fIminValue\fR to \fImaxValue\fR inclusive, with step amount \fIstep\fR. The value is initially set to \fIminValue\fR.
.PP
The spin box is called \fIname\fR and has parent \fIparent\fR.
.PP
See also minValue, maxValue, setRange(), lineStep, and setSteps().
.SH "QSpinBox::~QSpinBox ()"
Destroys the spin box, freeing all memory and other resources.
.SH "ButtonSymbols QSpinBox::buttonSymbols () const"
Returns the current button symbol mode. See the "buttonSymbols" property for details.
.SH "QString QSpinBox::cleanText () const\fC [virtual]\fR"
Returns the spin box's text with no prefix(), suffix() or leading or trailing whitespace. See the "cleanText" property for details.
.SH "QString QSpinBox::currentValueText ()\fC [protected]\fR"
Returns the full text calculated from the current value, including any prefix and suffix. If there is special value text and the value is minValue() the specialValueText() is returned.
.SH "QRect QSpinBox::downRect () const"
Returns the geometry of the "down" button.
.SH "QLineEdit * QSpinBox::editor () const\fC [protected]\fR"
Returns a pointer to the embedded QLineEdit.
.SH "bool QSpinBox::eventFilter ( QObject * o, QEvent * ev )\fC [virtual protected]\fR"
Intercepts and handles the events coming to the embedded QLineEdit that have special meaning for the QSpinBox. The object is passed as \fIo\fR and the event is passed as \fIev\fR.
.PP
Reimplemented from QObject.
.SH "void QSpinBox::interpretText ()\fC [virtual protected]\fR"
QSpinBox calls this after the user has manually edited the contents of the spin box (i.e. by typing in the embedded QLineEdit, rather than using the up/down buttons/keys).
.PP
The default implementation of this function interprets the new text using mapTextToValue(). If mapTextToValue() is successful, it changes the spin box's value; if not, the value is left unchanged.
.PP
See also editor().
.SH "int QSpinBox::lineStep () const"
Returns the line step. See the "lineStep" property for details.
.SH "int QSpinBox::mapTextToValue ( bool * ok )\fC [virtual protected]\fR"
This virtual function is used by the spin box whenever it needs to interpret text entered by the user as a value. The text is available as text() and as cleanText(), and this function must parse it if possible. If \fIok\fR is not 0: if it parses the text successfully, \fI*ok\fR is set to TRUE; otherwise \fI*ok\fR is set to FALSE.
.PP
Subclasses that need to display spin box values in a non-numeric way need to reimplement this function.
.PP
Note that Qt handles specialValueText() separately; this function is only concerned with the other values.
.PP
The default implementation tries to interpret the text() as an integer in the standard way and returns the integer value.
.PP
See also interpretText() and mapValueToText().
.SH "QString QSpinBox::mapValueToText ( int v )\fC [virtual protected]\fR"
This virtual function is used by the spin box whenever it needs to display value \fIv\fR. The default implementation returns a string containing \fIv\fR printed in the standard way. Reimplementations may return anything. (See the example in the detailed description.)
.PP
Note that Qt does not call this function for specialValueText() and that neither prefix() nor suffix() are included in the return value.
.PP
If you reimplement this, you may also need to reimplement mapTextToValue().
.PP
See also updateDisplay() and mapTextToValue().
.SH "int QSpinBox::maxValue () const"
Returns the maximum value of the spin box. See the "maxValue" property for details.
.SH "int QSpinBox::minValue () const"
Returns the minimum value of the spin box. See the "minValue" property for details.
.SH "QString QSpinBox::prefix () const\fC [virtual]\fR"
Returns the spin box's prefix. See the "prefix" property for details.
.SH "void QSpinBox::rangeChange ()\fC [virtual protected]\fR"
This virtual function is called by QRangeControl whenever the range has changed. It adjusts the default validator and updates the display; if you need additional processing, you can reimplement this function.
.PP
Reimplemented from QRangeControl.
.SH "void QSpinBox::selectAll ()\fC [virtual slot]\fR"
Selects all the text in the spin box's editor.
.SH "void QSpinBox::setButtonSymbols ( ButtonSymbols )\fC [virtual]\fR"
Sets the current button symbol mode. See the "buttonSymbols" property for details.
.SH "void QSpinBox::setLineStep ( int )"
Sets the line step. See the "lineStep" property for details.
.SH "void QSpinBox::setMaxValue ( int )"
Sets the maximum value of the spin box. See the "maxValue" property for details.
.SH "void QSpinBox::setMinValue ( int )"
Sets the minimum value of the spin box. See the "minValue" property for details.
.SH "void QSpinBox::setPrefix ( const QString & text )\fC [virtual slot]\fR"
Sets the spin box's prefix to \fItext\fR. See the "prefix" property for details.
.SH "void QSpinBox::setSpecialValueText ( const QString & text )\fC [virtual]\fR"
Sets the special-value text to \fItext\fR. See the "specialValueText" property for details.
.SH "void QSpinBox::setSuffix ( const QString & text )\fC [virtual slot]\fR"
Sets the suffix of the spin box to \fItext\fR. See the "suffix" property for details.
.SH "void QSpinBox::setValidator ( const QValidator * v )\fC [virtual]\fR"
Sets the validator to \fIv\fR. The validator controls what keyboard input is accepted when the user is editing in the value field. The default is to use a suitable QIntValidator.
.PP
Use setValidator(0) to turn off input validation (entered input will still be kept within the spin box's range).
.SH "void QSpinBox::setValue ( int value )\fC [virtual slot]\fR"
Sets the value of the spin box to \fIvalue\fR. See the "value" property for details.
.SH "void QSpinBox::setWrapping ( bool on )\fC [virtual]\fR"
Sets whether it is possible to step the value from the highest value to the lowest value and vice versa to \fIon\fR. See the "wrapping" property for details.
.SH "QString QSpinBox::specialValueText () const"
Returns the special-value text. See the "specialValueText" property for details.
.SH "void QSpinBox::stepDown ()\fC [virtual slot]\fR"
Decreases the spin box's value one lineStep(), wrapping as necessary if wrapping() is TRUE. This is the same as clicking on the pointing-down button and can be used for keyboard accelerators, for example.
.PP
See also stepUp(), subtractLine(), lineStep, setSteps(), value, and value.
.SH "void QSpinBox::stepUp ()\fC [virtual slot]\fR"
Increases the spin box's value by one lineStep(), wrapping as necessary if wrapping() is TRUE. This is the same as clicking on the pointing-up button and can be used for keyboard accelerators, for example.
.PP
See also stepDown(), addLine(), lineStep, setSteps(), value, and value.
.SH "QString QSpinBox::suffix () const\fC [virtual]\fR"
Returns the suffix of the spin box. See the "suffix" property for details.
.SH "QString QSpinBox::text () const"
Returns the spin box's text, including any prefix() and suffix(). See the "text" property for details.
.SH "void QSpinBox::textChanged ()\fC [protected slot]\fR"
This slot is called whenever the user edits the spin box's text.
.SH "QRect QSpinBox::upRect () const"
Returns the geometry of the "up" button.
.SH "void QSpinBox::updateDisplay ()\fC [virtual protected]\fR"
Updates the contents of the embedded QLineEdit to reflect the current value using mapValueToText(). Also enables/disables the up/down push buttons accordingly.
.PP
See also mapValueToText().
.SH "const QValidator * QSpinBox::validator () const"
Returns the validator that constrains editing for this spin box if there is any; otherwise returns 0.
.PP
See also setValidator() and QValidator.
.SH "int QSpinBox::value () const"
Returns the value of the spin box. See the "value" property for details.
.SH "void QSpinBox::valueChange ()\fC [virtual protected]\fR"
This virtual function is called by QRangeControl whenever the value has changed. The QSpinBox reimplementation updates the display and emits the valueChanged() signals; if you need additional processing, either reimplement this or connect to one of the valueChanged() signals.
.PP
Reimplemented from QRangeControl.
.SH "void QSpinBox::valueChanged ( int value )\fC [signal]\fR"
This signal is emitted every time the value of the spin box changes; the new value is passed in \fIvalue\fR. This signal will be emitted as a result of a call to setValue(), or because the user changed the value by using a keyboard accelerator or mouse click, etc.
.PP
Note that the valueChanged() signal is emitted \fIevery\fR time, not just for the "last" step; i.e. if the user clicks "up" three times, this signal is emitted three times.
.PP
See also value.
.PP
Examples:
.)l listbox/listbox.cpp, qfd/fontdisplayer.cpp, and scribble/scribble.cpp.
.SH "void QSpinBox::valueChanged ( const QString & valueText )\fC [signal]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
This signal is emitted whenever the valueChanged( int ) signal is emitted, i.e. every time the value of the spin box changes (whatever the cause, e.g. by setValue(), by a keyboard accelerator, by mouse clicks, etc.).
.PP
The \fIvalueText\fR parameter is the same string that is displayed in the edit field of the spin box.
.PP
See also value, prefix, suffix, and specialValueText.
.SH "bool QSpinBox::wrapping () const"
Returns TRUE if it is possible to step the value from the highest value to the lowest value and vice versa; otherwise returns FALSE. See the "wrapping" property for details.
.SS "Property Documentation"
.SH "ButtonSymbols buttonSymbols"
This property holds the current button symbol mode.
.PP
The possible values can be either UpDownArrows or PlusMinus. The default is UpDownArrows.
.PP
See also ButtonSymbols.
.PP
Set this property's value with setButtonSymbols() and get this property's value with buttonSymbols().
.SH "QString cleanText"
This property holds the spin box's text with no prefix(), suffix() or leading or trailing whitespace.
.PP
Get this property's value with cleanText().
.PP
See also text, prefix, and suffix.
.SH "int lineStep"
This property holds the line step.
.PP
When the user uses the arrows to change the spin box's value the value will be incremented/decremented by the amount of the line step.
.PP
The setLineStep() function calls the virtual stepChange() function if the new line step is different from the previous setting.
.PP
See also QRangeControl::setSteps() and setRange().
.PP
Set this property's value with setLineStep() and get this property's value with lineStep().
.SH "int maxValue"
This property holds the maximum value of the spin box.
.PP
When setting this property, QSpinBox::minValue is adjusted, if necessary, to ensure that the range remains valid.
.PP
See also setRange() and specialValueText.
.PP
Set this property's value with setMaxValue() and get this property's value with maxValue().
.SH "int minValue"
This property holds the minimum value of the spin box.
.PP
When setting this property, QSpinBox::maxValue is adjusted, if necessary, to ensure that the range remains valid.
.PP
See also setRange() and specialValueText.
.PP
Set this property's value with setMinValue() and get this property's value with minValue().
.SH "QString prefix"
This property holds the spin box's prefix.
.PP
The prefix is prepended to the start of the displayed value. Typical use is to display a unit of measurement or a currency symbol. For example:
.PP
.nf
.br
        sb->setPrefix( "$" );
.br
.fi
.PP
To turn off the prefix display, set this property to an empty string. The default is no prefix. The prefix is not displayed for the minValue() if specialValueText() is not empty.
.PP
If no prefix is set, prefix() returns QString::null.
.PP
See also suffix.
.PP
Set this property's value with setPrefix() and get this property's value with prefix().
.SH "QString specialValueText"
This property holds the special-value text.
.PP
If set, the spin box will display this text instead of a numeric value whenever the current value is equal to minVal(). Typical use is to indicate that this choice has a special (default) meaning.
.PP
For example, if your spin box allows the user to choose the margin width in a print dialog and your application is able to automatically choose a good margin width, you can set up the spin box like this:
.PP
.nf
.br
        QSpinBox marginBox( -1, 20, 1, parent, "marginBox" );
.br
        marginBox->setSuffix( " mm" );
.br
        marginBox->setSpecialValueText( "Auto" );
.br
.fi
The user will then be able to choose a margin width from 0-20 millimeters or select "Auto" to leave it to the application to choose. Your code must then interpret the spin box value of -1 as the user requesting automatic margin width.
.PP
All values are displayed with the prefix() and suffix() (if set), \fIexcept\fR for the special value, which only shows the special value text.
.PP
To turn off the special-value text display, call this function with an empty string. The default is no special-value text, i.e. the numeric value is shown as usual.
.PP
If no special-value text is set, specialValueText() returns QString::null.
.PP
Set this property's value with setSpecialValueText() and get this property's value with specialValueText().
.SH "QString suffix"
This property holds the suffix of the spin box.
.PP
The suffix is appended to the end of the displayed value. Typical use is to display a unit of measurement or a currency symbol. For example:
.PP
.nf
.br
        sb->setSuffix( " km" );
.br
.fi
.PP
To turn off the suffix display, set this property to an empty string. The default is no suffix. The suffix is not displayed for the minValue() if specialValueText() is not empty.
.PP
If no suffix is set, suffix() returns a QString::null.
.PP
See also prefix.
.PP
Set this property's value with setSuffix() and get this property's value with suffix().
.SH "QString text"
This property holds the spin box's text, including any prefix() and suffix().
.PP
There is no default text.
.PP
See also value.
.PP
Get this property's value with text().
.SH "int value"
This property holds the value of the spin box.
.PP
Set this property's value with setValue() and get this property's value with value().
.PP
See also QRangeControl::setValue().
.SH "bool wrapping"
This property holds whether it is possible to step the value from the highest value to the lowest value and vice versa.
.PP
By default, wrapping is turned off.
.PP
If you have a range of 0..100 and wrapping is off when the user reaches 100 and presses the Up Arrow nothing will happen; but if wrapping is on the value will change from 100 to 0, then to 1, etc. When wrapping is on, navigating past the highest value takes you to the lowest and vice versa.
.PP
See also minValue, maxValue, and setRange().
.PP
Set this property's value with setWrapping() and get this property's value with wrapping().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qspinbox.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qspinbox.3qt) and the Qt
version (3.3.8).
