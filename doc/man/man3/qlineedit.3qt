'\" t
.TH QLineEdit 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QLineEdit \- One-line text editor
.SH SYNOPSIS
\fC#include <qlineedit.h>\fR
.PP
Inherits QFrame.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQLineEdit\fR ( QWidget * parent, const char * name = 0 )"
.br
.ti -1c
.BI "\fBQLineEdit\fR ( const QString & contents, QWidget * parent, const char * name = 0 )"
.br
.ti -1c
.BI "\fBQLineEdit\fR ( const QString & contents, const QString & inputMask, QWidget * parent, const char * name = 0 )"
.br
.ti -1c
.BI "\fB~QLineEdit\fR ()"
.br
.ti -1c
.BI "QString \fBtext\fR () const"
.br
.ti -1c
.BI "QString \fBdisplayText\fR () const"
.br
.ti -1c
.BI "int \fBmaxLength\fR () const"
.br
.ti -1c
.BI "bool \fBframe\fR () const"
.br
.ti -1c
.BI "enum \fBEchoMode\fR { Normal, NoEcho, Password }"
.br
.ti -1c
.BI "EchoMode \fBechoMode\fR () const"
.br
.ti -1c
.BI "bool \fBisReadOnly\fR () const"
.br
.ti -1c
.BI "const QValidator * \fBvalidator\fR () const"
.br
.ti -1c
.BI "virtual QSize \fBsizeHint\fR () const"
.br
.ti -1c
.BI "virtual QSize \fBminimumSizeHint\fR () const"
.br
.ti -1c
.BI "int \fBcursorPosition\fR () const"
.br
.ti -1c
.BI "bool validateAndSet ( const QString & newText, int newPos, int newMarkAnchor, int newMarkDrag )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "int \fBalignment\fR () const"
.br
.ti -1c
.BI "void cursorLeft ( bool mark, int steps = 1 )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "void cursorRight ( bool mark, int steps = 1 )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "void \fBcursorForward\fR ( bool mark, int steps = 1 )"
.br
.ti -1c
.BI "void \fBcursorBackward\fR ( bool mark, int steps = 1 )"
.br
.ti -1c
.BI "void \fBcursorWordForward\fR ( bool mark )"
.br
.ti -1c
.BI "void \fBcursorWordBackward\fR ( bool mark )"
.br
.ti -1c
.BI "void \fBbackspace\fR ()"
.br
.ti -1c
.BI "void \fBdel\fR ()"
.br
.ti -1c
.BI "void \fBhome\fR ( bool mark )"
.br
.ti -1c
.BI "void \fBend\fR ( bool mark )"
.br
.ti -1c
.BI "bool \fBisModified\fR () const"
.br
.ti -1c
.BI "void \fBclearModified\fR ()"
.br
.ti -1c
.BI "bool edited () const  \fI(obsolete)\fR"
.br
.ti -1c
.BI "void setEdited ( bool )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "bool \fBhasSelectedText\fR () const"
.br
.ti -1c
.BI "QString \fBselectedText\fR () const"
.br
.ti -1c
.BI "int \fBselectionStart\fR () const"
.br
.ti -1c
.BI "bool \fBisUndoAvailable\fR () const"
.br
.ti -1c
.BI "bool \fBisRedoAvailable\fR () const"
.br
.ti -1c
.BI "bool hasMarkedText () const  \fI(obsolete)\fR"
.br
.ti -1c
.BI "QString markedText () const  \fI(obsolete)\fR"
.br
.ti -1c
.BI "bool \fBdragEnabled\fR () const"
.br
.ti -1c
.BI "QString \fBinputMask\fR () const"
.br
.ti -1c
.BI "void \fBsetInputMask\fR ( const QString & inputMask )"
.br
.ti -1c
.BI "bool \fBhasAcceptableInput\fR () const"
.br
.ti -1c
.BI "int characterAt ( int xpos, QChar * chr ) const  \fI(obsolete)\fR"
.br
.ti -1c
.BI "bool getSelection ( int * start, int * end )  \fI(obsolete)\fR"
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "virtual void \fBsetText\fR ( const QString & )"
.br
.ti -1c
.BI "virtual void \fBselectAll\fR ()"
.br
.ti -1c
.BI "virtual void \fBdeselect\fR ()"
.br
.ti -1c
.BI "virtual void \fBclearValidator\fR ()"
.br
.ti -1c
.BI "virtual void \fBinsert\fR ( const QString & newText )"
.br
.ti -1c
.BI "virtual void \fBclear\fR ()"
.br
.ti -1c
.BI "virtual void \fBundo\fR ()"
.br
.ti -1c
.BI "virtual void \fBredo\fR ()"
.br
.ti -1c
.BI "virtual void \fBsetMaxLength\fR ( int )"
.br
.ti -1c
.BI "virtual void \fBsetFrame\fR ( bool )"
.br
.ti -1c
.BI "virtual void \fBsetEchoMode\fR ( EchoMode )"
.br
.ti -1c
.BI "virtual void \fBsetReadOnly\fR ( bool )"
.br
.ti -1c
.BI "virtual void \fBsetValidator\fR ( const QValidator * v )"
.br
.ti -1c
.BI "virtual void \fBsetSelection\fR ( int start, int length )"
.br
.ti -1c
.BI "virtual void \fBsetCursorPosition\fR ( int )"
.br
.ti -1c
.BI "virtual void \fBsetAlignment\fR ( int flag )"
.br
.ti -1c
.BI "virtual void \fBcut\fR ()"
.br
.ti -1c
.BI "virtual void \fBcopy\fR () const"
.br
.ti -1c
.BI "virtual void \fBpaste\fR ()"
.br
.ti -1c
.BI "virtual void \fBsetDragEnabled\fR ( bool b )"
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void \fBtextChanged\fR ( const QString & )"
.br
.ti -1c
.BI "void \fBreturnPressed\fR ()"
.br
.ti -1c
.BI "void \fBlostFocus\fR ()"
.br
.ti -1c
.BI "void \fBselectionChanged\fR ()"
.br
.in -1c
.SS "Properties"
.in +1c
.ti -1c
.BI "bool \fBacceptableInput\fR - whether the input satisfies the inputMask and the validator  \fI(read " "only" ")\fR"
.br
.ti -1c
.BI "Alignment \fBalignment\fR - the alignment of the line edit"
.br
.ti -1c
.BI "int \fBcursorPosition\fR - the current cursor position for this line edit"
.br
.ti -1c
.BI "QString \fBdisplayText\fR - the displayed text  \fI(read " "only" ")\fR"
.br
.ti -1c
.BI "bool \fBdragEnabled\fR - whether the lineedit starts a drag if the user presses and moves the mouse on some selected text"
.br
.ti -1c
.BI "EchoMode \fBechoMode\fR - the line edit's echo mode"
.br
.ti -1c
.BI "bool edited - whether the line edit has been edited. Use modified instead  \fI(obsolete)\fR"
.br
.ti -1c
.BI "bool \fBframe\fR - whether the line edit draws itself with a frame"
.br
.ti -1c
.BI "bool hasMarkedText - whether part of the text has been selected by the user. Use hasSelectedText instead  \fI(read " "only" ")\fR  \fI(obsolete)\fR"
.br
.ti -1c
.BI "bool \fBhasSelectedText\fR - whether there is any text selected  \fI(read " "only" ")\fR"
.br
.ti -1c
.BI "QString \fBinputMask\fR - the validation input mask"
.br
.ti -1c
.BI "QString markedText - the text selected by the user. Use selectedText instead  \fI(read " "only" ")\fR  \fI(obsolete)\fR"
.br
.ti -1c
.BI "int \fBmaxLength\fR - the maximum permitted length of the text"
.br
.ti -1c
.BI "bool \fBmodified\fR - whether the line edit's contents has been modified by the user  \fI(read " "only" ")\fR"
.br
.ti -1c
.BI "bool \fBreadOnly\fR - whether the line edit is read only"
.br
.ti -1c
.BI "bool \fBredoAvailable\fR - whether redo is available  \fI(read " "only" ")\fR"
.br
.ti -1c
.BI "QString \fBselectedText\fR - the selected text  \fI(read " "only" ")\fR"
.br
.ti -1c
.BI "QString \fBtext\fR - the line edit's text"
.br
.ti -1c
.BI "bool \fBundoAvailable\fR - whether undo is available  \fI(read " "only" ")\fR"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual void \fBkeyPressEvent\fR ( QKeyEvent * e )"
.br
.ti -1c
.BI "virtual QPopupMenu * \fBcreatePopupMenu\fR ()"
.br
.ti -1c
.BI "void repaintArea ( int from, int to )  \fI(obsolete)\fR"
.br
.in -1c
.SH DESCRIPTION
The QLineEdit widget is a one-line text editor.
.PP
A line edit allows the user to enter and edit a single line of plain text with a useful collection of editing functions, including undo and redo, cut and paste, and drag and drop.
.PP
By changing the echoMode() of a line edit, it can also be used as a "write-only" field, for inputs such as passwords.
.PP
The length of the text can be constrained to maxLength(). The text can be arbitrarily constrained using a validator() or an inputMask(), or both.
.PP
A related class is QTextEdit which allows multi-line, rich-text editing.
.PP
You can change the text with setText() or insert(). The text is retrieved with text(); the displayed text (which may be different, see EchoMode) is retrieved with displayText(). Text can be selected with setSelection() or selectAll(), and the selection can be cut(), copy()ied and paste()d. The text can be aligned with setAlignment().
.PP
When the text changes the textChanged() signal is emitted; when the Return or Enter key is pressed the returnPressed() signal is emitted. Note that if there is a validator set on the line edit, the returnPressed() signal will only be emitted if the validator returns \fCAcceptable\fR.
.PP
By default, QLineEdits have a frame as specified by the Windows and Motif style guides; you can turn it off by calling setFrame(FALSE).
.PP
The default key bindings are described below. The line edit also provides a context menu (usually invoked by a right mouse click) that presents some of these editing options. <center>.nf
.TS
l - l. Keypress Action Left Arrow Moves the cursor one character to the left. Shift+Left Arrow Moves and selects text one character to the left. Right Arrow Moves the cursor one character to the right. Shift+Right Arrow Moves and selects text one character to the right. Home Moves the cursor to the beginning of the line. End Moves the cursor to the end of the line. Backspace Deletes the character to the left of the cursor. Ctrl+Backspace Deletes the word to the left of the cursor. Delete Deletes the character to the right of the cursor. Ctrl+Delete Deletes the word to the right of the cursor. Ctrl+A Moves the cursor to the beginning of the line. Ctrl+B Moves the cursor one character to the left. Ctrl+C Copies the selected text to the clipboard. (Windows also supports Ctrl+Insert for this operation.) Ctrl+D Deletes the character to the right of the cursor. Ctrl+E Moves the cursor to the end of the line. Ctrl+F Moves the cursor one character to the right. Ctrl+H Deletes the character to the left of the cursor. Ctrl+K Deletes to the end of the line. Ctrl+V Pastes the clipboard text into line edit. (Windows also supports Shift+Insert for this operation.) Ctrl+X Deletes the selected text and copies it to the clipboard. (Windows also supports Shift+Delete for this operation.) Ctrl+Z Undoes the last operation. Ctrl+Y
.TE
.fi
</center>
.PP
Any other key sequence that represents a valid character, will cause the character to be inserted into the line edit.
.PP
.ce 1
.B "[Image Omitted]"
.PP

.ce 1
.B "[Image Omitted]"
.PP
See also QTextEdit, QLabel, QComboBox, GUI Design Handbook: Field, Entry, and Basic Widgets.
.SS "Member Type Documentation"
.SH "QLineEdit::EchoMode"
This enum type describes how a line edit should display its contents.
.TP
\fCQLineEdit::Normal\fR - Display characters as they are entered. This is the default.
.TP
\fCQLineEdit::NoEcho\fR - Do not display anything. This may be appropriate for passwords where even the length of the password should be kept secret.
.TP
\fCQLineEdit::Password\fR - Display asterisks instead of the characters actually entered.
.PP
See also echoMode and echoMode.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QLineEdit::QLineEdit ( QWidget * parent, const char * name = 0 )"
Constructs a line edit with no text.
.PP
The maximum text length is set to 32767 characters.
.PP
The \fIparent\fR and \fIname\fR arguments are sent to the QWidget constructor.
.PP
See also text and maxLength.
.SH "QLineEdit::QLineEdit ( const QString & contents, QWidget * parent, const char * name = 0 )"
Constructs a line edit containing the text \fIcontents\fR.
.PP
The cursor position is set to the end of the line and the maximum text length to 32767 characters.
.PP
The \fIparent\fR and \fIname\fR arguments are sent to the QWidget constructor.
.PP
See also text and maxLength.
.SH "QLineEdit::QLineEdit ( const QString & contents, const QString & inputMask, QWidget * parent, const char * name = 0 )"
Constructs a line edit with an input \fIinputMask\fR and the text \fIcontents\fR.
.PP
The cursor position is set to the end of the line and the maximum text length is set to the length of the mask (the number of mask characters and separators).
.PP
The \fIparent\fR and \fIname\fR arguments are sent to the QWidget constructor.
.PP
See also setMask() and text.
.SH "QLineEdit::~QLineEdit ()"
Destroys the line edit.
.SH "int QLineEdit::alignment () const"
Returns the alignment of the line edit. See the "alignment" property for details.
.SH "void QLineEdit::backspace ()"
If no text is selected, deletes the character to the left of the text cursor and moves the cursor one position to the left. If any text is selected, the cursor is moved to the beginning of the selected text and the selected text is deleted.
.PP
See also del().
.SH "int QLineEdit::characterAt ( int xpos, QChar * chr ) const"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.SH "void QLineEdit::clear ()\fC [virtual slot]\fR"
Clears the contents of the line edit.
.SH "void QLineEdit::clearModified ()"
Resets the modified flag to FALSE.
.PP
See also modified.
.SH "void QLineEdit::clearValidator ()\fC [virtual slot]\fR"
This slot is equivalent to setValidator(0).
.SH "void QLineEdit::copy () const\fC [virtual slot]\fR"
Copies the selected text to the clipboard, if there is any, and if echoMode() is Normal.
.PP
See also cut() and paste().
.SH "QPopupMenu * QLineEdit::createPopupMenu ()\fC [virtual protected]\fR"
This function is called to create the popup menu which is shown when the user clicks on the line edit with the right mouse button. If you want to create a custom popup menu, reimplement this function and return the popup menu you create. The popup menu's ownership is transferred to the caller.
.SH "void QLineEdit::cursorBackward ( bool mark, int steps = 1 )"
Moves the cursor back \fIsteps\fR characters. If \fImark\fR is TRUE each character moved over is added to the selection; if \fImark\fR is FALSE the selection is cleared.
.PP
See also cursorForward().
.SH "void QLineEdit::cursorForward ( bool mark, int steps = 1 )"
Moves the cursor forward \fIsteps\fR characters. If \fImark\fR is TRUE each character moved over is added to the selection; if \fImark\fR is FALSE the selection is cleared.
.PP
See also cursorBackward().
.SH "void QLineEdit::cursorLeft ( bool mark, int steps = 1 )"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
For compatibilty with older applications only. Use cursorBackward() instead.
.PP
See also cursorBackward().
.SH "int QLineEdit::cursorPosition () const"
Returns the current cursor position for this line edit. See the "cursorPosition" property for details.
.SH "void QLineEdit::cursorRight ( bool mark, int steps = 1 )"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
Use cursorForward() instead.
.PP
See also cursorForward().
.SH "void QLineEdit::cursorWordBackward ( bool mark )"
Moves the cursor one word backward. If \fImark\fR is TRUE, the word is also selected.
.PP
See also cursorWordForward().
.SH "void QLineEdit::cursorWordForward ( bool mark )"
Moves the cursor one word forward. If \fImark\fR is TRUE, the word is also selected.
.PP
See also cursorWordBackward().
.SH "void QLineEdit::cut ()\fC [virtual slot]\fR"
Copies the selected text to the clipboard and deletes it, if there is any, and if echoMode() is Normal.
.PP
If the current validator disallows deleting the selected text, cut() will copy without deleting.
.PP
See also copy(), paste(), and setValidator().
.SH "void QLineEdit::del ()"
If no text is selected, deletes the character to the right of the text cursor. If any text is selected, the cursor is moved to the beginning of the selected text and the selected text is deleted.
.PP
See also backspace().
.SH "void QLineEdit::deselect ()\fC [virtual slot]\fR"
Deselects any selected text.
.PP
See also setSelection() and selectAll().
.SH "QString QLineEdit::displayText () const"
Returns the displayed text. See the "displayText" property for details.
.SH "bool QLineEdit::dragEnabled () const"
Returns TRUE if the lineedit starts a drag if the user presses and moves the mouse on some selected text; otherwise returns FALSE. See the "dragEnabled" property for details.
.SH "EchoMode QLineEdit::echoMode () const"
Returns the line edit's echo mode. See the "echoMode" property for details.
.SH "bool QLineEdit::edited () const"
Returns TRUE if the line edit has been edited. Use modified instead; otherwise returns FALSE. See the "edited" property for details.
.SH "void QLineEdit::end ( bool mark )"
Moves the text cursor to the end of the line unless it is already there. If \fImark\fR is TRUE, text is selected towards the last position; otherwise, any selected text is unselected if the cursor is moved.
.PP
See also home().
.SH "bool QLineEdit::frame () const"
Returns TRUE if the line edit draws itself with a frame; otherwise returns FALSE. See the "frame" property for details.
.SH "bool QLineEdit::getSelection ( int * start, int * end )"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code. use selectedText(), selectionStart()
.SH "bool QLineEdit::hasAcceptableInput () const"
Returns TRUE if the input satisfies the inputMask and the validator; otherwise returns FALSE. See the "acceptableInput" property for details.
.SH "bool QLineEdit::hasMarkedText () const"
Returns TRUE if part of the text has been selected by the user. Use hasSelectedText instead; otherwise returns FALSE. See the "hasMarkedText" property for details.
.SH "bool QLineEdit::hasSelectedText () const"
Returns TRUE if there is any text selected; otherwise returns FALSE. See the "hasSelectedText" property for details.
.SH "void QLineEdit::home ( bool mark )"
Moves the text cursor to the beginning of the line unless it is already there. If \fImark\fR is TRUE, text is selected towards the first position; otherwise, any selected text is unselected if the cursor is moved.
.PP
See also end().
.SH "QString QLineEdit::inputMask () const"
Returns the validation input mask. See the "inputMask" property for details.
.SH "void QLineEdit::insert ( const QString & newText )\fC [virtual slot]\fR"
Deletes any selected text, inserts \fInewText\fR, and validates the result. If it is valid, it sets it as the new contents of the line edit.
.SH "bool QLineEdit::isModified () const"
Returns TRUE if the line edit's contents has been modified by the user; otherwise returns FALSE. See the "modified" property for details.
.SH "bool QLineEdit::isReadOnly () const"
Returns TRUE if the line edit is read only; otherwise returns FALSE. See the "readOnly" property for details.
.SH "bool QLineEdit::isRedoAvailable () const"
Returns TRUE if redo is available; otherwise returns FALSE. See the "redoAvailable" property for details.
.SH "bool QLineEdit::isUndoAvailable () const"
Returns TRUE if undo is available; otherwise returns FALSE. See the "undoAvailable" property for details.
.SH "void QLineEdit::keyPressEvent ( QKeyEvent * e )\fC [virtual protected]\fR"
Converts key press event \fIe\fR into a line edit action.
.PP
If Return or Enter is pressed and the current text is valid (or can be made valid by the validator), the signal returnPressed() is emitted.
.PP
The default key bindings are listed in the detailed description.
.PP
Reimplemented from QWidget.
.SH "void QLineEdit::lostFocus ()\fC [signal]\fR"
This signal is emitted when the line edit has lost focus.
.PP
See also focus, QWidget::focusInEvent(), and QWidget::focusOutEvent().
.SH "QString QLineEdit::markedText () const"
Returns the text selected by the user. Use selectedText instead. See the "markedText" property for details.
.SH "int QLineEdit::maxLength () const"
Returns the maximum permitted length of the text. See the "maxLength" property for details.
.SH "QSize QLineEdit::minimumSizeHint () const\fC [virtual]\fR"
Returns a minimum size for the line edit.
.PP
The width returned is enough for at least one character.
.PP
Reimplemented from QWidget.
.SH "void QLineEdit::paste ()\fC [virtual slot]\fR"
Inserts the clipboard's text at the cursor position, deleting any selected text, providing the line edit is not read-only.
.PP
If the end result would not be acceptable to the current validator, nothing happens.
.PP
See also copy() and cut().
.SH "void QLineEdit::redo ()\fC [virtual slot]\fR"
Redoes the last operation if redo is available.
.SH "void QLineEdit::repaintArea ( int from, int to )\fC [protected]\fR"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
Repaints all characters from \fIfrom\fR to \fIto\fR. If cursorPos is between from and to, ensures that cursorPos is visible.
.SH "void QLineEdit::returnPressed ()\fC [signal]\fR"
This signal is emitted when the Return or Enter key is pressed. Note that if there is a validator() or inputMask() set on the line edit, the returnPressed() signal will only be emitted if the input follows the inputMask() and the validator() returns \fCAcceptable\fR.
.PP
Example: popup/popup.cpp.
.SH "void QLineEdit::selectAll ()\fC [virtual slot]\fR"
Selects all the text (i.e. highlights it) and moves the cursor to the end. This is useful when a default value has been inserted because if the user types before clicking on the widget, the selected text will be deleted.
.PP
See also setSelection() and deselect().
.SH "QString QLineEdit::selectedText () const"
Returns the selected text. See the "selectedText" property for details.
.SH "void QLineEdit::selectionChanged ()\fC [signal]\fR"
This signal is emitted whenever the selection changes.
.PP
See also hasSelectedText and selectedText.
.SH "int QLineEdit::selectionStart () const"
selectionStart() returns the index of the first selected character in the line edit or -1 if no text is selected.
.PP
See also selectedText.
.SH "void QLineEdit::setAlignment ( int flag )\fC [virtual slot]\fR"
Sets the alignment of the line edit to \fIflag\fR. See the "alignment" property for details.
.SH "void QLineEdit::setCursorPosition ( int )\fC [virtual slot]\fR"
Sets the current cursor position for this line edit. See the "cursorPosition" property for details.
.SH "void QLineEdit::setDragEnabled ( bool b )\fC [virtual slot]\fR"
Sets whether the lineedit starts a drag if the user presses and moves the mouse on some selected text to \fIb\fR. See the "dragEnabled" property for details.
.SH "void QLineEdit::setEchoMode ( EchoMode )\fC [virtual slot]\fR"
Sets the line edit's echo mode. See the "echoMode" property for details.
.SH "void QLineEdit::setEdited ( bool )"
Sets whether the line edit has been edited. Use modified instead. See the "edited" property for details.
.SH "void QLineEdit::setFrame ( bool )\fC [virtual slot]\fR"
Sets whether the line edit draws itself with a frame. See the "frame" property for details.
.SH "void QLineEdit::setInputMask ( const QString & inputMask )"
Sets the validation input mask to \fIinputMask\fR. See the "inputMask" property for details.
.SH "void QLineEdit::setMaxLength ( int )\fC [virtual slot]\fR"
Sets the maximum permitted length of the text. See the "maxLength" property for details.
.SH "void QLineEdit::setReadOnly ( bool )\fC [virtual slot]\fR"
Sets whether the line edit is read only. See the "readOnly" property for details.
.SH "void QLineEdit::setSelection ( int start, int length )\fC [virtual slot]\fR"
Selects text from position \fIstart\fR and for \fIlength\fR characters.
.PP
Note that this function sets the cursor's position to the end of the selection regardless of its current position.
.PP
See also deselect(), selectAll(), getSelection(), cursorForward(), and cursorBackward().
.SH "void QLineEdit::setText ( const QString & )\fC [virtual slot]\fR"
Sets the line edit's text. See the "text" property for details.
.SH "void QLineEdit::setValidator ( const QValidator * v )\fC [virtual slot]\fR"
Sets this line edit to only accept input that the validator, \fIv\fR, will accept. This allows you to place any arbitrary constraints on the text which may be entered.
.PP
If \fIv\fR == 0, setValidator() removes the current input validator. The initial setting is to have no input validator (i.e. any input is accepted up to maxLength()).
.PP
See also validator(), QIntValidator, QDoubleValidator, and QRegExpValidator.
.PP
Examples:
.)l lineedits/lineedits.cpp and wizard/wizard.cpp.
.SH "QSize QLineEdit::sizeHint () const\fC [virtual]\fR"
Returns a recommended size for the widget.
.PP
The width returned, in pixels, is usually enough for about 15 to 20 characters.
.PP
Example: addressbook/centralwidget.cpp.
.SH "QString QLineEdit::text () const"
Returns the line edit's text. See the "text" property for details.
.SH "void QLineEdit::textChanged ( const QString & )\fC [signal]\fR"
This signal is emitted whenever the text changes. The argument is the new text.
.PP
Examples:
.)l simple/main.cpp, wizard/wizard.cpp, and xform/xform.cpp.
.SH "void QLineEdit::undo ()\fC [virtual slot]\fR"
Undoes the last operation if undo is available. Deselects any current selection, and updates the selection start to the current cursor position.
.SH "bool QLineEdit::validateAndSet ( const QString & newText, int newPos, int newMarkAnchor, int newMarkDrag )"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code. Use setText(), setCursorPosition() and setSelection() instead.
.SH "const QValidator * QLineEdit::validator () const"
Returns a pointer to the current input validator, or 0 if no validator has been set.
.PP
See also setValidator().
.PP
Example: wizard/wizard.cpp.
.SS "Property Documentation"
.SH "bool acceptableInput"
This property holds whether the input satisfies the inputMask and the validator.
.PP
Get this property's value with hasAcceptableInput().
.PP
See also inputMask and setValidator().
.SH "Alignment alignment"
This property holds the alignment of the line edit.
.PP
Possible Values are Qt::AlignAuto, Qt::AlignLeft, Qt::AlignRight and Qt::AlignHCenter.
.PP
Attempting to set the alignment to an illegal flag combination does nothing.
.PP
See also Qt::AlignmentFlags.
.PP
Set this property's value with setAlignment() and get this property's value with alignment().
.SH "int cursorPosition"
This property holds the current cursor position for this line edit.
.PP
Setting the cursor position causes a repaint when appropriate.
.PP
Set this property's value with setCursorPosition() and get this property's value with cursorPosition().
.SH "QString displayText"
This property holds the displayed text.
.PP
If EchoMode is Normal this returns the same as text(); if EchoMode is Password it returns a string of asterisks text().length() characters long, e.g. "******"; if EchoMode is NoEcho returns an empty string, "".
.PP
See also echoMode, text, and EchoMode.
.PP
Get this property's value with displayText().
.SH "bool dragEnabled"
This property holds whether the lineedit starts a drag if the user presses and moves the mouse on some selected text.
.PP
Set this property's value with setDragEnabled() and get this property's value with dragEnabled().
.SH "EchoMode echoMode"
This property holds the line edit's echo mode.
.PP
The initial setting is Normal, but QLineEdit also supports NoEcho and Password modes.
.PP
The widget's display and the ability to copy or drag the text is affected by this setting.
.PP
See also EchoMode and displayText.
.PP
Set this property's value with setEchoMode() and get this property's value with echoMode().
.SH "bool edited"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
This property holds whether the line edit has been edited. Use modified instead.
.PP
Set this property's value with setEdited() and get this property's value with edited().
.SH "bool frame"
This property holds whether the line edit draws itself with a frame.
.PP
If enabled (the default) the line edit draws itself inside a two-pixel frame, otherwise the line edit draws itself without any frame.
.PP
Set this property's value with setFrame() and get this property's value with frame().
.SH "bool hasMarkedText"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
This property holds whether part of the text has been selected by the user. Use hasSelectedText instead.
.PP
Get this property's value with hasMarkedText().
.SH "bool hasSelectedText"
This property holds whether there is any text selected.
.PP
hasSelectedText() returns TRUE if some or all of the text has been selected by the user; otherwise returns FALSE.
.PP
See also selectedText.
.PP
Get this property's value with hasSelectedText().
.SH "QString inputMask"
This property holds the validation input mask.
.PP
If no mask is set, inputMask() returns QString::null.
.PP
Sets the QLineEdit's validation mask. Validators can be used instead of, or in conjunction with masks; see setValidator().
.PP
Unset the mask and return to normal QLineEdit operation by passing an empty string ("") or just calling setInputMask() with no arguments.
.PP
The mask format understands these mask characters: <center>.nf
.TS
l - l. Character Meaning ASCII alphabetic character required. A-Z, a-z. ASCII alphabetic character permitted but not required. ASCII alphanumeric character required. A-Z, a-z, 0-9. ASCII alphanumeric character permitted but not required. Any character required. x Any character permitted but not required. ASCII digit required. 0-9. ASCII digit permitted but not required. ASCII digit required. 1-9. ASCII digit permitted but not required (1-9). ASCII digit or plus/minus sign permitted but not required. All following alphabetic characters are uppercased. All following alphabetic characters are lowercased. Switch off case conversion. Use
.TE
.fi
</center>
.PP
The mask consists of a string of mask characters and separators, optionally followed by a semi-colon and the character used for blanks: the blank characters are always removed from the text after editing. The default blank character is space.
.PP
Examples:
.)l
<center>.nf
.TS
l - l. Mask Notes IP address; blanks are ISO Date; blanks are License number; blanks are
.TE
.fi
</center>
.PP
To get range control (e.g. for an IP address) use masks together with validators.
.PP
See also maxLength.
.PP
Set this property's value with setInputMask() and get this property's value with inputMask().
.SH "QString markedText"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
This property holds the text selected by the user. Use selectedText instead.
.PP
Get this property's value with markedText().
.SH "int maxLength"
This property holds the maximum permitted length of the text.
.PP
If the text is too long, it is truncated at the limit.
.PP
If truncation occurs any selected text will be unselected, the cursor position is set to 0 and the first part of the string is shown.
.PP
If the line edit has an input mask, the mask defines the maximum string length.
.PP
See also inputMask.
.PP
Set this property's value with setMaxLength() and get this property's value with maxLength().
.SH "bool modified"
This property holds whether the line edit's contents has been modified by the user.
.PP
The modified flag is never read by QLineEdit; it has a default value of FALSE and is changed to TRUE whenever the user changes the line edit's contents.
.PP
This is useful for things that need to provide a default value but do not start out knowing what the default should be (perhaps it depends on other fields on the form). Start the line edit without the best default, and when the default is known, if modified() returns FALSE (the user hasn't entered any text), insert the default value.
.PP
Calling clearModified() or setText() resets the modified flag to FALSE.
.PP
Get this property's value with isModified().
.SH "bool readOnly"
This property holds whether the line edit is read only.
.PP
In read-only mode, the user can still copy the text to the clipboard or drag-and-drop the text (if echoMode() is Normal), but cannot edit it.
.PP
QLineEdit does not show a cursor in read-only mode.
.PP
See also enabled.
.PP
Set this property's value with setReadOnly() and get this property's value with isReadOnly().
.SH "bool redoAvailable"
This property holds whether redo is available.
.PP
Get this property's value with isRedoAvailable().
.SH "QString selectedText"
This property holds the selected text.
.PP
If there is no selected text this property's value is QString::null.
.PP
See also hasSelectedText.
.PP
Get this property's value with selectedText().
.SH "QString text"
This property holds the line edit's text.
.PP
Note that setting this property clears the selection, clears the undo/redo history, moves the cursor to the end of the line and resets the modified property to FALSE. The text is not validated when inserted with setText().
.PP
The text is truncated to maxLength() length.
.PP
See also insert().
.PP
Set this property's value with setText() and get this property's value with text().
.SH "bool undoAvailable"
This property holds whether undo is available.
.PP
Get this property's value with isUndoAvailable().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qlineedit.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qlineedit.3qt) and the Qt
version (3.3.8).
