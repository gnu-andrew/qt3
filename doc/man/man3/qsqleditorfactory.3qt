'\" t
.TH QSqlEditorFactory 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QSqlEditorFactory \- Used to create the editors used by QDataTable and QSqlForm
.SH SYNOPSIS
\fC#include <qsqleditorfactory.h>\fR
.PP
Inherits QEditorFactory.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQSqlEditorFactory\fR ( QObject * parent = 0, const char * name = 0 )"
.br
.ti -1c
.BI "\fB~QSqlEditorFactory\fR ()"
.br
.ti -1c
.BI "virtual QWidget * \fBcreateEditor\fR ( QWidget * parent, const QVariant & variant )"
.br
.ti -1c
.BI "virtual QWidget * \fBcreateEditor\fR ( QWidget * parent, const QSqlField * field )"
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "QSqlEditorFactory * \fBdefaultFactory\fR ()"
.br
.ti -1c
.BI "void \fBinstallDefaultFactory\fR ( QSqlEditorFactory * factory )"
.br
.in -1c
.SH DESCRIPTION
The QSqlEditorFactory class is used to create the editors used by QDataTable and QSqlForm.
.PP
QSqlEditorFactory is used by QDataTable and QSqlForm to automatically create appropriate editors for a given QSqlField. For example if the field is a QVariant::String a QLineEdit would be the default editor, whereas a QVariant::Int's default editor would be a QSpinBox.
.PP
If you want to create different editors for fields with the same data type, subclass QSqlEditorFactory and reimplement the createEditor() function.
.PP
See also QDataTable, QSqlForm, and Database Classes.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QSqlEditorFactory::QSqlEditorFactory ( QObject * parent = 0, const char * name = 0 )"
Constructs a SQL editor factory with parent \fIparent\fR, called \fIname\fR.
.SH "QSqlEditorFactory::~QSqlEditorFactory ()"
Destroys the object and frees any allocated resources.
.SH "QWidget * QSqlEditorFactory::createEditor ( QWidget * parent, const QVariant & variant )\fC [virtual]\fR"
Creates and returns the appropriate editor widget for the QVariant \fIvariant\fR.
.PP
The widget that is returned has the parent \fIparent\fR (which may be zero). If \fIvariant\fR is invalid, 0 is returned.
.PP
Reimplemented from QEditorFactory.
.SH "QWidget * QSqlEditorFactory::createEditor ( QWidget * parent, const QSqlField * field )\fC [virtual]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Creates and returns the appropriate editor for the QSqlField \fIfield\fR.
.SH "QSqlEditorFactory * QSqlEditorFactory::defaultFactory ()\fC [static]\fR"
Returns an instance of a default editor factory.
.SH "void QSqlEditorFactory::installDefaultFactory ( QSqlEditorFactory * factory )\fC [static]\fR"
Replaces the default editor factory with \fIfactory\fR. All
QDataTable and QSqlForm instantiations will use this new factory
for creating field editors. \fIQSqlEditorFactory takes ownership of &#92;a factory, and destroys it when it is no longer needed.\fR

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qsqleditorfactory.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qsqleditorfactory.3qt) and the Qt
version (3.3.8).
