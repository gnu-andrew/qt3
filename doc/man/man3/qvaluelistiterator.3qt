'\" t
.TH QValueListIterator 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QValueListIterator \- Iterator for QValueList
.SH SYNOPSIS
All the functions in this class are reentrant when Qt is built with thread support.</p>
.PP
\fC#include <qvaluelist.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "typedef T \fBvalue_type\fR"
.br
.ti -1c
.BI "typedef T * \fBpointer\fR"
.br
.ti -1c
.BI "typedef T & \fBreference\fR"
.br
.ti -1c
.BI "\fBQValueListIterator\fR ()"
.br
.ti -1c
.BI "\fBQValueListIterator\fR ( const QValueListIterator<T> & it )"
.br
.ti -1c
.BI "bool \fBoperator==\fR ( const QValueListIterator<T> & it ) const"
.br
.ti -1c
.BI "bool \fBoperator!=\fR ( const QValueListIterator<T> & it ) const"
.br
.ti -1c
.BI "const T & \fBoperator*\fR () const"
.br
.ti -1c
.BI "T & \fBoperator*\fR ()"
.br
.ti -1c
.BI "QValueListIterator<T> & \fBoperator++\fR ()"
.br
.ti -1c
.BI "QValueListIterator<T> \fBoperator++\fR ( int )"
.br
.ti -1c
.BI "QValueListIterator<T> & \fBoperator--\fR ()"
.br
.ti -1c
.BI "QValueListIterator<T> \fBoperator--\fR ( int )"
.br
.ti -1c
.BI "QValueListIterator<T> & \fBoperator+=\fR ( int j )"
.br
.ti -1c
.BI "QValueListIterator<T> & \fBoperator-=\fR ( int j )"
.br
.in -1c
.SH DESCRIPTION
The QValueListIterator class provides an iterator for QValueList.
.PP
An iterator is a class for accessing the items of a container class: a generalization of the index in an array. A pointer into a "const char *" and an index into an "int[]" are both iterators, and the general idea is to provide that functionality for any data structure.
.PP
The QValueListIterator class is an iterator for QValueList instantiations. You can create the appropriate iterator type by using the \fCiterator\fR typedef provided by QValueList.
.PP
The only way to access the items in a QValueList is to use an iterator.
.PP
Example (see QValueList for the complete code):
.PP
.nf
.br
    EmployeeList::iterator it;
.br
    for ( it = list.begin(); it != list.end(); ++it )
.br
        cout << (*it).surname().latin1() << ", " <<
.br
                (*it).forename().latin1() << " earns " <<
.br
                (*it).salary() << endl;
.br
.br
    // Output:
.br
    // Doe, John earns 50000
.br
    // Williams, Jane earns 80000
.br
    // Hawthorne, Mary earns 90000
.br
    // Jones, Tom earns 60000
.br
.fi
.PP
QValueList is highly optimized for performance and memory usage. This means that you must be careful: QValueList does not know about all its iterators and the iterators don't know to which list they belong. This makes things very fast, but if you're not careful, you can get spectacular bugs. Always make sure iterators are valid before dereferencing them or using them as parameters to generic algorithms in the STL or the QTL.
.PP
Using an invalid iterator is undefined (your application will probably crash). Many Qt functions return const value lists; to iterate over these you should make a copy and iterate over the copy.
.PP
For every Iterator there is a ConstIterator. When accessing a QValueList in a const environment or if the reference or pointer to the list is itself const, then you must use the ConstIterator. Its semantics are the same as the Iterator, but it only returns const references.
.PP
See also QValueList, QValueListConstIterator, Qt Template Library Classes, and Non-GUI Classes.
.SS "Member Type Documentation"
.SH "QValueListIterator::pointer"
Pointer to value_type.
.SH "QValueListIterator::reference"
Reference to value_type.
.SH "QValueListIterator::value_type"
The type of value, T.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QValueListIterator::QValueListIterator ()"
Creates un uninitialized iterator.
.SH "QValueListIterator::QValueListIterator ( const QValueListIterator<T> & it )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Constructs a copy of the iterator \fIit\fR.
.SH "bool QValueListIterator::operator!= ( const QValueListIterator<T> & it ) const"
Compares this iterator and \fIit\fR and returns TRUE if they point to different items; otherwise returns FALSE.
.SH "T & QValueListIterator::operator* ()"
Asterisk operator. Returns a reference to the current iterator item.
.SH "const T & QValueListIterator::operator* () const"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Asterisk operator. Returns a reference to the current iterator item.
.SH "QValueListIterator<T> & QValueListIterator::operator++ ()"
Prefix ++ makes the succeeding item current and returns an iterator pointing to the new current item. The iterator cannot check whether it reached the end of the list. Incrementing the iterator returned by end() causes undefined results.
.SH "QValueListIterator<T> QValueListIterator::operator++ ( int )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Postfix ++ makes the succeeding item current and returns an iterator pointing to the new current item. The iterator cannot check whether it reached the end of the list. Incrementing the iterator returned by end() causes undefined results.
.SH "QValueListIterator<T> & QValueListIterator::operator+= ( int j )"
Postfix -- jumps \fIj\fR steps forward in the list. The iterator cannot check whether it reached the end of the list. Jumping past the end() causes undefined results.
.SH "QValueListIterator<T> & QValueListIterator::operator-- ()"
Prefix -- makes the previous item current and returns an iterator pointing to the new current item. The iterator cannot check whether it reached the beginning of the list. Decrementing the iterator returned by begin() causes undefined results.
.SH "QValueListIterator<T> QValueListIterator::operator-- ( int )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Postfix -- makes the previous item current and returns an iterator pointing to the new current item. The iterator cannot check whether it reached the beginning of the list. Decrementing the iterator returned by begin() causes undefined results.
.SH "QValueListIterator<T> & QValueListIterator::operator-= ( int j )"
Postfix -- jumps \fIj\fR steps backward in the list. The iterator cannot check whether it reached the beginning of the list. Jumping past begin() causes undefined results.
.SH "bool QValueListIterator::operator== ( const QValueListIterator<T> & it ) const"
Compares this iterator and \fIit\fR and returns TRUE if they point to
the same item; otherwise returns FALSE.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qvaluelistiterator.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qvaluelistiterator.3qt) and the Qt
version (3.3.8).
