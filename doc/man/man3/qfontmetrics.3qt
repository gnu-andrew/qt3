'\" t
.TH QFontMetrics 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QFontMetrics \- Font metrics information
.SH SYNOPSIS
\fC#include <qfontmetrics.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQFontMetrics\fR ( const QFont & font )"
.br
.ti -1c
.BI "\fBQFontMetrics\fR ( const QFont & font, QFont::Script script )"
.br
.ti -1c
.BI "\fBQFontMetrics\fR ( const QFontMetrics & fm )"
.br
.ti -1c
.BI "\fB~QFontMetrics\fR ()"
.br
.ti -1c
.BI "QFontMetrics & \fBoperator=\fR ( const QFontMetrics & fm )"
.br
.ti -1c
.BI "int \fBascent\fR () const"
.br
.ti -1c
.BI "int \fBdescent\fR () const"
.br
.ti -1c
.BI "int \fBheight\fR () const"
.br
.ti -1c
.BI "int \fBleading\fR () const"
.br
.ti -1c
.BI "int \fBlineSpacing\fR () const"
.br
.ti -1c
.BI "int \fBminLeftBearing\fR () const"
.br
.ti -1c
.BI "int \fBminRightBearing\fR () const"
.br
.ti -1c
.BI "int \fBmaxWidth\fR () const"
.br
.ti -1c
.BI "bool \fBinFont\fR ( QChar ch ) const"
.br
.ti -1c
.BI "int \fBleftBearing\fR ( QChar ch ) const"
.br
.ti -1c
.BI "int \fBrightBearing\fR ( QChar ch ) const"
.br
.ti -1c
.BI "int \fBwidth\fR ( const QString & str, int len = -1 ) const"
.br
.ti -1c
.BI "int \fBwidth\fR ( QChar ch ) const"
.br
.ti -1c
.BI "int width ( char c ) const  \fI(obsolete)\fR"
.br
.ti -1c
.BI "int \fBcharWidth\fR ( const QString & str, int pos ) const"
.br
.ti -1c
.BI "QRect \fBboundingRect\fR ( const QString & str, int len = -1 ) const"
.br
.ti -1c
.BI "QRect \fBboundingRect\fR ( QChar ch ) const"
.br
.ti -1c
.BI "QRect \fBboundingRect\fR ( int x, int y, int w, int h, int flgs, const QString & str, int len = -1, int tabstops = 0, int * tabarray = 0, QTextParag ** intern = 0 ) const"
.br
.ti -1c
.BI "QSize \fBsize\fR ( int flgs, const QString & str, int len = -1, int tabstops = 0, int * tabarray = 0, QTextParag ** intern = 0 ) const"
.br
.ti -1c
.BI "int \fBunderlinePos\fR () const"
.br
.ti -1c
.BI "int \fBoverlinePos\fR () const"
.br
.ti -1c
.BI "int \fBstrikeOutPos\fR () const"
.br
.ti -1c
.BI "int \fBlineWidth\fR () const"
.br
.in -1c
.SH DESCRIPTION
The QFontMetrics class provides font metrics information.
.PP
QFontMetrics functions calculate the size of characters and strings for a given font. There are three ways you can create a QFontMetrics object:
.PP
<ol type=1>
.IP 1
Calling the QFontMetrics constructor with a QFont creates a font metrics object for a screen-compatible font, i.e. the font cannot be a printer font<sup>*</sup>. If the font is changed later, the font metrics object is \fInot\fR updated.
.IP 2
QWidget::fontMetrics() returns the font metrics for a widget's font. This is equivalent to QFontMetrics(widget->font()). If the widget's font is changed later, the font metrics object is \fInot\fR updated.
.IP 3
QPainter::fontMetrics() returns the font metrics for a painter's current font. If the painter's font is changed later, the font metrics object is \fInot\fR updated.
.PP
<sup>*</sup> If you use a printer font the values returned may be inaccurate. Printer fonts are not always accessible so the nearest screen font is used if a printer font is supplied.
.PP
Once created, the object provides functions to access the individual metrics of the font, its characters, and for strings rendered in the font.
.PP
There are several functions that operate on the font: ascent(), descent(), height(), leading() and lineSpacing() return the basic size properties of the font. The underlinePos(), overlinePos(), strikeOutPos() and lineWidth() functions, return the properties of the line that underlines, overlines or strikes out the characters. These functions are all fast.
.PP
There are also some functions that operate on the set of glyphs in the font: minLeftBearing(), minRightBearing() and maxWidth(). These are by necessity slow, and we recommend avoiding them if possible.
.PP
For each character, you can get its width(), leftBearing() and rightBearing() and find out whether it is in the font using inFont(). You can also treat the character as a string, and use the string functions on it.
.PP
The string functions include width(), to return the width of a string in pixels (or points, for a printer), boundingRect(), to return a rectangle large enough to contain the rendered string, and size(), to return the size of that rectangle.
.PP
Example:
.PP
.nf
.br
    QFont font( "times", 24 );
.br
    QFontMetrics fm( font );
.br
    int pixelsWide = fm.width( "What's the width of this text?" );
.br
    int pixelsHigh = fm.height();
.br
.fi
.PP
See also QFont, QFontInfo, QFontDatabase, Graphics Classes, and Implicitly and Explicitly Shared Classes.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QFontMetrics::QFontMetrics ( const QFont & font )"
Constructs a font metrics object for \fIfont\fR.
.PP
The font must be screen-compatible, i.e. a font you use when drawing text in widgets or pixmaps, not QPicture or QPrinter.
.PP
The font metrics object holds the information for the font that is passed in the constructor at the time it is created, and is not updated if the font's attributes are changed later.
.PP
Use QPainter::fontMetrics() to get the font metrics when painting. This will give correct results also when painting on paint device that is not screen-compatible.
.SH "QFontMetrics::QFontMetrics ( const QFont & font, QFont::Script script )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Constructs a font metrics object for \fIfont\fR using the given \fIscript\fR.
.SH "QFontMetrics::QFontMetrics ( const QFontMetrics & fm )"
Constructs a copy of \fIfm\fR.
.SH "QFontMetrics::~QFontMetrics ()"
Destroys the font metrics object and frees all allocated resources.
.SH "int QFontMetrics::ascent () const"
Returns the ascent of the font.
.PP
The ascent of a font is the distance from the baseline to the highest position characters extend to. In practice, some font designers break this rule, e.g. when they put more than one accent on top of a character, or to accommodate an unusual character in an exotic language, so it is possible (though rare) that this value will be too small.
.PP
See also descent().
.PP
Examples:
.)l drawdemo/drawdemo.cpp and scrollview/scrollview.cpp.
.SH "QRect QFontMetrics::boundingRect ( QChar ch ) const"
Returns the rectangle that is covered by ink if the character specified by \fIch\fR were to be drawn at the origin of the coordinate system.
.PP
Note that the bounding rectangle may extend to the left of (0, 0), e.g. for italicized fonts, and that the text output may cover \fIall\fR pixels in the bounding rectangle. For a space character the rectangle will usually be empty.
.PP
Note that the rectangle usually extends both above and below the base line.
.PP
\fBWarning:\fR The width of the returned rectangle is not the advance width of the character. Use boundingRect(const QString &) or width() instead.
.PP
See also width().
.PP
Example: xform/xform.cpp.
.SH "QRect QFontMetrics::boundingRect ( const QString & str, int len = -1 ) const"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Returns the bounding rectangle that contains the first \fIlen\fR characters of string \fIstr\fR.
.SH "QRect QFontMetrics::boundingRect ( int x, int y, int w, int h, int flgs, const QString & str, int len = -1, int tabstops = 0, int * tabarray = 0, QTextParag ** intern = 0 ) const"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Returns the bounding rectangle of the first \fIlen\fR characters of \fIstr\fR, which is the set of pixels the text would cover if drawn at (0, 0). The drawing, and hence the bounding rectangle, is constrained to the rectangle (\fIx\fR, \fIy\fR, \fIw\fR, \fIh\fR).
.PP
If \fIlen\fR is negative (which is the default), the entire string is used.
.PP
The \fIflgs\fR argument is the bitwise OR of the following flags:
.TP
\fCAlignAuto\fR aligns to the left border for all languages except Arabic and Hebrew where it aligns to the right.
.TP
\fCAlignLeft\fR aligns to the left border.
.TP
\fCAlignRight\fR aligns to the right border.
.TP
\fCAlignJustify\fR produces justified text.
.TP
\fCAlignHCenter\fR aligns horizontally centered.
.TP
\fCAlignTop\fR aligns to the top border.
.TP
\fCAlignBottom\fR aligns to the bottom border.
.TP
\fCAlignVCenter\fR aligns vertically centered
.TP
\fCAlignCenter\fR (== \fCAlignHCenter | AlignVCenter\fR)
.TP
\fCSingleLine\fR ignores newline characters in the text.
.TP
\fCExpandTabs\fR expands tabs (see below)
.TP
\fCShowPrefix\fR interprets "&x" as "<u>x</u>", i.e. underlined.
.TP
\fCWordBreak\fR breaks the text to fit the rectangle.
.PP
Horizontal alignment defaults to \fCAlignAuto\fR and vertical alignment defaults to \fCAlignTop\fR.
.PP
If several of the horizontal or several of the vertical alignment flags are set, the resulting alignment is undefined.
.PP
These flags are defined in qnamespace.h.
.PP
If \fCExpandTabs\fR is set in \fIflgs\fR, then: if \fItabarray\fR is non-null, it specifies a 0-terminated sequence of pixel-positions for tabs; otherwise if \fItabstops\fR is non-zero, it is used as the tab spacing (in pixels).
.PP
Note that the bounding rectangle may extend to the left of (0, 0), e.g. for italicized fonts, and that the text output may cover \fIall\fR pixels in the bounding rectangle.
.PP
Newline characters are processed as linebreaks.
.PP
Despite the different actual character heights, the heights of the bounding rectangles of "Yes" and "yes" are the same.
.PP
The bounding rectangle given by this function is somewhat larger than that calculated by the simpler boundingRect() function. This function uses the maximum left and right font bearings as is necessary for multi-line text to align correctly. Also, fontHeight() and lineSpacing() are used to calculate the height, rather than individual character heights.
.PP
The \fIintern\fR argument should not be used.
.PP
See also width(), QPainter::boundingRect(), and Qt::AlignmentFlags.
.SH "int QFontMetrics::charWidth ( const QString & str, int pos ) const"
Returns the width of the character at position \fIpos\fR in the string \fIstr\fR.
.PP
The whole string is needed, as the glyph drawn may change depending on the context (the letter before and after the current one) for some languages (e.g. Arabic).
.PP
This function also takes non spacing marks and ligatures into account.
.SH "int QFontMetrics::descent () const"
Returns the descent of the font.
.PP
The descent is the distance from the base line to the lowest point characters extend to. (Note that this is different from X, which adds 1 pixel.) In practice, some font designers break this rule, e.g. to accommodate an unusual character in an exotic language, so it is possible (though rare) that this value will be too small.
.PP
See also ascent().
.PP
Examples:
.)l drawdemo/drawdemo.cpp and hello/hello.cpp.
.SH "int QFontMetrics::height () const"
Returns the height of the font.
.PP
This is always equal to ascent()+descent()+1 (the 1 is for the base line).
.PP
See also leading() and lineSpacing().
.PP
Examples:
.)l grapher/grapher.cpp, hello/hello.cpp, and qfd/fontdisplayer.cpp.
.SH "bool QFontMetrics::inFont ( QChar ch ) const"
Returns TRUE if character \fIch\fR is a valid character in the font; otherwise returns FALSE.
.PP
Example: qfd/fontdisplayer.cpp.
.SH "int QFontMetrics::leading () const"
Returns the leading of the font.
.PP
This is the natural inter-line spacing.
.PP
See also height() and lineSpacing().
.SH "int QFontMetrics::leftBearing ( QChar ch ) const"
Returns the left bearing of character \fIch\fR in the font.
.PP
The left bearing is the right-ward distance of the left-most pixel of the character from the logical origin of the character. This value is negative if the pixels of the character extend to the left of the logical origin.
.PP
See width(QChar) for a graphical description of this metric.
.PP
See also rightBearing(), minLeftBearing(), and width().
.PP
Example: qfd/fontdisplayer.cpp.
.SH "int QFontMetrics::lineSpacing () const"
Returns the distance from one base line to the next.
.PP
This value is always equal to leading()+height().
.PP
See also height() and leading().
.PP
Examples:
.)l qfd/fontdisplayer.cpp, qwerty/qwerty.cpp, and scrollview/scrollview.cpp.
.SH "int QFontMetrics::lineWidth () const"
Returns the width of the underline and strikeout lines, adjusted for the point size of the font.
.PP
See also underlinePos(), overlinePos(), and strikeOutPos().
.SH "int QFontMetrics::maxWidth () const"
Returns the width of the widest character in the font.
.PP
Example: qfd/fontdisplayer.cpp.
.SH "int QFontMetrics::minLeftBearing () const"
Returns the minimum left bearing of the font.
.PP
This is the smallest leftBearing(char) of all characters in the font.
.PP
Note that this function can be very slow if the font is large.
.PP
See also minRightBearing() and leftBearing().
.PP
Example: qfd/fontdisplayer.cpp.
.SH "int QFontMetrics::minRightBearing () const"
Returns the minimum right bearing of the font.
.PP
This is the smallest rightBearing(char) of all characters in the font.
.PP
Note that this function can be very slow if the font is large.
.PP
See also minLeftBearing() and rightBearing().
.PP
Example: qfd/fontdisplayer.cpp.
.SH "QFontMetrics & QFontMetrics::operator= ( const QFontMetrics & fm )"
Assigns the font metrics \fIfm\fR.
.SH "int QFontMetrics::overlinePos () const"
Returns the distance from the base line to where an overline should be drawn.
.PP
See also underlinePos(), strikeOutPos(), and lineWidth().
.SH "int QFontMetrics::rightBearing ( QChar ch ) const"
Returns the right bearing of character \fIch\fR in the font.
.PP
The right bearing is the left-ward distance of the right-most pixel of the character from the logical origin of a subsequent character. This value is negative if the pixels of the character extend to the right of the width() of the character.
.PP
See width() for a graphical description of this metric.
.PP
See also leftBearing(), minRightBearing(), and width().
.PP
Example: qfd/fontdisplayer.cpp.
.SH "QSize QFontMetrics::size ( int flgs, const QString & str, int len = -1, int tabstops = 0, int * tabarray = 0, QTextParag ** intern = 0 ) const"
Returns the size in pixels of the first \fIlen\fR characters of \fIstr\fR.
.PP
If \fIlen\fR is negative (the default), the entire string is used.
.PP
The \fIflgs\fR argument is the bitwise OR of the following flags:
.TP
\fCSingleLine\fR ignores newline characters.
.TP
\fCExpandTabs\fR expands tabs (see below)
.TP
\fCShowPrefix\fR interprets "&x" as "<u>x</u>", i.e. underlined.
.TP
\fCWordBreak\fR breaks the text to fit the rectangle.
.PP
These flags are defined in qnamespace.h.
.PP
If \fCExpandTabs\fR is set in \fIflgs\fR, then: if \fItabarray\fR is non-null, it specifies a 0-terminated sequence of pixel-positions for tabs; otherwise if \fItabstops\fR is non-zero, it is used as the tab spacing (in pixels).
.PP
Newline characters are processed as linebreaks.
.PP
Despite the different actual character heights, the heights of the bounding rectangles of "Yes" and "yes" are the same.
.PP
The \fIintern\fR argument should not be used.
.PP
See also boundingRect().
.SH "int QFontMetrics::strikeOutPos () const"
Returns the distance from the base line to where the strikeout line should be drawn.
.PP
See also underlinePos(), overlinePos(), and lineWidth().
.SH "int QFontMetrics::underlinePos () const"
Returns the distance from the base line to where an underscore should be drawn.
.PP
See also overlinePos(), strikeOutPos(), and lineWidth().
.SH "int QFontMetrics::width ( QChar ch ) const"
.ce 1
.B "[Image Omitted]"
.PP
Returns the logical width of character \fIch\fR in pixels. This is a distance appropriate for drawing a subsequent character after \fIch\fR.
.PP
Some of the metrics are described in the image to the right. The central dark rectangles cover the logical width() of each character. The outer pale rectangles cover the leftBearing() and rightBearing() of each character. Notice that the bearings of "f" in this particular font are both negative, while the bearings of" o" are both positive.
.PP
\fBWarning:\fR This function will produce incorrect results for Arabic characters or non spacing marks in the middle of a string, as the glyph shaping and positioning of marks that happens when processing strings cannot be taken into account. Use charWidth() instead if you aren't looking for the width of isolated characters.
.PP
See also boundingRect() and charWidth().
.PP
Examples:
.)l drawdemo/drawdemo.cpp, hello/hello.cpp, movies/main.cpp, qfd/fontdisplayer.cpp, and scrollview/scrollview.cpp.
.SH "int QFontMetrics::width ( const QString & str, int len = -1 ) const"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Returns the width of the first \fIlen\fR characters of string \fIstr\fR.
.SH "int QFontMetrics::width ( char c ) const"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
Provided to aid porting from Qt 1.x.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qfontmetrics.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qfontmetrics.3qt) and the Qt
version (3.3.8).
