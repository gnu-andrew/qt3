'\" t
.TH QFont 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QFont \- Font used for drawing text
.SH SYNOPSIS
\fC#include <qfont.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "enum \fBStyleHint\fR { Helvetica, SansSerif = Helvetica, Times, Serif = Times, Courier, TypeWriter = Courier, OldEnglish, Decorative = OldEnglish, System, AnyStyle }"
.br
.ti -1c
.BI "enum \fBStyleStrategy\fR { PreferDefault = 0x0001, PreferBitmap = 0x0002, PreferDevice = 0x0004, PreferOutline = 0x0008, ForceOutline = 0x0010, PreferMatch = 0x0020, PreferQuality = 0x0040, PreferAntialias = 0x0080, NoAntialias = 0x0100, OpenGLCompatible = 0x0200 }"
.br
.ti -1c
.BI "enum \fBWeight\fR { Light = 25, Normal = 50, DemiBold = 63, Bold = 75, Black = 87 }"
.br
.ti -1c
.BI "enum \fBStretch\fR { UltraCondensed = 50, ExtraCondensed = 62, Condensed = 75, SemiCondensed = 87, Unstretched = 100, SemiExpanded = 112, Expanded = 125, ExtraExpanded = 150, UltraExpanded = 200 }"
.br
.ti -1c
.BI "\fBQFont\fR ()"
.br
.ti -1c
.BI "\fBQFont\fR ( const QString & family, int pointSize = 12, int weight = Normal, bool italic = FALSE )"
.br
.ti -1c
.BI "\fBQFont\fR ( const QFont & font )"
.br
.ti -1c
.BI "\fB~QFont\fR ()"
.br
.ti -1c
.BI "QString \fBfamily\fR () const"
.br
.ti -1c
.BI "void \fBsetFamily\fR ( const QString & family )"
.br
.ti -1c
.BI "int \fBpointSize\fR () const"
.br
.ti -1c
.BI "float \fBpointSizeFloat\fR () const"
.br
.ti -1c
.BI "void \fBsetPointSize\fR ( int pointSize )"
.br
.ti -1c
.BI "void \fBsetPointSizeFloat\fR ( float pointSize )"
.br
.ti -1c
.BI "int \fBpixelSize\fR () const"
.br
.ti -1c
.BI "void \fBsetPixelSize\fR ( int pixelSize )"
.br
.ti -1c
.BI "void setPixelSizeFloat ( float pixelSize )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "int \fBweight\fR () const"
.br
.ti -1c
.BI "void \fBsetWeight\fR ( int weight )"
.br
.ti -1c
.BI "bool \fBbold\fR () const"
.br
.ti -1c
.BI "void \fBsetBold\fR ( bool enable )"
.br
.ti -1c
.BI "bool \fBitalic\fR () const"
.br
.ti -1c
.BI "void \fBsetItalic\fR ( bool enable )"
.br
.ti -1c
.BI "bool \fBunderline\fR () const"
.br
.ti -1c
.BI "void \fBsetUnderline\fR ( bool enable )"
.br
.ti -1c
.BI "bool \fBoverline\fR () const"
.br
.ti -1c
.BI "void \fBsetOverline\fR ( bool enable )"
.br
.ti -1c
.BI "bool \fBstrikeOut\fR () const"
.br
.ti -1c
.BI "void \fBsetStrikeOut\fR ( bool enable )"
.br
.ti -1c
.BI "bool \fBfixedPitch\fR () const"
.br
.ti -1c
.BI "void \fBsetFixedPitch\fR ( bool enable )"
.br
.ti -1c
.BI "StyleHint \fBstyleHint\fR () const"
.br
.ti -1c
.BI "StyleStrategy \fBstyleStrategy\fR () const"
.br
.ti -1c
.BI "void \fBsetStyleHint\fR ( StyleHint hint, StyleStrategy strategy = PreferDefault )"
.br
.ti -1c
.BI "void \fBsetStyleStrategy\fR ( StyleStrategy s )"
.br
.ti -1c
.BI "int \fBstretch\fR () const"
.br
.ti -1c
.BI "void \fBsetStretch\fR ( int factor )"
.br
.ti -1c
.BI "bool \fBrawMode\fR () const"
.br
.ti -1c
.BI "void \fBsetRawMode\fR ( bool enable )"
.br
.ti -1c
.BI "bool \fBexactMatch\fR () const"
.br
.ti -1c
.BI "QFont & \fBoperator=\fR ( const QFont & font )"
.br
.ti -1c
.BI "bool \fBoperator==\fR ( const QFont & f ) const"
.br
.ti -1c
.BI "bool \fBoperator!=\fR ( const QFont & f ) const"
.br
.ti -1c
.BI "bool \fBisCopyOf\fR ( const QFont & f ) const"
.br
.ti -1c
.BI "HFONT \fBhandle\fR () const"
.br
.ti -1c
.BI "void \fBsetRawName\fR ( const QString & name )"
.br
.ti -1c
.BI "QString \fBrawName\fR () const"
.br
.ti -1c
.BI "QString \fBkey\fR () const"
.br
.ti -1c
.BI "QString \fBtoString\fR () const"
.br
.ti -1c
.BI "bool \fBfromString\fR ( const QString & descrip )"
.br
.ti -1c
.BI "void \fBqwsRenderToDisk\fR ( bool all = TRUE )"
.br
.ti -1c
.BI "enum \fBScript\fR { Latin, Greek, Cyrillic, Armenian, Georgian, Runic, Ogham, SpacingModifiers, CombiningMarks, Hebrew, Arabic, Syriac, Thaana, Devanagari, Bengali, Gurmukhi, Gujarati, Oriya, Tamil, Telugu, Kannada, Malayalam, Sinhala, Thai, Lao, Tibetan, Myanmar, Khmer, Han, Hiragana, Katakana, Hangul, Bopomofo, Yi, Ethiopic, Cherokee, CanadianAboriginal, Mongolian, CurrencySymbols, LetterlikeSymbols, NumberForms, MathematicalOperators, TechnicalSymbols, GeometricSymbols, MiscellaneousSymbols, EnclosedAndSquare, Braille, Unicode, Tagalog, Hanunoo, Buhid, Tagbanwa, KatakanaHalfWidth, Limbu, TaiLe }"
.br
.ti -1c
.BI "QString \fBdefaultFamily\fR () const"
.br
.ti -1c
.BI "QString \fBlastResortFamily\fR () const"
.br
.ti -1c
.BI "QString \fBlastResortFont\fR () const"
.br
.ti -1c
.BI "QFont \fBresolve\fR ( const QFont & other ) const"
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "QString \fBsubstitute\fR ( const QString & familyName )"
.br
.ti -1c
.BI "QStringList \fBsubstitutes\fR ( const QString & familyName )"
.br
.ti -1c
.BI "QStringList \fBsubstitutions\fR ()"
.br
.ti -1c
.BI "void \fBinsertSubstitution\fR ( const QString & familyName, const QString & substituteName )"
.br
.ti -1c
.BI "void \fBinsertSubstitutions\fR ( const QString & familyName, const QStringList & substituteNames )"
.br
.ti -1c
.BI "void \fBremoveSubstitution\fR ( const QString & familyName )"
.br
.ti -1c
.BI "QFont defaultFont ()  \fI(obsolete)\fR"
.br
.ti -1c
.BI "void setDefaultFont ( const QFont & f )  \fI(obsolete)\fR"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "bool \fBdirty\fR () const"
.br
.ti -1c
.BI "int \fBdeciPointSize\fR () const"
.br
.in -1c
.SH RELATED FUNCTION DOCUMENTATION
.in +1c
.ti -1c
.BI "QDataStream & \fBoperator<<\fR ( QDataStream & s, const QFont & font )"
.br
.ti -1c
.BI "QDataStream & \fBoperator>>\fR ( QDataStream & s, QFont & font )"
.br
.in -1c
.SH DESCRIPTION
The QFont class specifies a font used for drawing text.
.PP
When you create a QFont object you specify various attributes that you want the font to have. Qt will use the font with the specified attributes, or if no matching font exists, Qt will use the closest matching installed font. The attributes of the font that is actually used are retrievable from a QFontInfo object. If the window system provides an exact match exactMatch() returns TRUE. Use QFontMetrics to get measurements, e.g. the pixel length of a string using QFontMetrics::width().
.PP
Use QApplication::setFont() to set the application's default font.
.PP
If a choosen X11 font does not include all the characters that need to be displayed, QFont will try to find the characters in the nearest equivalent fonts. When a QPainter draws a character from a font the QFont will report whether or not it has the character; if it does not, QPainter will draw an unfilled square.
.PP
Create QFonts like this:
.PP
.nf
.br
    QFont serifFont( "Times", 10, Bold );
.br
    QFont sansFont( "Helvetica [Cronyx]", 12 );
.br
.fi
.PP
The attributes set in the constructor can also be set later, e.g. setFamily(), setPointSize(), setPointSizeFloat(), setWeight() and setItalic(). The remaining attributes must be set after contstruction, e.g. setBold(), setUnderline(), setOverline(), setStrikeOut() and setFixedPitch(). QFontInfo objects should be created \fIafter\fR the font's attributes have been set. A QFontInfo object will not change, even if you change the font's attributes. The corresponding "get" functions, e.g. family(), pointSize(), etc., return the values that were set, even though the values used may differ. The actual values are available from a QFontInfo object.
.PP
If the requested font family is unavailable you can influence the font matching algorithm by choosing a particular QFont::StyleHint and QFont::StyleStrategy with setStyleHint(). The default family (corresponding to the current style hint) is returned by defaultFamily().
.PP
The font-matching algorithm has a lastResortFamily() and lastResortFont() in cases where a suitable match cannot be found. You can provide substitutions for font family names using insertSubstitution() and insertSubstitutions(). Substitutions can be removed with removeSubstitution(). Use substitute() to retrieve a family's first substitute, or the family name itself if it has no substitutes. Use substitutes() to retrieve a list of a family's substitutes (which may be empty).
.PP
Every QFont has a key() which you can use, for example, as the key in a cache or dictionary. If you want to store a user's font preferences you could use QSettings, writing the font information with toString() and reading it back with fromString(). The operator<<() and operator>>() functions are also available, but they work on a data stream.
.PP
It is possible to set the height of characters shown on the screen to a specified number of pixels with setPixelSize(); however using setPointSize() has a similar effect and provides device independence.
.PP
Under the X Window System you can set a font using its system specific name with setRawName().
.PP
Loading fonts can be expensive, especially on X11. QFont contains extensive optimizations to make the copying of QFont objects fast, and to cache the results of the slow window system functions it depends upon.
.PP
The font matching algorithm works as follows: <ol type=1>
.IP 1
The specified font family is searched for.
.IP 2
If not found, the styleHint() is used to select a replacement family.
.IP 3
Each replacement font family is searched for.
.IP 4
If none of these are found or there was no styleHint(), "helvetica" will be searched for.
.IP 5
If "helvetica" isn't found Qt will try the lastResortFamily().
.IP 6
If the lastResortFamily() isn't found Qt will try the lastResortFont() which will always return a name of some kind.
.PP
Once a font is found, the remaining attributes are matched in order of priority: <ol type=1>
.IP 7
fixedPitch()
.IP 8
pointSize() (see below)
.IP 9
weight()
.IP 10
italic()
.PP
If you have a font which matches on family, even if none of the other attributes match, this font will be chosen in preference to a font which doesn't match on family but which does match on the other attributes. This is because font family is the dominant search criteria.
.PP
The point size is defined to match if it is within 20% of the requested point size. When several fonts match and are only distinguished by point size, the font with the closest point size to the one requested will be chosen.
.PP
The actual family, font size, weight and other font attributes used for drawing text will depend on what's available for the chosen family under the window system. A QFontInfo object can be used to determine the actual values used for drawing the text.
.PP
Examples:
.)l
.PP
.nf
.br
    QFont f("Helvetica");
.br
.fi
If you had both an Adobe and a Cronyx Helvetica, you might get either.
.PP
.nf
.br
    QFont f1( "Helvetica [Cronyx]" );  // Qt 3.x
.br
    QFont f2( "Cronyx-Helvetica" );    // Qt 2.x compatibility
.br
.fi
You can specify the foundry you want in the family name. Both fonts, f1 and f2, in the above example will be set to "Helvetica [Cronyx]".
.PP
To determine the attributes of the font actually used in the window system, use a QFontInfo object, e.g.
.PP
.nf
.br
    QFontInfo info( f1 );
.br
    QString family = info.family();
.br
.fi
.PP
To find out font metrics use a QFontMetrics object, e.g.
.PP
.nf
.br
    QFontMetrics fm( f1 );
.br
    int pixelWidth = fm.width( "How many pixels wide is this text?" );
.br
    int pixelHeight = fm.height();
.br
.fi
.PP
For more general information on fonts, see the comp.fonts FAQ. Information on encodings can be found from Roman Czyborra's page.
.PP
See also QFontMetrics, QFontInfo, QFontDatabase, QApplication::setFont(), QWidget::font, QPainter::setFont(), QFont::StyleHint, QFont::Weight, Widget Appearance and Style, Graphics Classes, and Implicitly and Explicitly Shared Classes.
.SS "Member Type Documentation"
.SH "QFont::Script"
This enum represents Unicode allocated scripts. For exhaustive coverage see The Unicode Standard Version 3.0. The following scripts are supported:
.PP
Modern European alphabetic scripts (left to right):
.TP
\fCQFont::Latin\fR - consists of most alphabets based on the original Latin alphabet.
.TP
\fCQFont::Greek\fR - covers ancient and modern Greek and Coptic.
.TP
\fCQFont::Cyrillic\fR - covers the Slavic and non-Slavic languages using cyrillic alphabets.
.TP
\fCQFont::Armenian\fR - contains the Armenian alphabet used with the Armenian language.
.TP
\fCQFont::Georgian\fR - covers at least the language Georgian.
.TP
\fCQFont::Runic\fR - covers the known constituents of the Runic alphabets used by the early and medieval societies in the Germanic, Scandinavian, and Anglo-Saxon areas.
.TP
\fCQFont::Ogham\fR - is an alphabetical script used to write a very early form of Irish.
.TP
\fCQFont::SpacingModifiers\fR - are small signs indicating modifications to the preceeding letter.
.TP
\fCQFont::CombiningMarks\fR - consist of diacritical marks not specific to a particular alphabet, diacritical marks used in combination with mathematical and technical symbols, and glyph encodings applied to multiple letterforms.
.PP
Middle Eastern scripts (right to left):
.TP
\fCQFont::Hebrew\fR - is used for writing Hebrew, Yiddish, and some other languages.
.TP
\fCQFont::Arabic\fR - covers the Arabic language as well as Persian, Urdu, Kurdish and some others.
.TP
\fCQFont::Syriac\fR - is used to write the active liturgical languages and dialects of several Middle Eastern and Southeast Indian communities.
.TP
\fCQFont::Thaana\fR - is used to write the Maledivian Dhivehi language.
.PP
South and Southeast Asian scripts (left to right with few historical exceptions):
.TP
\fCQFont::Devanagari\fR - covers classical Sanskrit and modern Hindi as well as several other languages.
.TP
\fCQFont::Bengali\fR - is a relative to Devanagari employed to write the Bengali language used in West Bengal/India and Bangladesh as well as several minority languages.
.TP
\fCQFont::Gurmukhi\fR - is another Devanagari relative used to write Punjabi.
.TP
\fCQFont::Gujarati\fR - is closely related to Devanagari and used to write the Gujarati language of the Gujarat state in India.
.TP
\fCQFont::Oriya\fR - is used to write the Oriya language of Orissa state/India.
.TP
\fCQFont::Tamil\fR - is used to write the Tamil language of Tamil Nadu state/India, Sri Lanka, Singapore and parts of Malaysia as well as some minority languages.
.TP
\fCQFont::Telugu\fR - is used to write the Telugu language of Andhra Pradesh state/India and some minority languages.
.TP
\fCQFont::Kannada\fR - is another South Indian script used to write the Kannada language of Karnataka state/India and some minority languages.
.TP
\fCQFont::Malayalam\fR - is used to write the Malayalam language of Kerala state/India.
.TP
\fCQFont::Sinhala\fR - is used for Sri Lanka's majority language Sinhala and is also employed to write Pali, Sanskrit, and Tamil.
.TP
\fCQFont::Thai\fR - is used to write Thai and other Southeast Asian languages.
.TP
\fCQFont::Lao\fR - is a language and script quite similar to Thai.
.TP
\fCQFont::Tibetan\fR - is the script used to write Tibetan in several countries like Tibet, the bordering Indian regions and Nepal. It is also used in the Buddist philosophy and liturgy of the Mongolian cultural area.
.TP
\fCQFont::Myanmar\fR - is mainly used to write the Burmese language of Myanmar (former Burma).
.TP
\fCQFont::Khmer\fR - is the official language of Kampuchea.
.PP
East Asian scripts (traditionally top-down, right to left, modern often horizontal left to right):
.TP
\fCQFont::Han\fR - consists of the CJK (Chinese, Japanese, Korean) idiographic characters.
.TP
\fCQFont::Hiragana\fR - is a cursive syllabary used to indicate phonetics and pronounciation of Japanese words.
.TP
\fCQFont::Katakana\fR - is a non-cursive syllabic script used to write Japanese words with visual emphasis and non-Japanese words in a phonetical manner.
.TP
\fCQFont::Hangul\fR - is a Korean script consisting of alphabetic components.
.TP
\fCQFont::Bopomofo\fR - is a phonetic alphabet for Chinese (mainly Mandarin).
.TP
\fCQFont::Yi\fR - (also called Cuan or Wei) is a syllabary used to write the Yi language of Southwestern China, Myanmar, Laos, and Vietnam.
.PP
Additional scripts that do not fit well into the script categories above:
.TP
\fCQFont::Ethiopic\fR - is a syllabary used by several Central East African languages.
.TP
\fCQFont::Cherokee\fR - is a left-to-right syllabic script used to write the Cherokee language.
.TP
\fCQFont::CanadianAboriginal\fR - consists of the syllabics used by some Canadian aboriginal societies.
.TP
\fCQFont::Mongolian\fR - is the traditional (and recently reintroduced) script used to write Mongolian.
.PP
Symbols:
.TP
\fCQFont::CurrencySymbols\fR - contains currency symbols not encoded in other scripts.
.TP
\fCQFont::LetterlikeSymbols\fR - consists of symbols derived from ordinary letters of an alphabetical script.
.TP
\fCQFont::NumberForms\fR - are provided for compatibility with other existing character sets.
.TP
\fCQFont::MathematicalOperators\fR - consists of encodings for operators, relations and other symbols like arrows used in a mathematical context.
.TP
\fCQFont::TechnicalSymbols\fR - contains representations for control codes, the space symbol, APL symbols and other symbols mainly used in the context of electronic data processing.
.TP
\fCQFont::GeometricSymbols\fR - covers block elements and geometric shapes.
.TP
\fCQFont::MiscellaneousSymbols\fR - consists of a heterogeneous collection of symbols that do not fit any other Unicode character block, e.g. Dingbats.
.TP
\fCQFont::EnclosedAndSquare\fR - is provided for compatibility with some East Asian standards.
.TP
\fCQFont::Braille\fR - is an international writing system used by blind people. This script encodes the 256 eight-dot patterns with the 64 six-dot patterns as a subset.
.TP
\fCQFont::Tagalog\fR
.TP
\fCQFont::Hanunoo\fR
.TP
\fCQFont::Buhid\fR
.TP
\fCQFont::Tagbanwa\fR
.TP
\fCQFont::KatakanaHalfWidth\fR
.TP
\fCQFont::Limbu\fR - (Unicode 4.0)
.TP
\fCQFont::TaiLe\fR - (Unicode 4.0)
.TP
\fCQFont::Unicode\fR - includes all the above scripts.
.SH "QFont::Stretch"
Predefined stretch values that follow the CSS naming convention.
.TP
\fCQFont::UltraCondensed\fR - 50
.TP
\fCQFont::ExtraCondensed\fR - 62
.TP
\fCQFont::Condensed\fR - 75
.TP
\fCQFont::SemiCondensed\fR - 87
.TP
\fCQFont::Unstretched\fR - 100
.TP
\fCQFont::SemiExpanded\fR - 112
.TP
\fCQFont::Expanded\fR - 125
.TP
\fCQFont::ExtraExpanded\fR - 150
.TP
\fCQFont::UltraExpanded\fR - 200
.PP
See also setStretch() and stretch().
.SH "QFont::StyleHint"
Style hints are used by the font matching algorithm to find an appropriate default family if a selected font family is not available.
.TP
\fCQFont::AnyStyle\fR - leaves the font matching algorithm to choose the family. This is the default.
.TP
\fCQFont::SansSerif\fR - the font matcher prefer sans serif fonts.
.TP
\fCQFont::Helvetica\fR - is a synonym for SansSerif.
.TP
\fCQFont::Serif\fR - the font matcher prefers serif fonts.
.TP
\fCQFont::Times\fR - is a synonym for Serif.
.TP
\fCQFont::TypeWriter\fR - the font matcher prefers fixed pitch fonts.
.TP
\fCQFont::Courier\fR - a synonym for TypeWriter.
.TP
\fCQFont::OldEnglish\fR - the font matcher prefers decorative fonts.
.TP
\fCQFont::Decorative\fR - is a synonym for OldEnglish.
.TP
\fCQFont::System\fR - the font matcher prefers system fonts.
.SH "QFont::StyleStrategy"
The style strategy tells the font matching algorithm what type of fonts should be used to find an appropriate default family.
.PP
The following strategies are available:
.TP
\fCQFont::PreferDefault\fR - the default style strategy. It does not prefer any type of font.
.TP
\fCQFont::PreferBitmap\fR - prefers bitmap fonts (as opposed to outline fonts).
.TP
\fCQFont::PreferDevice\fR - prefers device fonts.
.TP
\fCQFont::PreferOutline\fR - prefers outline fonts (as opposed to bitmap fonts).
.TP
\fCQFont::ForceOutline\fR - forces the use of outline fonts.
.TP
\fCQFont::NoAntialias\fR - don't antialias the fonts.
.TP
\fCQFont::PreferAntialias\fR - antialias if possible.
.TP
\fCQFont::OpenGLCompatible\fR - forces the use of OpenGL compatible fonts.
.PP
Any of these may be OR-ed with one of these flags:
.TP
\fCQFont::PreferMatch\fR - prefer an exact match. The font matcher will try to use the exact font size that has been specified.
.TP
\fCQFont::PreferQuality\fR - prefer the best quality font. The font matcher will use the nearest standard point size that the font supports.
.SH "QFont::Weight"
Qt uses a weighting scale from 0 to 99 similar to, but not the same as, the scales used in Windows or CSS. A weight of 0 is ultralight, whilst 99 will be an extremely black.
.PP
This enum contains the predefined font weights:
.TP
\fCQFont::Light\fR - 25
.TP
\fCQFont::Normal\fR - 50
.TP
\fCQFont::DemiBold\fR - 63
.TP
\fCQFont::Bold\fR - 75
.TP
\fCQFont::Black\fR - 87
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QFont::QFont ()"
Constructs a font object that uses the application's default font.
.PP
See also QApplication::setFont() and QApplication::font().
.SH "QFont::QFont ( const QString & family, int pointSize = 12, int weight = Normal, bool italic = FALSE )"
Constructs a font object with the specified \fIfamily\fR, \fIpointSize\fR, \fIweight\fR and \fIitalic\fR settings.
.PP
If \fIpointSize\fR is <= 0 it is set to 1.
.PP
The \fIfamily\fR name may optionally also include a foundry name, e.g. "Helvetica [Cronyx]". (The Qt 2.x syntax, i.e." Cronyx-Helvetica", is also supported.) If the \fIfamily\fR is available from more than one foundry and the foundry isn't specified, an arbitrary foundry is chosen. If the family isn't available a family will be set using the font matching algorithm.
.PP
See also Weight, setFamily(), setPointSize(), setWeight(), setItalic(), setStyleHint(), and QApplication::font().
.SH "QFont::QFont ( const QFont & font )"
Constructs a font that is a copy of \fIfont\fR.
.SH "QFont::~QFont ()"
Destroys the font object and frees all allocated resources.
.SH "bool QFont::bold () const"
Returns TRUE if weight() is a value greater than QFont::Normal; otherwise returns FALSE.
.PP
See also weight(), setBold(), and QFontInfo::bold().
.PP
Example: chart/optionsform.cpp.
.SH "int QFont::deciPointSize () const\fC [protected]\fR"
Returns the point size in 1/10ths of a point.
.PP
The returned value will be -1 if the font size has been specified in pixels.
.PP
See also pointSize() and pointSizeFloat().
.SH "QString QFont::defaultFamily () const"
Returns the family name that corresponds to the current style hint.
.PP
See also StyleHint, styleHint(), and setStyleHint().
.SH "QFont QFont::defaultFont ()\fC [static]\fR"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
Please use QApplication::font() instead.
.SH "bool QFont::dirty () const\fC [protected]\fR"
Returns TRUE if the font attributes have been changed and the font has to be (re)loaded; otherwise returns FALSE.
.SH "bool QFont::exactMatch () const"
Returns TRUE if a window system font exactly matching the settings of this font is available.
.PP
See also QFontInfo.
.SH "QString QFont::family () const"
Returns the requested font family name, i.e. the name set in the constructor or the last setFont() call.
.PP
See also setFamily(), substitutes(), and substitute().
.PP
Examples:
.)l chart/optionsform.cpp and fonts/simple-qfont-demo/viewer.cpp.
.SH "bool QFont::fixedPitch () const"
Returns TRUE if fixed pitch has been set; otherwise returns FALSE.
.PP
See also setFixedPitch() and QFontInfo::fixedPitch().
.SH "bool QFont::fromString ( const QString & descrip )"
Sets this font to match the description \fIdescrip\fR. The description is a comma-separated list of the font attributes, as returned by toString().
.PP
See also toString() and operator>>().
.SH "HFONT QFont::handle () const"
Returns the window system handle to the font, for low-level access. Using this function is \fInot\fR portable.
.SH "void QFont::insertSubstitution ( const QString & familyName, const QString & substituteName )\fC [static]\fR"
Inserts the family name \fIsubstituteName\fR into the substitution table for \fIfamilyName\fR.
.PP
See also insertSubstitutions(), removeSubstitution(), substitutions(), substitute(), and substitutes().
.PP
Example: fonts/simple-qfont-demo/viewer.cpp.
.SH "void QFont::insertSubstitutions ( const QString & familyName, const QStringList & substituteNames )\fC [static]\fR"
Inserts the list of families \fIsubstituteNames\fR into the substitution list for \fIfamilyName\fR.
.PP
See also insertSubstitution(), removeSubstitution(), substitutions(), and substitute().
.PP
Example: fonts/simple-qfont-demo/viewer.cpp.
.SH "bool QFont::isCopyOf ( const QFont & f ) const"
Returns TRUE if this font and \fIf\fR are copies of each other, i.e. one of them was created as a copy of the other and neither has been modified since. This is much stricter than equality.
.PP
See also operator=() and operator==().
.SH "bool QFont::italic () const"
Returns TRUE if italic has been set; otherwise returns FALSE.
.PP
See also setItalic().
.PP
Example: chart/optionsform.cpp.
.SH "QString QFont::key () const"
Returns the font's key, a textual representation of a font. It is typically used as the key for a cache or dictionary of fonts.
.PP
See also QMap.
.SH "QString QFont::lastResortFamily () const"
Returns the "last resort" font family name.
.PP
The current implementation tries a wide variety of common fonts, returning the first one it finds. Is is possible that no family is found in which case a null string is returned.
.PP
See also lastResortFont().
.SH "QString QFont::lastResortFont () const"
Returns a "last resort" font name for the font matching algorithm. This is used if the last resort family is not available. It will always return a name, if necessary returning something like" fixed" or "system".
.PP
The current implementation tries a wide variety of common fonts, returning the first one it finds. The implementation may change at any time, but this function will always return a string containing something.
.PP
It is theoretically possible that there really isn't a lastResortFont() in which case Qt will abort with an error message. We have not been able to identify a case where this happens. Please report it as a bug if it does, preferably with a list of the fonts you have installed.
.PP
See also lastResortFamily() and rawName().
.SH "bool QFont::operator!= ( const QFont & f ) const"
Returns TRUE if this font is different from \fIf\fR; otherwise returns FALSE.
.PP
Two QFonts are considered to be different if their font attributes are different. If rawMode() is enabled for both fonts, only the family fields are compared.
.PP
See also operator==().
.SH "QFont & QFont::operator= ( const QFont & font )"
Assigns \fIfont\fR to this font and returns a reference to it.
.SH "bool QFont::operator== ( const QFont & f ) const"
Returns TRUE if this font is equal to \fIf\fR; otherwise returns FALSE.
.PP
Two QFonts are considered equal if their font attributes are equal. If rawMode() is enabled for both fonts, only the family fields are compared.
.PP
See also operator!=() and isCopyOf().
.SH "bool QFont::overline () const"
Returns TRUE if overline has been set; otherwise returns FALSE.
.PP
See also setOverline().
.SH "int QFont::pixelSize () const"
Returns the pixel size of the font if it was set with setPixelSize(). Returns -1 if the size was set with setPointSize() or setPointSizeFloat().
.PP
See also setPixelSize(), pointSize(), QFontInfo::pointSize(), and QFontInfo::pixelSize().
.SH "int QFont::pointSize () const"
Returns the point size of the font. Returns -1 if the font size was specified in pixels.
.PP
See also setPointSize(), deciPointSize(), and pointSizeFloat().
.PP
Examples:
.)l chart/optionsform.cpp and fonts/simple-qfont-demo/viewer.cpp.
.SH "float QFont::pointSizeFloat () const"
Returns the point size of the font. Returns -1 if the font size was specified in pixels.
.PP
See also pointSize(), setPointSizeFloat(), pixelSize(), QFontInfo::pointSize(), and QFontInfo::pixelSize().
.SH "void QFont::qwsRenderToDisk ( bool all = TRUE )"
Saves the glyphs in the font that have previously been accessed as a QPF file. If \fIall\fR is TRUE (the default), then before saving, all glyphs are marked as used.
.PP
If the font is large and you are sure that only a subset of characters will ever be required on the target device, passing FALSE for the \fIall\fR parameter can save a significant amount of disk space.
.PP
Note that this function is only applicable on Qt/Embedded.
.SH "bool QFont::rawMode () const"
Returns TRUE if raw mode is used for font name matching; otherwise returns FALSE.
.PP
See also setRawMode() and rawName().
.SH "QString QFont::rawName () const"
Returns the name of the font within the underlying window system.
.PP
On Windows, this is usually just the family name of a TrueType font.
.PP
On X11, it is an XLFD (X Logical Font Description). When Qt is build with Xft support on X11, the return value can be an Xft pattern or an XLFD.
.PP
Using the return value of this function is usually \fInot\fR \fIportable\fR.
.PP
See also setRawName().
.SH "void QFont::removeSubstitution ( const QString & familyName )\fC [static]\fR"
Removes all the substitutions for \fIfamilyName\fR.
.PP
See also insertSubstitutions(), insertSubstitution(), substitutions(), and substitute().
.SH "QFont QFont::resolve ( const QFont & other ) const"
Returns a new QFont that has attributes copied from \fIother\fR.
.SH "void QFont::setBold ( bool enable )"
If \fIenable\fR is true sets the font's weight to QFont::Bold; otherwise sets the weight to QFont::Normal.
.PP
For finer boldness control use setWeight().
.PP
See also bold() and setWeight().
.PP
Examples:
.)l menu/menu.cpp and themes/metal.cpp.
.SH "void QFont::setDefaultFont ( const QFont & f )\fC [static]\fR"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
Please use QApplication::setFont() instead.
.SH "void QFont::setFamily ( const QString & family )"
Sets the family name of the font. The name is case insensitive and may include a foundry name.
.PP
The \fIfamily\fR name may optionally also include a foundry name, e.g. "Helvetica [Cronyx]". (The Qt 2.x syntax, i.e." Cronyx-Helvetica", is also supported.) If the \fIfamily\fR is available from more than one foundry and the foundry isn't specified, an arbitrary foundry is chosen. If the family isn't available a family will be set using the font matching algorithm.
.PP
See also family(), setStyleHint(), and QFontInfo.
.SH "void QFont::setFixedPitch ( bool enable )"
If \fIenable\fR is TRUE, sets fixed pitch on; otherwise sets fixed pitch off.
.PP
See also fixedPitch() and QFontInfo.
.SH "void QFont::setItalic ( bool enable )"
If \fIenable\fR is TRUE, italic is set on; otherwise italic is set off.
.PP
See also italic() and QFontInfo.
.PP
Examples:
.)l fileiconview/qfileiconview.cpp, fonts/simple-qfont-demo/viewer.cpp, and themes/metal.cpp.
.SH "void QFont::setOverline ( bool enable )"
If \fIenable\fR is TRUE, sets overline on; otherwise sets overline off.
.PP
See also overline() and QFontInfo.
.SH "void QFont::setPixelSize ( int pixelSize )"
Sets the font size to \fIpixelSize\fR pixels.
.PP
Using this function makes the font device dependent. Use setPointSize() or setPointSizeFloat() to set the size of the font in a device independent manner.
.PP
See also pixelSize().
.PP
Example: qwerty/qwerty.cpp.
.SH "void QFont::setPixelSizeFloat ( float pixelSize )"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
Sets the logical pixel height of font characters when shown on the screen to \fIpixelSize\fR.
.SH "void QFont::setPointSize ( int pointSize )"
Sets the point size to \fIpointSize\fR. The point size must be greater than zero.
.PP
See also pointSize() and setPointSizeFloat().
.PP
Example: fonts/simple-qfont-demo/viewer.cpp.
.SH "void QFont::setPointSizeFloat ( float pointSize )"
Sets the point size to \fIpointSize\fR. The point size must be greater than zero. The requested precision may not be achieved on all platforms.
.PP
See also pointSizeFloat(), setPointSize(), and setPixelSize().
.SH "void QFont::setRawMode ( bool enable )"
If \fIenable\fR is TRUE, turns raw mode on; otherwise turns raw mode off. This function only has an effect under X11.
.PP
If raw mode is enabled, Qt will search for an X font with a complete font name matching the family name, ignoring all other values set for the QFont. If the font name matches several fonts, Qt will use the first font returned by X. QFontInfo \fIcannot\fR be used to fetch information about a QFont using raw mode (it will return the values set in the QFont for all parameters, including the family name).
.PP
\fBWarning:\fR Do not use raw mode unless you really, really need it! In most (if not all) cases, setRawName() is a much better choice.
.PP
See also rawMode() and setRawName().
.SH "void QFont::setRawName ( const QString & name )"
Sets a font by its system specific name. The function is particularly useful under X, where system font settings (for example X resources) are usually available in XLFD (X Logical Font Description) form only. You can pass an XLFD as \fIname\fR to this function.
.PP
A font set with setRawName() is still a full-featured QFont. It can be queried (for example with italic()) or modified (for example with setItalic()) and is therefore also suitable for rendering rich text.
.PP
If Qt's internal font database cannot resolve the raw name, the font becomes a raw font with \fIname\fR as its family.
.PP
Note that the present implementation does not handle wildcards in XLFDs well, and that font aliases (file \fCfonts.alias\fR in the font directory on X11) are not supported.
.PP
See also rawName(), setRawMode(), and setFamily().
.SH "void QFont::setStretch ( int factor )"
Sets the stretch factor for the font.
.PP
The stretch factor changes the width of all characters in the font by \fIfactor\fR percent. For example, setting \fIfactor\fR to 150 results in all characters in the font being 1.5 times ( ie. 150% ) wider. The default stretch factor is 100. The minimum stretch factor is 1, and the maximum stretch factor is 4000.
.PP
The stretch factor is only applied to outline fonts. The stretch factor is ignored for bitmap fonts.
.PP
NOTE: QFont cannot stretch XLFD fonts. When loading XLFD fonts on X11, the stretch factor is matched against a predefined set of values for the SETWIDTH_NAME field of the XLFD.
.PP
See also stretch() and QFont::StyleStrategy.
.SH "void QFont::setStrikeOut ( bool enable )"
If \fIenable\fR is TRUE, sets strikeout on; otherwise sets strikeout off.
.PP
See also strikeOut() and QFontInfo.
.SH "void QFont::setStyleHint ( StyleHint hint, StyleStrategy strategy = PreferDefault )"
Sets the style hint and strategy to \fIhint\fR and \fIstrategy\fR, respectively.
.PP
If these aren't set explicitly the style hint will default to AnyStyle and the style strategy to PreferDefault.
.PP
Qt does not support style hints on X11 since this information is not provided by the window system.
.PP
See also StyleHint, styleHint(), StyleStrategy, styleStrategy(), and QFontInfo.
.PP
Examples:
.)l desktop/desktop.cpp and fonts/simple-qfont-demo/viewer.cpp.
.SH "void QFont::setStyleStrategy ( StyleStrategy s )"
Sets the style strategy for the font to \fIs\fR.
.PP
See also QFont::StyleStrategy.
.SH "void QFont::setUnderline ( bool enable )"
If \fIenable\fR is TRUE, sets underline on; otherwise sets underline off.
.PP
See also underline() and QFontInfo.
.PP
Examples:
.)l fonts/simple-qfont-demo/viewer.cpp and menu/menu.cpp.
.SH "void QFont::setWeight ( int weight )"
Sets the weight the font to \fIweight\fR, which should be a value from the QFont::Weight enumeration.
.PP
See also weight() and QFontInfo.
.PP
Example: fonts/simple-qfont-demo/viewer.cpp.
.SH "int QFont::stretch () const"
Returns the stretch factor for the font.
.PP
See also setStretch().
.SH "bool QFont::strikeOut () const"
Returns TRUE if strikeout has been set; otherwise returns FALSE.
.PP
See also setStrikeOut().
.SH "StyleHint QFont::styleHint () const"
Returns the StyleHint.
.PP
The style hint affects the font matching algorithm. See QFont::StyleHint for the list of strategies.
.PP
See also setStyleHint(), QFont::StyleStrategy, and QFontInfo::styleHint().
.SH "StyleStrategy QFont::styleStrategy () const"
Returns the StyleStrategy.
.PP
The style strategy affects the font matching algorithm. See QFont::StyleStrategy for the list of strategies.
.PP
See also setStyleHint() and QFont::StyleHint.
.SH "QString QFont::substitute ( const QString & familyName )\fC [static]\fR"
Returns the first family name to be used whenever \fIfamilyName\fR is specified. The lookup is case insensitive.
.PP
If there is no substitution for \fIfamilyName\fR, \fIfamilyName\fR is returned.
.PP
To obtain a list of substitutions use substitutes().
.PP
See also setFamily(), insertSubstitutions(), insertSubstitution(), and removeSubstitution().
.SH "QStringList QFont::substitutes ( const QString & familyName )\fC [static]\fR"
Returns a list of family names to be used whenever \fIfamilyName\fR is specified. The lookup is case insensitive.
.PP
If there is no substitution for \fIfamilyName\fR, an empty list is returned.
.PP
See also substitute(), insertSubstitutions(), insertSubstitution(), and removeSubstitution().
.PP
Example: fonts/simple-qfont-demo/viewer.cpp.
.SH "QStringList QFont::substitutions ()\fC [static]\fR"
Returns a sorted list of substituted family names.
.PP
See also insertSubstitution(), removeSubstitution(), and substitute().
.SH "QString QFont::toString () const"
Returns a description of the font. The description is a comma-separated list of the attributes, perfectly suited for use in QSettings.
.PP
See also fromString() and operator<<().
.SH "bool QFont::underline () const"
Returns TRUE if underline has been set; otherwise returns FALSE.
.PP
See also setUnderline().
.SH "int QFont::weight () const"
Returns the weight of the font which is one of the enumerated values from QFont::Weight.
.PP
See also setWeight(), Weight, and QFontInfo.
.SH RELATED FUNCTION DOCUMENTATION
.SH "QDataStream & operator<< ( QDataStream & s, const QFont & font )"
Writes the font \fIfont\fR to the data stream \fIs\fR. (toString() writes to a text stream.)
.PP
See also Format of the QDataStream operators.
.SH "QDataStream & operator>> ( QDataStream & s, QFont & font )"
Reads the font \fIfont\fR from the data stream \fIs\fR. (fromString() reads from a text stream.)
.PP
See also Format of the QDataStream operators.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qfont.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qfont.3qt) and the Qt
version (3.3.8).
