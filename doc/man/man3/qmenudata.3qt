'\" t
.TH QMenuData 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QMenuData \- Base class for QMenuBar and QPopupMenu
.SH SYNOPSIS
\fC#include <qmenudata.h>\fR
.PP
Inherited by QMenuBar and QPopupMenu.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQMenuData\fR ()"
.br
.ti -1c
.BI "virtual \fB~QMenuData\fR ()"
.br
.ti -1c
.BI "uint \fBcount\fR () const"
.br
.ti -1c
.BI "int \fBinsertItem\fR ( const QString & text, const QObject * receiver, const char * member, const QKeySequence & accel = 0, int id = -1, int index = -1 )"
.br
.ti -1c
.BI "int \fBinsertItem\fR ( const QIconSet & icon, const QString & text, const QObject * receiver, const char * member, const QKeySequence & accel = 0, int id = -1, int index = -1 )"
.br
.ti -1c
.BI "int \fBinsertItem\fR ( const QPixmap & pixmap, const QObject * receiver, const char * member, const QKeySequence & accel = 0, int id = -1, int index = -1 )"
.br
.ti -1c
.BI "int \fBinsertItem\fR ( const QIconSet & icon, const QPixmap & pixmap, const QObject * receiver, const char * member, const QKeySequence & accel = 0, int id = -1, int index = -1 )"
.br
.ti -1c
.BI "int \fBinsertItem\fR ( const QString & text, int id = -1, int index = -1 )"
.br
.ti -1c
.BI "int \fBinsertItem\fR ( const QIconSet & icon, const QString & text, int id = -1, int index = -1 )"
.br
.ti -1c
.BI "int \fBinsertItem\fR ( const QString & text, QPopupMenu * popup, int id = -1, int index = -1 )"
.br
.ti -1c
.BI "int \fBinsertItem\fR ( const QIconSet & icon, const QString & text, QPopupMenu * popup, int id = -1, int index = -1 )"
.br
.ti -1c
.BI "int \fBinsertItem\fR ( const QPixmap & pixmap, int id = -1, int index = -1 )"
.br
.ti -1c
.BI "int \fBinsertItem\fR ( const QIconSet & icon, const QPixmap & pixmap, int id = -1, int index = -1 )"
.br
.ti -1c
.BI "int \fBinsertItem\fR ( const QPixmap & pixmap, QPopupMenu * popup, int id = -1, int index = -1 )"
.br
.ti -1c
.BI "int \fBinsertItem\fR ( const QIconSet & icon, const QPixmap & pixmap, QPopupMenu * popup, int id = -1, int index = -1 )"
.br
.ti -1c
.BI "int \fBinsertItem\fR ( QWidget * widget, int id = -1, int index = -1 )"
.br
.ti -1c
.BI "int \fBinsertItem\fR ( const QIconSet & icon, QCustomMenuItem * custom, int id = -1, int index = -1 )"
.br
.ti -1c
.BI "int \fBinsertItem\fR ( QCustomMenuItem * custom, int id = -1, int index = -1 )"
.br
.ti -1c
.BI "int \fBinsertSeparator\fR ( int index = -1 )"
.br
.ti -1c
.BI "void \fBremoveItem\fR ( int id )"
.br
.ti -1c
.BI "void \fBremoveItemAt\fR ( int index )"
.br
.ti -1c
.BI "void \fBclear\fR ()"
.br
.ti -1c
.BI "QKeySequence \fBaccel\fR ( int id ) const"
.br
.ti -1c
.BI "void \fBsetAccel\fR ( const QKeySequence & key, int id )"
.br
.ti -1c
.BI "QIconSet * \fBiconSet\fR ( int id ) const"
.br
.ti -1c
.BI "QString \fBtext\fR ( int id ) const"
.br
.ti -1c
.BI "QPixmap * \fBpixmap\fR ( int id ) const"
.br
.ti -1c
.BI "void \fBsetWhatsThis\fR ( int id, const QString & text )"
.br
.ti -1c
.BI "QString \fBwhatsThis\fR ( int id ) const"
.br
.ti -1c
.BI "void \fBchangeItem\fR ( int id, const QString & text )"
.br
.ti -1c
.BI "void \fBchangeItem\fR ( int id, const QPixmap & pixmap )"
.br
.ti -1c
.BI "void \fBchangeItem\fR ( int id, const QIconSet & icon, const QString & text )"
.br
.ti -1c
.BI "void \fBchangeItem\fR ( int id, const QIconSet & icon, const QPixmap & pixmap )"
.br
.ti -1c
.BI "void changeItem ( const QString & text, int id )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "void changeItem ( const QPixmap & pixmap, int id )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "void changeItem ( const QIconSet & icon, const QString & text, int id )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "bool \fBisItemActive\fR ( int id ) const"
.br
.ti -1c
.BI "bool \fBisItemEnabled\fR ( int id ) const"
.br
.ti -1c
.BI "void \fBsetItemEnabled\fR ( int id, bool enable )"
.br
.ti -1c
.BI "bool \fBisItemChecked\fR ( int id ) const"
.br
.ti -1c
.BI "void \fBsetItemChecked\fR ( int id, bool check )"
.br
.ti -1c
.BI "bool \fBisItemVisible\fR ( int id ) const"
.br
.ti -1c
.BI "void \fBsetItemVisible\fR ( int id, bool visible )"
.br
.ti -1c
.BI "virtual void \fBupdateItem\fR ( int id )"
.br
.ti -1c
.BI "int \fBindexOf\fR ( int id ) const"
.br
.ti -1c
.BI "int \fBidAt\fR ( int index ) const"
.br
.ti -1c
.BI "virtual void \fBsetId\fR ( int index, int id )"
.br
.ti -1c
.BI "bool \fBconnectItem\fR ( int id, const QObject * receiver, const char * member )"
.br
.ti -1c
.BI "bool \fBdisconnectItem\fR ( int id, const QObject * receiver, const char * member )"
.br
.ti -1c
.BI "bool \fBsetItemParameter\fR ( int id, int param )"
.br
.ti -1c
.BI "int \fBitemParameter\fR ( int id ) const"
.br
.ti -1c
.BI "QMenuItem * \fBfindItem\fR ( int id ) const"
.br
.ti -1c
.BI "QMenuItem * \fBfindItem\fR ( int id, QMenuData ** parent ) const"
.br
.ti -1c
.BI "virtual void \fBactivateItemAt\fR ( int index )"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual void \fBmenuContentsChanged\fR ()"
.br
.ti -1c
.BI "virtual void \fBmenuStateChanged\fR ()"
.br
.ti -1c
.BI "virtual void \fBmenuInsPopup\fR ( QPopupMenu * )"
.br
.ti -1c
.BI "virtual void \fBmenuDelPopup\fR ( QPopupMenu * )"
.br
.in -1c
.SH DESCRIPTION
The QMenuData class is a base class for QMenuBar and QPopupMenu.
.PP
QMenuData has an internal list of menu items. A menu item can have a text(), an accelerator, a pixmap(), an iconSet(), a whatsThis() text and a popup menu (unless it is a separator). Menu items may optionally be checked (except for separators).
.PP
The menu item sends out an activated() signal when it is chosen and a highlighted() signal when it receives the user input focus.
.PP

.PP
Menu items are assigned the menu identifier \fIid\fR that is passed in insertItem() or an automatically generated identifier if \fIid\fR is < 0 (the default). The generated identifiers (negative integers) are guaranteed to be unique within the entire application. The identifier is used to access the menu item in other functions.
.PP
Menu items can be removed with removeItem() and removeItemAt(), or changed with changeItem(). All menu items can be removed with clear(). Accelerators can be changed or set with setAccel(). Checkable items can be checked or unchecked with setItemChecked(). Items can be enabled or disabled using setItemEnabled() and connected and disconnected with connectItem() and disconnectItem() respectively. By default, newly created menu items are visible. They can be hidden (and shown again) with setItemVisible().
.PP
Menu items are stored in a list. Use findItem() to find an item by its list position or by its menu identifier. (See also indexOf() and idAt().)
.PP
See also QAccel, QPopupMenu, QAction, and Miscellaneous Classes.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QMenuData::QMenuData ()"
Constructs an empty menu data list.
.SH "QMenuData::~QMenuData ()\fC [virtual]\fR"
Removes all menu items and disconnects any signals that have been connected.
.SH "QKeySequence QMenuData::accel ( int id ) const"
Returns the accelerator key that has been defined for the menu item \fIid\fR, or 0 if it has no accelerator key or if there is no such menu item.
.PP
See also setAccel(), QAccel, and qnamespace.h.
.SH "void QMenuData::activateItemAt ( int index )\fC [virtual]\fR"
Activates the menu item at position \fIindex\fR.
.PP
If the index is invalid (for example, -1), the object itself is deactivated.
.SH "void QMenuData::changeItem ( int id, const QString & text )"
Changes the text of the menu item \fIid\fR to \fItext\fR. If the item has an icon, the icon remains unchanged.
.PP
See also text().
.SH "void QMenuData::changeItem ( int id, const QPixmap & pixmap )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Changes the pixmap of the menu item \fIid\fR to the pixmap \fIpixmap\fR. If the item has an icon, the icon is unchanged.
.PP
See also pixmap().
.SH "void QMenuData::changeItem ( int id, const QIconSet & icon, const QString & text )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Changes the iconset and text of the menu item \fIid\fR to the \fIicon\fR and \fItext\fR respectively.
.PP
See also pixmap().
.SH "void QMenuData::changeItem ( int id, const QIconSet & icon, const QPixmap & pixmap )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Changes the iconset and pixmap of the menu item \fIid\fR to \fIicon\fR and \fIpixmap\fR respectively.
.PP
See also pixmap().
.SH "void QMenuData::changeItem ( const QString & text, int id )"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
Changes the text of the menu item \fIid\fR. If the item has an icon, the icon remains unchanged.
.PP
See also text().
.SH "void QMenuData::changeItem ( const QPixmap & pixmap, int id )"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
Changes the pixmap of the menu item \fIid\fR. If the item has an icon, the icon remains unchanged.
.PP
See also pixmap().
.SH "void QMenuData::changeItem ( const QIconSet & icon, const QString & text, int id )"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
Changes the icon and text of the menu item \fIid\fR.
.PP
See also pixmap().
.SH "void QMenuData::clear ()"
Removes all menu items.
.PP
See also removeItem() and removeItemAt().
.PP
Examples:
.)l mdi/application.cpp and qwerty/qwerty.cpp.
.SH "bool QMenuData::connectItem ( int id, const QObject * receiver, const char * member )"
Connects the menu item with identifier \fIid\fR to \fIreceiver\fR's \fImember\fR slot or signal.
.PP
The receiver's slot (or signal) is activated when the menu item is activated.
.PP
See also disconnectItem() and setItemParameter().
.PP
Example: menu/menu.cpp.
.SH "uint QMenuData::count () const"
Returns the number of items in the menu.
.SH "bool QMenuData::disconnectItem ( int id, const QObject * receiver, const char * member )"
Disconnects the \fIreceiver\fR's \fImember\fR from the menu item with identifier \fIid\fR.
.PP
All connections are removed when the menu data object is destroyed.
.PP
See also connectItem() and setItemParameter().
.SH "QMenuItem * QMenuData::findItem ( int id ) const"
Returns the menu item with identifier \fIid\fR, or 0 if there is no item with this identifier.
.PP
Note that QMenuItem is an internal class, and that you should not need to call this function. Use the higher level functions like text(), pixmap() and changeItem() to get and modify menu item attributes instead.
.PP
See also indexOf().
.PP
Example: chart/chartform.cpp.
.SH "QMenuItem * QMenuData::findItem ( int id, QMenuData ** parent ) const"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Returns the menu item with identifier \fIid\fR, or 0 if there is no item with this identifier. Changes \fI*parent\fR to point to the parent of the return value.
.PP
Note that QMenuItem is an internal class, and that you should not need to call this function. Use the higher level functions like text(), pixmap() and changeItem() to get and modify menu item attributes instead.
.PP
See also indexOf().
.SH "QIconSet * QMenuData::iconSet ( int id ) const"
Returns the icon set that has been set for menu item \fIid\fR, or 0 if no icon set has been set.
.PP
See also changeItem(), text(), and pixmap().
.SH "int QMenuData::idAt ( int index ) const"
Returns the identifier of the menu item at position \fIindex\fR in the internal list, or -1 if \fIindex\fR is out of range.
.PP
See also setId() and indexOf().
.SH "int QMenuData::indexOf ( int id ) const"
Returns the index of the menu item with identifier \fIid\fR, or -1 if there is no item with this identifier.
.PP
See also idAt() and findItem().
.PP
Example: scrollview/scrollview.cpp.
.SH "int QMenuData::insertItem ( const QString & text, const QObject * receiver, const char * member, const QKeySequence & accel = 0, int id = -1, int index = -1 )"
The family of insertItem() functions inserts menu items into a popup menu or a menu bar.
.PP
A menu item is usually either a text string or a pixmap, both with an optional icon or keyboard accelerator. For special cases it is also possible to insert custom items (see QCustomMenuItem) or even widgets into popup menus.
.PP
Some insertItem() members take a popup menu as an additional argument. Use this to insert submenus into existing menus or pulldown menus into a menu bar.
.PP
The number of insert functions may look confusing, but they are actually quite simple to use.
.PP
This default version inserts a menu item with the text \fItext\fR, the accelerator key \fIaccel\fR, an id and an optional index and connects it to the slot \fImember\fR in the object \fIreceiver\fR.
.PP
Example:
.PP
.nf
.br
        QMenuBar   *mainMenu = new QMenuBar;
.br
        QPopupMenu *fileMenu = new QPopupMenu;
.br
        fileMenu->insertItem( "New",  myView, SLOT(newFile()), CTRL+Key_N );
.br
        fileMenu->insertItem( "Open", myView, SLOT(open()),    CTRL+Key_O );
.br
        mainMenu->insertItem( "File", fileMenu );
.br
.fi
.PP
Not all insert functions take an object/slot parameter or an accelerator key. Use connectItem() and setAccel() on those items.
.PP
If you need to translate accelerators, use tr() with the text and accelerator. (For translations use a string key sequence.):
.PP
.nf
.br
        fileMenu->insertItem( tr("Open"), myView, SLOT(open()),
.br
                              tr("Ctrl+O") );
.br
.fi
.PP
In the example above, pressing Ctrl+O or selecting "Open" from the menu activates the myView->open() function.
.PP
Some insert functions take a QIconSet parameter to specify the little menu item icon. Note that you can always pass a QPixmap object instead.
.PP
The \fIid\fR specifies the identification number associated with the menu item. Note that only positive values are valid, as a negative value will make Qt select a unique id for the item.
.PP
The \fIindex\fR specifies the position in the menu. The menu item is appended at the end of the list if \fIindex\fR is negative.
.PP
Note that keyboard accelerators in Qt are not application-global, instead they are bound to a certain top-level window. For example, accelerators in QPopupMenu items only work for menus that are associated with a certain window. This is true for popup menus that live in a menu bar since their accelerators will then be installed in the menu bar itself. This also applies to stand-alone popup menus that have a top-level widget in their parentWidget() chain. The menu will then install its accelerator object on that top-level widget. For all other cases use an independent QAccel object.
.PP
\fBWarning:\fR Be careful when passing a literal 0 to insertItem() because some C++ compilers choose the wrong overloaded function. Cast the 0 to what you mean, e.g. \fC(QObject*)0\fR.
.PP
\fBWarning:\fR On Mac OS X, items that connect to a slot that are inserted into a menubar will not function as we use the native menubar that knows nothing about signals or slots. Instead insert the items into a popup menu and insert the popup menu into the menubar. This may be fixed in a future Qt version.
.PP
Returns the allocated menu identifier number (\fIid\fR if \fIid\fR >= 0).
.PP
See also removeItem(), changeItem(), setAccel(), connectItem(), QAccel, and qnamespace.h.
.PP
Examples:
.)l addressbook/mainwindow.cpp, canvas/canvas.cpp, menu/menu.cpp, qwerty/qwerty.cpp, scrollview/scrollview.cpp, showimg/showimg.cpp, and sound/sound.cpp.
.SH "int QMenuData::insertItem ( const QIconSet & icon, const QString & text, const QObject * receiver, const char * member, const QKeySequence & accel = 0, int id = -1, int index = -1 )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Inserts a menu item with icon \fIicon\fR, text \fItext\fR, accelerator \fIaccel\fR, optional id \fIid\fR, and optional \fIindex\fR position. The menu item is connected it to the \fIreceiver\fR's \fImember\fR slot. The icon will be displayed to the left of the text in the item.
.PP
Returns the allocated menu identifier number (\fIid\fR if \fIid\fR >= 0).
.PP
See also removeItem(), changeItem(), setAccel(), connectItem(), QAccel, and qnamespace.h.
.SH "int QMenuData::insertItem ( const QPixmap & pixmap, const QObject * receiver, const char * member, const QKeySequence & accel = 0, int id = -1, int index = -1 )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Inserts a menu item with pixmap \fIpixmap\fR, accelerator \fIaccel\fR, optional id \fIid\fR, and optional \fIindex\fR position. The menu item is connected it to the \fIreceiver\fR's \fImember\fR slot. The icon will be displayed to the left of the text in the item.
.PP
To look best when being highlighted as a menu item, the pixmap should provide a mask (see QPixmap::mask()).
.PP
Returns the allocated menu identifier number (\fIid\fR if \fIid\fR >= 0).
.PP
See also removeItem(), changeItem(), setAccel(), and connectItem().
.SH "int QMenuData::insertItem ( const QIconSet & icon, const QPixmap & pixmap, const QObject * receiver, const char * member, const QKeySequence & accel = 0, int id = -1, int index = -1 )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Inserts a menu item with icon \fIicon\fR, pixmap \fIpixmap\fR, accelerator \fIaccel\fR, optional id \fIid\fR, and optional \fIindex\fR position. The icon will be displayed to the left of the pixmap in the item. The item is connected to the \fImember\fR slot in the \fIreceiver\fR object.
.PP
To look best when being highlighted as a menu item, the pixmap should provide a mask (see QPixmap::mask()).
.PP
Returns the allocated menu identifier number (\fIid\fR if \fIid\fR >= 0).
.PP
See also removeItem(), changeItem(), setAccel(), connectItem(), QAccel, and qnamespace.h.
.SH "int QMenuData::insertItem ( const QString & text, int id = -1, int index = -1 )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Inserts a menu item with text \fItext\fR, optional id \fIid\fR, and optional \fIindex\fR position.
.PP
Returns the allocated menu identifier number (\fIid\fR if \fIid\fR >= 0).
.PP
See also removeItem(), changeItem(), setAccel(), and connectItem().
.SH "int QMenuData::insertItem ( const QIconSet & icon, const QString & text, int id = -1, int index = -1 )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Inserts a menu item with icon \fIicon\fR, text \fItext\fR, optional id \fIid\fR, and optional \fIindex\fR position. The icon will be displayed to the left of the text in the item.
.PP
Returns the allocated menu identifier number (\fIid\fR if \fIid\fR >= 0).
.PP
See also removeItem(), changeItem(), setAccel(), and connectItem().
.SH "int QMenuData::insertItem ( const QString & text, QPopupMenu * popup, int id = -1, int index = -1 )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Inserts a menu item with text \fItext\fR, submenu \fIpopup\fR, optional id \fIid\fR, and optional \fIindex\fR position.
.PP
The \fIpopup\fR must be deleted by the programmer or by its parent widget. It is not deleted when this menu item is removed or when the menu is deleted.
.PP
Returns the allocated menu identifier number (\fIid\fR if \fIid\fR >= 0).
.PP
See also removeItem(), changeItem(), setAccel(), and connectItem().
.SH "int QMenuData::insertItem ( const QIconSet & icon, const QString & text, QPopupMenu * popup, int id = -1, int index = -1 )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Inserts a menu item with icon \fIicon\fR, text \fItext\fR, submenu \fIpopup\fR, optional id \fIid\fR, and optional \fIindex\fR position. The icon will be displayed to the left of the text in the item.
.PP
The \fIpopup\fR must be deleted by the programmer or by its parent widget. It is not deleted when this menu item is removed or when the menu is deleted.
.PP
Returns the allocated menu identifier number (\fIid\fR if \fIid\fR >= 0).
.PP
See also removeItem(), changeItem(), setAccel(), and connectItem().
.SH "int QMenuData::insertItem ( const QPixmap & pixmap, int id = -1, int index = -1 )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Inserts a menu item with pixmap \fIpixmap\fR, optional id \fIid\fR, and optional \fIindex\fR position.
.PP
To look best when being highlighted as a menu item, the pixmap should provide a mask (see QPixmap::mask()).
.PP
Returns the allocated menu identifier number (\fIid\fR if \fIid\fR >= 0).
.PP
See also removeItem(), changeItem(), setAccel(), and connectItem().
.SH "int QMenuData::insertItem ( const QIconSet & icon, const QPixmap & pixmap, int id = -1, int index = -1 )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Inserts a menu item with icon \fIicon\fR, pixmap \fIpixmap\fR, optional id \fIid\fR, and optional \fIindex\fR position. The icon will be displayed to the left of the pixmap in the item.
.PP
Returns the allocated menu identifier number (\fIid\fR if \fIid\fR >= 0).
.PP
See also removeItem(), changeItem(), setAccel(), and connectItem().
.SH "int QMenuData::insertItem ( const QPixmap & pixmap, QPopupMenu * popup, int id = -1, int index = -1 )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Inserts a menu item with pixmap \fIpixmap\fR, submenu \fIpopup\fR, optional id \fIid\fR, and optional \fIindex\fR position.
.PP
The \fIpopup\fR must be deleted by the programmer or by its parent widget. It is not deleted when this menu item is removed or when the menu is deleted.
.PP
Returns the allocated menu identifier number (\fIid\fR if \fIid\fR >= 0).
.PP
See also removeItem(), changeItem(), setAccel(), and connectItem().
.SH "int QMenuData::insertItem ( const QIconSet & icon, const QPixmap & pixmap, QPopupMenu * popup, int id = -1, int index = -1 )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Inserts a menu item with icon \fIicon\fR, pixmap \fIpixmap\fR submenu \fIpopup\fR, optional id \fIid\fR, and optional \fIindex\fR position. The icon will be displayed to the left of the pixmap in the item.
.PP
The \fIpopup\fR must be deleted by the programmer or by its parent widget. It is not deleted when this menu item is removed or when the menu is deleted.
.PP
Returns the allocated menu identifier number (\fIid\fR if \fIid\fR >= 0).
.PP
See also removeItem(), changeItem(), setAccel(), and connectItem().
.SH "int QMenuData::insertItem ( QWidget * widget, int id = -1, int index = -1 )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Inserts a menu item that consists of the widget \fIwidget\fR with optional id \fIid\fR, and optional \fIindex\fR position.
.PP
Ownership of \fIwidget\fR is transferred to the popup menu or to the menu bar.
.PP
Theoretically, any widget can be inserted into a popup menu. In practice, this only makes sense with certain widgets.
.PP
If a widget is not focus-enabled (see QWidget::isFocusEnabled()), the menu treats it as a separator; this means that the item is not selectable and will never get focus. In this way you can, for example, simply insert a QLabel if you need a popup menu with a title.
.PP
If the widget is focus-enabled it will get focus when the user traverses the popup menu with the arrow keys. If the widget does not accept \fCArrowUp\fR and \fCArrowDown\fR in its key event handler, the focus will move back to the menu when the respective arrow key is hit one more time. This works with a QLineEdit, for example. If the widget accepts the arrow key itself, it must also provide the possibility to put the focus back on the menu again by calling QWidget::focusNextPrevChild(). Futhermore, if the embedded widget closes the menu when the user made a selection, this can be done safely by calling:
.PP
.nf
.br
        if ( isVisible() &&
.br
             parentWidget() &&
.br
             parentWidget()->inherits("QPopupMenu") )
.br
            parentWidget()->close();
.br
.fi
.PP
Returns the allocated menu identifier number (\fIid\fR if \fIid\fR >= 0).
.PP
See also removeItem().
.SH "int QMenuData::insertItem ( const QIconSet & icon, QCustomMenuItem * custom, int id = -1, int index = -1 )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Inserts a custom menu item \fIcustom\fR with an \fIicon\fR and with optional id \fIid\fR, and optional \fIindex\fR position.
.PP
This only works with popup menus. It is not supported for menu bars. Ownership of \fIcustom\fR is transferred to the popup menu.
.PP
If you want to connect a custom item to a slot, use connectItem().
.PP
Returns the allocated menu identifier number (\fIid\fR if \fIid\fR >= 0).
.PP
See also connectItem(), removeItem(), and QCustomMenuItem.
.SH "int QMenuData::insertItem ( QCustomMenuItem * custom, int id = -1, int index = -1 )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Inserts a custom menu item \fIcustom\fR with optional id \fIid\fR, and optional \fIindex\fR position.
.PP
This only works with popup menus. It is not supported for menu bars. Ownership of \fIcustom\fR is transferred to the popup menu.
.PP
If you want to connect a custom item to a slot, use connectItem().
.PP
Returns the allocated menu identifier number (\fIid\fR if \fIid\fR >= 0).
.PP
See also connectItem(), removeItem(), and QCustomMenuItem.
.SH "int QMenuData::insertSeparator ( int index = -1 )"
Inserts a separator at position \fIindex\fR, and returns the menu identifier number allocated to it. The separator becomes the last menu item if \fIindex\fR is negative.
.PP
In a popup menu a separator is rendered as a horizontal line. In a Motif menu bar a separator is spacing, so the rest of the items (normally just "Help") are drawn right-justified. In a Windows menu bar separators are ignored (to comply with the Windows style guidelines).
.PP
Examples:
.)l addressbook/mainwindow.cpp, menu/menu.cpp, progress/progress.cpp, qwerty/qwerty.cpp, scrollview/scrollview.cpp, showimg/showimg.cpp, and sound/sound.cpp.
.SH "bool QMenuData::isItemActive ( int id ) const"
Returns TRUE if the menu item with the id \fIid\fR is currently active; otherwise returns FALSE.
.SH "bool QMenuData::isItemChecked ( int id ) const"
Returns TRUE if the menu item with the id \fIid\fR has been checked; otherwise returns FALSE.
.PP
See also setItemChecked().
.PP
Examples:
.)l canvas/canvas.cpp, progress/progress.cpp, and showimg/showimg.cpp.
.SH "bool QMenuData::isItemEnabled ( int id ) const"
Returns TRUE if the item with identifier \fIid\fR is enabled; otherwise returns FALSE
.PP
See also setItemEnabled() and isItemVisible().
.SH "bool QMenuData::isItemVisible ( int id ) const"
Returns TRUE if the menu item with the id \fIid\fR is visible; otherwise returns FALSE.
.PP
See also setItemVisible().
.SH "int QMenuData::itemParameter ( int id ) const"
Returns the parameter of the activation signal of item \fIid\fR.
.PP
If no parameter has been specified for this item with setItemParameter(), the value defaults to \fIid\fR.
.PP
See also connectItem(), disconnectItem(), and setItemParameter().
.SH "void QMenuData::menuContentsChanged ()\fC [virtual protected]\fR"
Virtual function; notifies subclasses that one or more items have been inserted or removed.
.PP
Reimplemented in QMenuBar.
.SH "void QMenuData::menuDelPopup ( QPopupMenu * )\fC [virtual protected]\fR"
Virtual function; notifies subclasses that a popup menu item has been removed.
.SH "void QMenuData::menuInsPopup ( QPopupMenu * )\fC [virtual protected]\fR"
Virtual function; notifies subclasses that a popup menu item has been inserted.
.SH "void QMenuData::menuStateChanged ()\fC [virtual protected]\fR"
Virtual function; notifies subclasses that one or more items have changed state (enabled/disabled or checked/unchecked).
.PP
Reimplemented in QMenuBar.
.SH "QPixmap * QMenuData::pixmap ( int id ) const"
Returns the pixmap that has been set for menu item \fIid\fR, or 0 if no pixmap has been set.
.PP
See also changeItem(), text(), and iconSet().
.SH "void QMenuData::removeItem ( int id )"
Removes the menu item that has the identifier \fIid\fR.
.PP
See also removeItemAt() and clear().
.PP
Example: chart/chartform.cpp.
.SH "void QMenuData::removeItemAt ( int index )"
Removes the menu item at position \fIindex\fR.
.PP
See also removeItem() and clear().
.SH "void QMenuData::setAccel ( const QKeySequence & key, int id )"
Sets the accelerator key for the menu item \fIid\fR to \fIkey\fR.
.PP
An accelerator key consists of a key code and a combination of the modifiers \fCSHIFT\fR, \fCCTRL\fR, \fCALT\fR or \fCUNICODE_ACCEL\fR (OR'ed or added). The header file qnamespace.h contains a list of key codes.
.PP
Defining an accelerator key produces a text that is added to the menu item; for instance, \fCCTRL\fR + \fCKey_O\fR produces "Ctrl+O". The text is formatted differently for different platforms.
.PP
Note that keyboard accelerators in Qt are not application-global, instead they are bound to a certain top-level window. For example, accelerators in QPopupMenu items only work for menus that are associated with a certain window. This is true for popup menus that live in a menu bar since their accelerators will then be installed in the menu bar itself. This also applies to stand-alone popup menus that have a top-level widget in their parentWidget() chain. The menu will then install its accelerator object on that top-level widget. For all other cases use an independent QAccel object.
.PP
Example:
.PP
.nf
.br
        QMenuBar *mainMenu = new QMenuBar;
.br
        QPopupMenu *fileMenu = new QPopupMenu;       // file sub menu
.br
        fileMenu->insertItem( "Open Document", 67 ); // add "Open" item
.br
        fileMenu->setAccel( CTRL + Key_O, 67 );      // Ctrl+O to open
.br
        fileMenu->insertItem( "Quit", 69 );          // add "Quit" item
.br
        fileMenu->setAccel( CTRL + ALT + Key_Delete, 69 ); // add Alt+Del to quit
.br
        mainMenu->insertItem( "File", fileMenu );    // add the file menu
.br
.fi
.PP
If you need to translate accelerators, use tr() with a string:
.PP
.nf
.br
        fileMenu->setAccel( tr("Ctrl+O"), 67 );
.br
.fi
.PP
You can also specify the accelerator in the insertItem() function. You may prefer to use QAction to associate accelerators with menu items.
.PP
See also accel(), insertItem(), QAccel, and QAction.
.PP
Example: menu/menu.cpp.
.SH "void QMenuData::setId ( int index, int id )\fC [virtual]\fR"
Sets the menu identifier of the item at \fIindex\fR to \fIid\fR.
.PP
If \fIindex\fR is out of range, the operation is ignored.
.PP
See also idAt().
.SH "void QMenuData::setItemChecked ( int id, bool check )"
If \fIcheck\fR is TRUE, checks the menu item with id \fIid\fR; otherwise unchecks the menu item with id \fIid\fR. Calls QPopupMenu::setCheckable( TRUE ) if necessary.
.PP
See also isItemChecked().
.PP
Examples:
.)l canvas/canvas.cpp, grapher/grapher.cpp, mdi/application.cpp, menu/menu.cpp, progress/progress.cpp, scrollview/scrollview.cpp, and showimg/showimg.cpp.
.SH "void QMenuData::setItemEnabled ( int id, bool enable )"
If \fIenable\fR is TRUE, enables the menu item with identifier \fIid\fR; otherwise disables the menu item with identifier \fIid\fR.
.PP
See also isItemEnabled().
.PP
Examples:
.)l mdi/application.cpp, menu/menu.cpp, progress/progress.cpp, and showimg/showimg.cpp.
.SH "bool QMenuData::setItemParameter ( int id, int param )"
Sets the parameter of the activation signal of item \fIid\fR to \fIparam\fR.
.PP
If any receiver takes an integer parameter, this value is passed.
.PP
See also connectItem(), disconnectItem(), and itemParameter().
.PP
Example: mdi/application.cpp.
.SH "void QMenuData::setItemVisible ( int id, bool visible )"
If \fIvisible\fR is TRUE, shows the menu item with id \fIid\fR; otherwise hides the menu item with id \fIid\fR.
.PP
See also isItemVisible() and isItemEnabled().
.SH "void QMenuData::setWhatsThis ( int id, const QString & text )"
Sets \fItext\fR as What's This help for the menu item with identifier \fIid\fR.
.PP
See also whatsThis().
.PP
Examples:
.)l application/application.cpp, helpsystem/mainwindow.cpp, and mdi/application.cpp.
.SH "QString QMenuData::text ( int id ) const"
Returns the text that has been set for menu item \fIid\fR, or QString::null if no text has been set.
.PP
See also changeItem(), pixmap(), and iconSet().
.PP
Examples:
.)l qdir/qdir.cpp and showimg/showimg.cpp.
.SH "void QMenuData::updateItem ( int id )\fC [virtual]\fR"
Virtual function; notifies subclasses about an item with \fIid\fR that has been changed.
.PP
Reimplemented in QPopupMenu.
.SH "QString QMenuData::whatsThis ( int id ) const"
Returns the What's This help text for the item with identifier \fIid\fR or QString::null if no text has yet been defined.
.PP
See also setWhatsThis().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qmenudata.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qmenudata.3qt) and the Qt
version (3.3.8).
