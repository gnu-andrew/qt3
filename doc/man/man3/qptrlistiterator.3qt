'\" t
.TH QPtrListIterator 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QPtrListIterator \- Iterator for QPtrList collections
.SH SYNOPSIS
\fC#include <qptrlist.h>\fR
.PP
Inherited by QObjectListIterator and QStrListIterator.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQPtrListIterator\fR ( const QPtrList<type> & list )"
.br
.ti -1c
.BI "\fB~QPtrListIterator\fR ()"
.br
.ti -1c
.BI "uint \fBcount\fR () const"
.br
.ti -1c
.BI "bool \fBisEmpty\fR () const"
.br
.ti -1c
.BI "bool \fBatFirst\fR () const"
.br
.ti -1c
.BI "bool \fBatLast\fR () const"
.br
.ti -1c
.BI "type * \fBtoFirst\fR ()"
.br
.ti -1c
.BI "type * \fBtoLast\fR ()"
.br
.ti -1c
.BI "\fBoperator type *\fR () const"
.br
.ti -1c
.BI "type * \fBoperator*\fR ()"
.br
.ti -1c
.BI "type * \fBcurrent\fR () const"
.br
.ti -1c
.BI "type * \fBoperator()\fR ()"
.br
.ti -1c
.BI "type * \fBoperator++\fR ()"
.br
.ti -1c
.BI "type * \fBoperator+=\fR ( uint jump )"
.br
.ti -1c
.BI "type * \fBoperator--\fR ()"
.br
.ti -1c
.BI "type * \fBoperator-=\fR ( uint jump )"
.br
.ti -1c
.BI "QPtrListIterator<type> & \fBoperator=\fR ( const QPtrListIterator<type> & it )"
.br
.in -1c
.SH DESCRIPTION
The QPtrListIterator class provides an iterator for QPtrList collections.
.PP
Define a template instance QPtrListIterator<X> to create a list iterator that operates on QPtrList<X> (list of X*).
.PP
The following example is similar to the example in the QPtrList class documentation, but it uses QPtrListIterator. The class Employee is defined there.
.PP
.nf
.br
    QPtrList<Employee> list;
.br
.br
    list.append( new Employee("John", "Doe", 50000) );
.br
    list.append( new Employee("Jane", "Williams", 80000) );
.br
    list.append( new Employee("Tom", "Jones", 60000) );
.br
.br
    QPtrListIterator<Employee> it( list );
.br
    Employee *employee;
.br
    while ( (employee = it.current()) != 0 ) {
.br
        ++it;
.br
        cout << employee->surname().latin1() << ", " <<
.br
                employee->forename().latin1() << " earns " <<
.br
                employee->salary() << endl;
.br
    }
.br
.fi
.PP
The output is
.PP
.nf
.br
    Doe, John earns 50000
.br
    Williams, Jane earns 80000
.br
    Jones, Tom earns 60000
.br
.fi
.PP
Using a list iterator is a more robust way of traversing the list than using the QPtrList member functions first(), next(), current(), etc., as many iterators can traverse the same list independently.
.PP
An iterator has its own current list item and can get the next and previous list items. It doesn't modify the list in any way.
.PP
When an item is removed from the list, all iterators that point to that item are updated to point to QPtrList::current() instead to avoid dangling references.
.PP
See also QPtrList, Collection Classes, and Non-GUI Classes.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QPtrListIterator::QPtrListIterator ( const QPtrList<type> & list )"
Constructs an iterator for \fIlist\fR. The current iterator item is set to point on the first item in the \fIlist\fR.
.SH "QPtrListIterator::~QPtrListIterator ()"
Destroys the iterator.
.SH "bool QPtrListIterator::atFirst () const"
Returns TRUE if the current iterator item is the first list item; otherwise returns FALSE.
.PP
See also toFirst() and atLast().
.SH "bool QPtrListIterator::atLast () const"
Returns TRUE if the current iterator item is the last list item; otherwise returns FALSE.
.PP
See also toLast() and atFirst().
.SH "uint QPtrListIterator::count () const"
Returns the number of items in the list this iterator operates on.
.PP
See also isEmpty().
.PP
Example: customlayout/card.cpp.
.SH "type * QPtrListIterator::current () const"
Returns a pointer to the current iterator item. If the iterator is positioned before the first item in the list or after the last item in the list, 0 is returned.
.PP
Examples:
.)l canvas/canvas.cpp, customlayout/card.cpp, and customlayout/flow.cpp.
.SH "bool QPtrListIterator::isEmpty () const"
Returns TRUE if the list is empty; otherwise returns FALSE.
.PP
See also count().
.SH "QPtrListIterator::operator type * () const"
Cast operator. Returns a pointer to the current iterator item. Same as current().
.SH "type * QPtrListIterator::operator() ()"
Makes the succeeding item current and returns the original current item.
.PP
If the current iterator item was the last item in the list or if it was 0, 0 is returned.
.SH "type * QPtrListIterator::operator* ()"
Asterisk operator. Returns a pointer to the current iterator item. Same as current().
.SH "type * QPtrListIterator::operator++ ()"
Prefix ++ makes the succeeding item current and returns the new current item.
.PP
If the current iterator item was the last item in the list or if it was 0, 0 is returned.
.SH "type * QPtrListIterator::operator+= ( uint jump )"
Sets the current item to the item \fIjump\fR positions after the current item and returns a pointer to that item.
.PP
If that item is beyond the last item or if the list is empty, it sets the current item to 0 and returns 0
.SH "type * QPtrListIterator::operator-- ()"
Prefix - makes the preceding item current and returns the new current item.
.PP
If the current iterator item was the first item in the list or if it was 0, 0 is returned.
.SH "type * QPtrListIterator::operator-= ( uint jump )"
Returns the item \fIjump\fR positions before the current item or 0 if it is beyond the first item. Makes this the current item.
.SH "QPtrListIterator<type> & QPtrListIterator::operator= ( const QPtrListIterator<type> & it )"
Assignment. Makes a copy of the iterator \fIit\fR and returns a reference to this iterator.
.SH "type * QPtrListIterator::toFirst ()"
Sets the current iterator item to point to the first list item and returns a pointer to the item. Sets the current item to 0 and returns 0 if the list is empty.
.PP
See also toLast() and atFirst().
.SH "type * QPtrListIterator::toLast ()"
Sets the current iterator item to point to the last list item and returns a pointer to the item. Sets the current item to 0 and returns 0 if the list is empty.
.PP
See also toFirst() and atLast().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qptrlistiterator.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qptrlistiterator.3qt) and the Qt
version (3.3.8).
