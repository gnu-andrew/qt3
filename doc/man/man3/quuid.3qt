'\" t
.TH QUuid 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QUuid \- Defines a Universally Unique Identifier (UUID)
.SH SYNOPSIS
All the functions in this class are reentrant when Qt is built with thread support.</p>
.PP
\fC#include <quuid.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "enum \fBVariant\fR { VarUnknown = -1, NCS = 0, DCE = 2, Microsoft = 6, Reserved = 7 }"
.br
.ti -1c
.BI "enum \fBVersion\fR { VerUnknown = -1, Time = 1, EmbeddedPOSIX = 2, Name = 3, Random = 4 }"
.br
.ti -1c
.BI "\fBQUuid\fR ()"
.br
.ti -1c
.BI "\fBQUuid\fR ( uint l, ushort w1, ushort w2, uchar b1, uchar b2, uchar b3, uchar b4, uchar b5, uchar b6, uchar b7, uchar b8 )"
.br
.ti -1c
.BI "\fBQUuid\fR ( const QUuid & orig )"
.br
.ti -1c
.BI "\fBQUuid\fR ( const QString & text )"
.br
.ti -1c
.BI "QString \fBtoString\fR () const"
.br
.ti -1c
.BI "\fBoperator QString\fR () const"
.br
.ti -1c
.BI "bool \fBisNull\fR () const"
.br
.ti -1c
.BI "QUuid & \fBoperator=\fR ( const QUuid & uuid )"
.br
.ti -1c
.BI "bool \fBoperator==\fR ( const QUuid & other ) const"
.br
.ti -1c
.BI "bool \fBoperator!=\fR ( const QUuid & other ) const"
.br
.ti -1c
.BI "bool \fBoperator<\fR ( const QUuid & other ) const"
.br
.ti -1c
.BI "bool \fBoperator>\fR ( const QUuid & other ) const"
.br
.ti -1c
.BI "QUuid::Variant \fBvariant\fR () const"
.br
.ti -1c
.BI "QUuid::Version \fBversion\fR () const"
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "QUuid \fBcreateUuid\fR ()"
.br
.in -1c
.SH RELATED FUNCTION DOCUMENTATION
.in +1c
.ti -1c
.BI "QDataStream & \fBoperator<<\fR ( QDataStream & s, const QUuid & id )"
.br
.ti -1c
.BI "QDataStream & \fBoperator>>\fR ( QDataStream & s, QUuid & id )"
.br
.in -1c
.SH DESCRIPTION
The QUuid class defines a Universally Unique Identifier (UUID).
.PP
For objects or declarations that must be uniquely identified, UUIDs (also known as GUIDs) are widely used in order to assign a fixed and easy to compare value to the object or declaration. The 128-bit value of a UUID is generated by an algorithm that guarantees that the value is unique.
.PP
In Qt, UUIDs are wrapped by the QUuid struct which provides convenience functions for handling UUIDs. Most platforms provide a tool to generate new UUIDs, for example, uuidgen and guidgen.
.PP
UUIDs generated by QUuid, are based on the Random version of the DCE (Distributed Computing Environment) standard.
.PP
UUIDs can be constructed from numeric values or from strings, or using the static createUuid() function. They can be converted to a string with toString(). UUIDs have a variant() and a version(), and null UUIDs return TRUE from isNull().
.SS "Member Type Documentation"
.SH "QUuid::Variant"
This enum defines the variant of the UUID, which is the scheme which defines the layout of the 128-bits value.
.TP
\fCQUuid::VarUnknown\fR - Variant is unknown
.TP
\fCQUuid::NCS\fR - Reserved for NCS (Network Computing System) backward compatibility
.TP
\fCQUuid::DCE\fR - Distributed Computing Environment, the scheme used by QUuid
.TP
\fCQUuid::Microsoft\fR - Reserved for Microsoft backward compatibility (GUID)
.TP
\fCQUuid::Reserved\fR - Reserved for future definition
.SH "QUuid::Version"
This enum defines the version of the UUID.
.TP
\fCQUuid::VerUnknown\fR - Version is unknown
.TP
\fCQUuid::Time\fR - Time-based, by using timestamp, clock sequence, and MAC network card address (if available) for the node sections
.TP
\fCQUuid::EmbeddedPOSIX\fR - DCE Security version, with embedded POSIX UUIDs
.TP
\fCQUuid::Name\fR - Name-based, by using values from a name for all sections
.TP
\fCQUuid::Random\fR - Random-based, by using random numbers for all sections
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QUuid::QUuid ()"
Creates the null UUID {00000000-0000-0000-0000-000000000000}.
.SH "QUuid::QUuid ( uint l, ushort w1, ushort w2, uchar b1, uchar b2, uchar b3, uchar b4, uchar b5, uchar b6, uchar b7, uchar b8 )"
Creates a UUID with the value specified by the parameters, \fIl\fR, \fIw1\fR, \fIw2\fR, \fIb1\fR, \fIb2\fR, \fIb3\fR, \fIb4\fR, \fIb5\fR, \fIb6\fR, \fIb7\fR, \fIb8\fR.
.PP
Example:
.PP
.nf
.br
    // {67C8770B-44F1-410A-AB9A-F9B5446F13EE}
.br
    QUuid IID_MyInterface( 0x67c8770b, 0x44f1, 0x410a, 0xab, 0x9a, 0xf9, 0xb5, 0x44, 0x6f, 0x13, 0xee )
.br
.fi
.SH "QUuid::QUuid ( const QUuid & orig )"
Creates a copy of the QUuid \fIorig\fR.
.SH "QUuid::QUuid ( const QString & text )"
Creates a QUuid object from the string \fItext\fR. The function can only convert a string in the format {HHHHHHHH-HHHH-HHHH-HHHH-HHHHHHHHHHHH} (where 'H' stands for a hex digit). If the conversion fails a null UUID is created.
.SH "QUuid QUuid::createUuid ()\fC [static]\fR"
Returns a new UUID of DCE variant, and Random type. The UUIDs generated are based on the platform specific pseudo-random generator, which is usually not a cryptographic-quality random number generator. Therefore, a UUID is not guaranteed to be unique cross application instances.
.PP
On Windows, the new UUID is extremely likely to be unique on the same or any other system, networked or not.
.PP
See also variant() and version().
.SH "bool QUuid::isNull () const"
Returns TRUE if this is the null UUID {00000000-0000-0000-0000-000000000000}; otherwise returns FALSE.
.SH "QUuid::operator QString () const"
Returns the string representation of the uuid.
.PP
See also toString().
.SH "bool QUuid::operator!= ( const QUuid & other ) const"
Returns TRUE if this QUuid and the \fIother\fR QUuid are different; otherwise returns FALSE.
.SH "bool QUuid::operator< ( const QUuid & other ) const"
Returns TRUE if this QUuid is of the same variant, and lexicographically before the \fIother\fR QUuid; otherwise returns FALSE.
.PP
See also variant().
.SH "QUuid & QUuid::operator= ( const QUuid & uuid )"
Assigns the value of \fIuuid\fR to this QUuid object.
.SH "bool QUuid::operator== ( const QUuid & other ) const"
Returns TRUE if this QUuid and the \fIother\fR QUuid are identical; otherwise returns FALSE.
.SH "bool QUuid::operator> ( const QUuid & other ) const"
Returns TRUE if this QUuid is of the same variant, and lexicographically after the \fIother\fR QUuid; otherwise returns FALSE.
.PP
See also variant().
.SH "QString QUuid::toString () const"
QString QUuid::toString() const
.PP
Returns the string representation of the uuid.
.SH "QUuid::Variant QUuid::variant () const"
Returns the variant of the UUID. The null UUID is considered to be of an unknown variant.
.PP
See also version().
.SH "QUuid::Version QUuid::version () const"
Returns the version of the UUID, if the UUID is of the DCE variant; otherwise returns VerUnknown.
.PP
See also variant().
.SH RELATED FUNCTION DOCUMENTATION
.SH "QDataStream & operator<< ( QDataStream & s, const QUuid & id )"
Writes the uuid \fIid\fR to the datastream \fIs\fR.
.SH "QDataStream & operator>> ( QDataStream & s, QUuid & id )"
Reads uuid from from the stream \fIs\fR into \fIid\fR.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/quuid.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (quuid.3qt) and the Qt
version (3.3.8).
