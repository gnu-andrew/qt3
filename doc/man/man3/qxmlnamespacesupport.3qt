'\" t
.TH QXmlNamespaceSupport 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QXmlNamespaceSupport \- Helper class for XML readers which want to include namespace support
.SH SYNOPSIS
All the functions in this class are reentrant when Qt is built with thread support.</p>
.PP
\fC#include <qxml.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQXmlNamespaceSupport\fR ()"
.br
.ti -1c
.BI "\fB~QXmlNamespaceSupport\fR ()"
.br
.ti -1c
.BI "void \fBsetPrefix\fR ( const QString & pre, const QString & uri )"
.br
.ti -1c
.BI "QString \fBprefix\fR ( const QString & uri ) const"
.br
.ti -1c
.BI "QString \fBuri\fR ( const QString & prefix ) const"
.br
.ti -1c
.BI "void \fBsplitName\fR ( const QString & qname, QString & prefix, QString & localname ) const"
.br
.ti -1c
.BI "void \fBprocessName\fR ( const QString & qname, bool isAttribute, QString & nsuri, QString & localname ) const"
.br
.ti -1c
.BI "QStringList \fBprefixes\fR () const"
.br
.ti -1c
.BI "QStringList \fBprefixes\fR ( const QString & uri ) const"
.br
.ti -1c
.BI "void \fBpushContext\fR ()"
.br
.ti -1c
.BI "void \fBpopContext\fR ()"
.br
.ti -1c
.BI "void \fBreset\fR ()"
.br
.in -1c
.SH DESCRIPTION
The QXmlNamespaceSupport class is a helper class for XML readers which want to include namespace support.
.PP
You can set the prefix for the current namespace with setPrefix(), and get the list of current prefixes (or those for a given URI) with prefixes(). The namespace URI is available from uri(). Use pushContext() to start a new namespace context, and popContext() to return to the previous namespace context. Use splitName() or processName() to split a name into its prefix and local name.
.PP
See also the namespace description.
.PP
See also XML.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QXmlNamespaceSupport::QXmlNamespaceSupport ()"
Constructs a QXmlNamespaceSupport.
.SH "QXmlNamespaceSupport::~QXmlNamespaceSupport ()"
Destroys a QXmlNamespaceSupport.
.SH "void QXmlNamespaceSupport::popContext ()"
Reverts to the previous namespace context.
.PP
Normally, you should pop the context at the end of each XML element. After popping the context, all namespace prefix mappings that were previously in force are restored.
.PP
See also pushContext().
.SH "QString QXmlNamespaceSupport::prefix ( const QString & uri ) const"
Returns one of the prefixes mapped to the namespace URI \fIuri\fR.
.PP
If more than one prefix is currently mapped to the same URI, this function makes an arbitrary selection; if you want all of the prefixes, use prefixes() instead.
.PP
Note: to check for a default prefix, use the uri() function with an argument of "".
.SH "QStringList QXmlNamespaceSupport::prefixes () const"
Returns a list of all the prefixes currently declared.
.PP
If there is a default prefix, this function does not return it in the list; check for the default prefix using uri() with an argument of "".
.PP
Note that if you want to iterate over the list, you should iterate over a copy, e.g.
.PP
.nf
.br
    QStringList list = myXmlNamespaceSupport.prefixes();
.br
    QStringList::iterator it = list.begin();
.br
    while ( it != list.end() ) {
.br
        myProcessing( *it );
.br
        ++it;
.br
    }
.br
.fi
.SH "QStringList QXmlNamespaceSupport::prefixes ( const QString & uri ) const"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Returns a list of all prefixes currently declared for the namespace URI \fIuri\fR.
.PP
The "xml:" prefix is included. If you only want one prefix that is mapped to the namespace URI, and you don't care which one you get, use the prefix() function instead.
.PP
Note: the empty (default) prefix is never included in this list; to check for the presence of a default namespace, use uri() with an argument of "".
.PP
Note that if you want to iterate over the list, you should iterate over a copy, e.g.
.PP
.nf
.br
    QStringList list = myXmlNamespaceSupport.prefixes( "" );
.br
    QStringList::Iterator it = list.begin();
.br
    while( it != list.end() ) {
.br
        myProcessing( *it );
.br
        ++it;
.br
    }
.br
.fi
.SH "void QXmlNamespaceSupport::processName ( const QString & qname, bool isAttribute, QString & nsuri, QString & localname ) const"
Processes a raw XML 1.0 name in the current context by removing the prefix and looking it up among the prefixes currently declared.
.PP
\fIqname\fR is the raw XML 1.0 name to be processed. \fIisAttribute\fR is TRUE if the name is an attribute name.
.PP
This function stores the namespace URI in \fInsuri\fR (which will be set to QString::null if the raw name has an undeclared prefix), and stores the local name (without prefix) in \fIlocalname\fR (which will be set to QString::null if no namespace is in use).
.PP
Note that attribute names are processed differently than element names: an unprefixed element name gets the default namespace (if any), while an unprefixed element name does not.
.SH "void QXmlNamespaceSupport::pushContext ()"
Starts a new namespace context.
.PP
Normally, you should push a new context at the beginning of each XML element: the new context automatically inherits the declarations of its parent context, and it also keeps track of which declarations were made within this context.
.PP
See also popContext().
.SH "void QXmlNamespaceSupport::reset ()"
Resets this namespace support object ready for reuse.
.SH "void QXmlNamespaceSupport::setPrefix ( const QString & pre, const QString & uri )"
This function declares a prefix \fIpre\fR in the current namespace context to be the namespace URI \fIuri\fR. The prefix remains in force until this context is popped, unless it is shadowed in a descendant context.
.PP
Note that there is an asymmetry in this library. prefix() does not return the default "" prefix, even if you have declared one; to check for a default prefix, you must look it up explicitly using uri(). This asymmetry exists to make it easier to look up prefixes for attribute names, where the default prefix is not allowed.
.SH "void QXmlNamespaceSupport::splitName ( const QString & qname, QString & prefix, QString & localname ) const"
Splits the name \fIqname\fR at the ':' and returns the prefix in \fIprefix\fR and the local name in \fIlocalname\fR.
.PP
See also processName().
.SH "QString QXmlNamespaceSupport::uri ( const QString & prefix ) const"
Looks up the prefix \fIprefix\fR in the current context and returns
the currently-mapped namespace URI. Use the empty string ("") for
the default namespace.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qxmlnamespacesupport.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qxmlnamespacesupport.3qt) and the Qt
version (3.3.8).
