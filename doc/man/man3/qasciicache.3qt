'\" t
.TH QAsciiCache 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QAsciiCache \- Template class that provides a cache based on char* keys
.SH SYNOPSIS
\fC#include <qasciicache.h>\fR
.PP
Inherits QPtrCollection.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQAsciiCache\fR ( int maxCost = 100, int size = 17, bool caseSensitive = TRUE, bool copyKeys = TRUE )"
.br
.ti -1c
.BI "\fB~QAsciiCache\fR ()"
.br
.ti -1c
.BI "int \fBmaxCost\fR () const"
.br
.ti -1c
.BI "int \fBtotalCost\fR () const"
.br
.ti -1c
.BI "void \fBsetMaxCost\fR ( int m )"
.br
.ti -1c
.BI "virtual uint \fBcount\fR () const"
.br
.ti -1c
.BI "uint \fBsize\fR () const"
.br
.ti -1c
.BI "bool \fBisEmpty\fR () const"
.br
.ti -1c
.BI "virtual void \fBclear\fR ()"
.br
.ti -1c
.BI "bool \fBinsert\fR ( const char * k, const type * d, int c = 1, int p = 0 )"
.br
.ti -1c
.BI "bool \fBremove\fR ( const char * k )"
.br
.ti -1c
.BI "type * \fBtake\fR ( const char * k )"
.br
.ti -1c
.BI "type * \fBfind\fR ( const char * k, bool ref = TRUE ) const"
.br
.ti -1c
.BI "type * \fBoperator[]\fR ( const char * k ) const"
.br
.ti -1c
.BI "void \fBstatistics\fR () const"
.br
.in -1c
.SH DESCRIPTION
The QAsciiCache class is a template class that provides a cache based on char* keys.
.PP
QAsciiCache is implemented as a template class. Define a template instance QAsciiCache<X> to create a cache that operates on pointers to X (X*).
.PP
A cache is a least recently used (LRU) list of cache items. The cache items are accessed via \fCchar*\fR keys. For Unicode keys use the QCache template instead, which uses QString keys. A QCache has the same performace as a QAsciiCache.
.PP
Each cache item has a cost. The sum of item costs, totalCost(), will not exceed the maximum cache cost, maxCost(). If inserting a new item would cause the total cost to exceed the maximum cost, the least recently used items in the cache are removed.
.PP
Apart from insert(), by far the most important function is find() (which also exists as operator[]()). This function looks up an item, returns it, and by default marks it as being the most recently used item.
.PP
There are also methods to remove() or take() an object from the cache. Calling setAutoDelete(TRUE) tells the cache to delete items that are removed. The default is to not delete items when then are removed (i.e., remove() and take() are equivalent).
.PP
When inserting an item into the cache, only the pointer is copied, not the item itself. This is called a shallow copy. It is possible to make the cache copy all of the item's data (known as a deep copy) when an item is inserted. insert() calls the virtual function QPtrCollection::newItem() for the item to be inserted. Inherit a cache and reimplement newItem() if you want deep copies.
.PP
When removing a cache item the virtual function QPtrCollection::deleteItem() is called. Its default implementation in QAsciiCache is to delete the item if auto-deletion is enabled.
.PP
There is a QAsciiCacheIterator which may be used to traverse the items in the cache in arbitrary order.
.PP
See also QAsciiCacheIterator, QCache, QIntCache, Collection Classes, and Non-GUI Classes.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QAsciiCache::QAsciiCache ( int maxCost = 100, int size = 17, bool caseSensitive = TRUE, bool copyKeys = TRUE )"
Constructs a cache whose contents will never have a total cost greater than \fImaxCost\fR and which is expected to contain less than \fIsize\fR items.
.PP
\fIsize\fR is actually the size of an internal hash array; it's usually best to make it prime and at least 50% bigger than the largest expected number of items in the cache.
.PP
Each inserted item has an associated cost. When inserting a new item, if the total cost of all items in the cache will exceed \fImaxCost\fR, the cache will start throwing out the older (least recently used) items until there is enough room for the new item to be inserted.
.PP
If \fIcaseSensitive\fR is TRUE (the default), the cache keys are case sensitive; if it is FALSE, they are case-insensitive. Case-insensitive comparison only affects the 26 letters in US-ASCII. If \fIcopyKeys\fR is TRUE (the default), QAsciiCache makes a copy of the cache keys, otherwise it copies just the const char * pointer - slightly faster if you can guarantee that the keys will never change, but very risky.
.SH "QAsciiCache::~QAsciiCache ()"
Removes all items from the cache and destroys it. All iterators that access this cache will be reset.
.SH "void QAsciiCache::clear ()\fC [virtual]\fR"
Removes all items from the cache, and deletes them if auto-deletion has been enabled.
.PP
All cache iterators that operate on this cache are reset.
.PP
See also remove() and take().
.PP
Reimplemented from QPtrCollection.
.SH "uint QAsciiCache::count () const\fC [virtual]\fR"
Returns the number of items in the cache.
.PP
See also totalCost() and size().
.PP
Reimplemented from QPtrCollection.
.SH "type * QAsciiCache::find ( const char * k, bool ref = TRUE ) const"
Returns the item with key \fIk\fR, or 0 if the key does not exist in the cache. If \fIref\fR is TRUE (the default), the item is moved to the front of the least recently used list.
.PP
If there are two or more items with equal keys, the one that was inserted last is returned.
.SH "bool QAsciiCache::insert ( const char * k, const type * d, int c = 1, int p = 0 )"
Inserts the item \fId\fR into the cache using key \fIk\fR, and with an associated cost of \fIc\fR. Returns TRUE if the item is successfully inserted. Returns FALSE if the item is not inserted, for example, if the cost of the item exceeds maxCost().
.PP
The cache's size is limited, and if the total cost is too high, QAsciiCache will remove old, least recently used items until there is room for this new item.
.PP
Items with duplicate keys can be inserted.
.PP
The parameter \fIp\fR is internal and should be left at the default value (0).
.PP
\fBWarning:\fR If this function returns FALSE, you must delete \fId\fR yourself. Additionally, be very careful about using \fId\fR after calling this function, because any other insertions into the cache, from anywhere in the application or within Qt itself, could cause the object to be discarded from the cache and the pointer to become invalid.
.SH "bool QAsciiCache::isEmpty () const"
Returns TRUE if the cache is empty; otherwise returns FALSE.
.SH "int QAsciiCache::maxCost () const"
Returns the maximum allowed total cost of the cache.
.PP
See also setMaxCost() and totalCost().
.SH "type * QAsciiCache::operator[] ( const char * k ) const"
Returns the item with key \fIk\fR, or 0 if \fIk\fR does not exist in the cache, and moves the item to the front of the least recently used list.
.PP
If there are two or more items with equal keys, the one that was inserted last is returned.
.PP
This is the same as find( k, TRUE ).
.PP
See also find().
.SH "bool QAsciiCache::remove ( const char * k )"
Removes the item with key \fIk\fR and returns TRUE if the item was present in the cache; otherwise returns FALSE.
.PP
The item is deleted if auto-deletion has been enabled, i.e., if you have called setAutoDelete(TRUE).
.PP
If there are two or more items with equal keys, the one that was inserted last is removed.
.PP
All iterators that refer to the removed item are set to point to the next item in the cache's traversal order.
.PP
See also take() and clear().
.SH "void QAsciiCache::setMaxCost ( int m )"
Sets the maximum allowed total cost of the cache to \fIm\fR. If the current total cost is greater than \fIm\fR, some items are removed immediately.
.PP
See also maxCost() and totalCost().
.SH "uint QAsciiCache::size () const"
Returns the size of the hash array used to implement the cache. This should be a bit bigger than count() is likely to be.
.SH "void QAsciiCache::statistics () const"
A debug-only utility function. Prints out cache usage, hit/miss, and distribution information using qDebug(). This function does nothing in the release library.
.SH "type * QAsciiCache::take ( const char * k )"
Takes the item associated with \fIk\fR out of the cache without deleting it and returns a pointer to the item taken out, or 0 if the key does not exist in the cache.
.PP
If there are two or more items with equal keys, the one that was inserted last is taken.
.PP
All iterators that refer to the taken item are set to point to the next item in the cache's traversal order.
.PP
See also remove() and clear().
.SH "int QAsciiCache::totalCost () const"
Returns the total cost of the items in the cache. This is an integer in the range 0 to maxCost().
.PP
See also setMaxCost().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qasciicache.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qasciicache.3qt) and the Qt
version (3.3.8).
