'\" t
.TH QWidgetFactory 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QWidgetFactory \- For the dynamic creation of widgets from Qt Designer .ui files
.SH SYNOPSIS
\fC#include <qwidgetfactory.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQWidgetFactory\fR ()"
.br
.ti -1c
.BI "virtual \fB~QWidgetFactory\fR ()"
.br
.ti -1c
.BI "virtual QWidget * \fBcreateWidget\fR ( const QString & className, QWidget * parent, const char * name ) const"
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "QWidget * \fBcreate\fR ( const QString & uiFile, QObject * connector = 0, QWidget * parent = 0, const char * name = 0 )"
.br
.ti -1c
.BI "QWidget * \fBcreate\fR ( QIODevice * dev, QObject * connector = 0, QWidget * parent = 0, const char * name = 0 )"
.br
.ti -1c
.BI "void \fBaddWidgetFactory\fR ( QWidgetFactory * factory )"
.br
.ti -1c
.BI "void \fBloadImages\fR ( const QString & dir )"
.br
.ti -1c
.BI "QStringList \fBwidgets\fR ()"
.br
.ti -1c
.BI "bool \fBsupportsWidget\fR ( const QString & widget )"
.br
.in -1c
.SH DESCRIPTION
The QWidgetFactory class provides for the dynamic creation of widgets from Qt Designer .ui files.
.PP
This class basically offers two things:
.IP
.TP
Dynamically creating widgets from Qt Designer user interface description files. You can do this using the static function QWidgetFactory::create(). This function also performs signal and slot connections, tab ordering, etc., as defined in the .ui file, and returns the top-level widget in the .ui file. After creating the widget you can use QObject::child() and QObject::queryList() to access child widgets of this returned widget.
.IP
.TP
Adding additional widget factories to be able to create custom widgets. See createWidget() for details.
.IP
.PP
This class is not included in the Qt library itself. To use it you must link against \fClibqui.so\fR (Unix) or \fCqui.lib\fR (Windows), which is built into \fCINSTALL/lib\fR if you built \fIQt Designer\fR (\fCINSTALL\fR is the directory where Qt is installed ).
.PP
If you create a QMainWindow using a QWidgetFactory, be aware that it already has a central widget. Therefore, you need to delete this one before setting another one.
.PP
See the "Creating Dynamic Dialogs from .ui Files" section of the Qt Designer manual for an example. See also the QWidgetPlugin class and the Plugins documentation.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QWidgetFactory::QWidgetFactory ()"
Constructs a QWidgetFactory.
.SH "QWidgetFactory::~QWidgetFactory ()\fC [virtual]\fR"
Destructor.
.SH "void QWidgetFactory::addWidgetFactory ( QWidgetFactory * factory )\fC [static]\fR"
Installs a widget factory \fIfactory\fR, which normally contains additional widgets that can then be created using a QWidgetFactory. See createWidget() for further details.
.SH "QWidget * QWidgetFactory::create ( const QString & uiFile, QObject * connector = 0, QWidget * parent = 0, const char * name = 0 )\fC [static]\fR"
Loads the \fIQt Designer\fR user interface description file \fIuiFile\fR and returns the top-level widget in that description. \fIparent\fR and \fIname\fR are passed to the constructor of the top-level widget.
.PP
This function also performs signal and slot connections, tab ordering, etc., as described in the .ui file. In \fIQt Designer\fR it is possible to add custom slots to a form and connect to them. If you want these connections to be made, you must create a class derived from QObject, which implements all these slots. Then pass an instance of the object as \fIconnector\fR to this function. If you do this, the connections to the custom slots will be done using the \fIconnector\fR as slot.
.PP
If something fails, 0 is returned.
.PP
The ownership of the returned widget is passed to the caller.
.SH "QWidget * QWidgetFactory::create ( QIODevice * dev, QObject * connector = 0, QWidget * parent = 0, const char * name = 0 )\fC [static]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Loads the user interface description from device \fIdev\fR.
.SH "QWidget * QWidgetFactory::createWidget ( const QString & className, QWidget * parent, const char * name ) const\fC [virtual]\fR"
Creates a widget of the type \fIclassName\fR passing \fIparent\fR and \fIname\fR to its constructor.
.PP
If \fIclassName\fR is a widget in the Qt library, it is directly created by this function. If the widget isn't in the Qt library, each of the installed widget plugins is asked, in turn, to create the widget. As soon as a plugin says it can create the widget it is asked to do so. It may occur that none of the plugins can create the widget, in which case each installed widget factory is asked to create the widget (see addWidgetFactory()). If the widget cannot be created by any of these means, 0 is returned.
.PP
If you have a custom widget, and want it to be created using the widget factory, there are two approaches you can use:
.PP
<ol type=1>
.IP
.TP
Write a widget plugin. This allows you to use the widget in \fIQt Designer\fR and in this QWidgetFactory. See the widget plugin documentation for further details. (See the "Creating Custom Widgets with Plugins" section of the Qt Designer manual for an example.
.IP
.TP
Subclass QWidgetFactory. Then reimplement this function to create and return an instance of your custom widget if \fIclassName\fR equals the name of your widget, otherwise return 0. Then at the beginning of your program where you want to use the widget factory to create widgets do a:
.IP
.nf
.br
    QWidgetFactory::addWidgetFactory( new MyWidgetFactory );
.br
.fi
where MyWidgetFactory is your QWidgetFactory subclass.
.IP
.SH "void QWidgetFactory::loadImages ( const QString & dir )\fC [static]\fR"
If you use a pixmap collection (which is the default for new projects) rather than saving the pixmaps within the .ui XML file, you must load the pixmap collection. QWidgetFactory looks in the default QMimeSourceFactory for the pixmaps. Either add it there manually, or call this function and specify the directory where the images can be found, as \fIdir\fR. This is normally the directory called \fCimages\fR in the project's directory.
.SH "bool QWidgetFactory::supportsWidget ( const QString & widget )\fC [static]\fR"
Returns TRUE if the widget factory can create the specified \fIwidget\fR; otherwise returns FALSE.
.SH "QStringList QWidgetFactory::widgets ()\fC [static]\fR"
Returns the names of the widgets this factory can create. 

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qwidgetfactory.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qwidgetfactory.3qt) and the Qt
version (3.3.8).
