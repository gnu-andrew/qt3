'\" t
.TH QDate 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QDate \- Date functions
.SH SYNOPSIS
All the functions in this class are reentrant when Qt is built with thread support.</p>
.PP
\fC#include <qdatetime.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQDate\fR ()"
.br
.ti -1c
.BI "\fBQDate\fR ( int y, int m, int d )"
.br
.ti -1c
.BI "bool \fBisNull\fR () const"
.br
.ti -1c
.BI "bool \fBisValid\fR () const"
.br
.ti -1c
.BI "int \fByear\fR () const"
.br
.ti -1c
.BI "int \fBmonth\fR () const"
.br
.ti -1c
.BI "int \fBday\fR () const"
.br
.ti -1c
.BI "int \fBdayOfWeek\fR () const"
.br
.ti -1c
.BI "int \fBdayOfYear\fR () const"
.br
.ti -1c
.BI "int \fBdaysInMonth\fR () const"
.br
.ti -1c
.BI "int \fBdaysInYear\fR () const"
.br
.ti -1c
.BI "int \fBweekNumber\fR ( int * yearNumber = 0 ) const"
.br
.ti -1c
.BI "QString \fBtoString\fR ( Qt::DateFormat f = Qt::TextDate ) const"
.br
.ti -1c
.BI "QString \fBtoString\fR ( const QString & format ) const"
.br
.ti -1c
.BI "bool \fBsetYMD\fR ( int y, int m, int d )"
.br
.ti -1c
.BI "QDate \fBaddDays\fR ( int ndays ) const"
.br
.ti -1c
.BI "QDate \fBaddMonths\fR ( int nmonths ) const"
.br
.ti -1c
.BI "QDate \fBaddYears\fR ( int nyears ) const"
.br
.ti -1c
.BI "int \fBdaysTo\fR ( const QDate & d ) const"
.br
.ti -1c
.BI "bool \fBoperator==\fR ( const QDate & d ) const"
.br
.ti -1c
.BI "bool \fBoperator!=\fR ( const QDate & d ) const"
.br
.ti -1c
.BI "bool \fBoperator<\fR ( const QDate & d ) const"
.br
.ti -1c
.BI "bool \fBoperator<=\fR ( const QDate & d ) const"
.br
.ti -1c
.BI "bool \fBoperator>\fR ( const QDate & d ) const"
.br
.ti -1c
.BI "bool \fBoperator>=\fR ( const QDate & d ) const"
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "QString monthName ( int month )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "QString dayName ( int weekday )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "QString \fBshortMonthName\fR ( int month )"
.br
.ti -1c
.BI "QString \fBshortDayName\fR ( int weekday )"
.br
.ti -1c
.BI "QString \fBlongMonthName\fR ( int month )"
.br
.ti -1c
.BI "QString \fBlongDayName\fR ( int weekday )"
.br
.ti -1c
.BI "QDate \fBcurrentDate\fR ()"
.br
.ti -1c
.BI "QDate \fBcurrentDate\fR ( Qt::TimeSpec ts )"
.br
.ti -1c
.BI "QDate \fBfromString\fR ( const QString & s, Qt::DateFormat f = Qt::TextDate )"
.br
.ti -1c
.BI "bool \fBisValid\fR ( int y, int m, int d )"
.br
.ti -1c
.BI "bool \fBleapYear\fR ( int y )"
.br
.in -1c
.SH RELATED FUNCTION DOCUMENTATION
.in +1c
.ti -1c
.BI "QDataStream & \fBoperator<<\fR ( QDataStream & s, const QDate & d )"
.br
.ti -1c
.BI "QDataStream & \fBoperator>>\fR ( QDataStream & s, QDate & d )"
.br
.in -1c
.SH DESCRIPTION
The QDate class provides date functions.
.PP
A QDate object contains a calendar date, i.e. year, month, and day numbers, in the modern Western (Gregorian) calendar. It can read the current date from the system clock. It provides functions for comparing dates and for manipulating dates, e.g. by adding a number of days or months or years.
.PP
A QDate object is typically created either by giving the year, month and day numbers explicitly, or by using the static function currentDate(), which creates a QDate object containing the system clock's date. An explicit date can also be set using setYMD(). The fromString() function returns a QDate given a string and a date format which is used to interpret the date within the string.
.PP
The year(), month(), and day() functions provide access to the year, month, and day numbers. Also, dayOfWeek() and dayOfYear() functions are provided. The same information is provided in textual format by the toString(), shortDayName(), longDayName(), shortMonthName() and longMonthName() functions.
.PP
QDate provides a full set of operators to compare two QDate objects where smaller means earlier and larger means later.
.PP
You can increment (or decrement) a date by a given number of days using addDays(). Similarly you can use addMonths() and addYears(). The daysTo() function returns the number of days between two dates.
.PP
The daysInMonth() and daysInYear() functions return how many days there are in this date's month and year, respectively. The leapYear() function indicates whether this date is in a leap year.
.PP
Note that QDate should not be used for date calculations for dates prior to the introduction of the Gregorian calendar. This calendar was adopted by England from the 14<sup><small>th</small></sup> September 1752 (hence this is the earliest valid QDate), and subsequently by most other Western countries, until 1923.
.PP
The end of time is reached around the year 8000, by which time we expect Qt to be obsolete.
.PP
See also QTime, QDateTime, QDateEdit, QDateTimeEdit, and Time and Date.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QDate::QDate ()"
Constructs a null date. Null dates are invalid.
.PP
See also isNull() and isValid().
.SH "QDate::QDate ( int y, int m, int d )"
Constructs a date with year \fIy\fR, month \fIm\fR and day \fId\fR.
.PP
\fIy\fR must be in the range 1752..8000, \fIm\fR must be in the range 1..12, and \fId\fR must be in the range 1..31.
.PP
\fBWarning:\fR If \fIy\fR is in the range 0..99, it is interpreted as 1900..1999.
.PP
See also isValid().
.SH "QDate QDate::addDays ( int ndays ) const"
Returns a QDate object containing a date \fIndays\fR later than the date of this object (or earlier if \fIndays\fR is negative).
.PP
See also addMonths(), addYears(), and daysTo().
.SH "QDate QDate::addMonths ( int nmonths ) const"
Returns a QDate object containing a date \fInmonths\fR later than the date of this object (or earlier if \fInmonths\fR is negative).
.PP
See also addDays() and addYears().
.SH "QDate QDate::addYears ( int nyears ) const"
Returns a QDate object containing a date \fInyears\fR later than the date of this object (or earlier if \fInyears\fR is negative).
.PP
See also addDays() and addMonths().
.SH "QDate QDate::currentDate ( Qt::TimeSpec ts )\fC [static]\fR"
Returns the current date, as reported by the system clock, for the TimeSpec \fIts\fR. The default TimeSpec is LocalTime.
.PP
See also QTime::currentTime(), QDateTime::currentDateTime(), and Qt::TimeSpec.
.PP
Example: dclock/dclock.cpp.
.SH "QDate QDate::currentDate ()\fC [static]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Returns the current date, as reported by the system clock.
.PP
See also QTime::currentTime() and QDateTime::currentDateTime().
.SH "int QDate::day () const"
Returns the day of the month (1..31) of this date.
.PP
See also year(), month(), and dayOfWeek().
.PP
Example: dclock/dclock.cpp.
.SH "QString QDate::dayName ( int weekday )\fC [static]\fR"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
Use shortDayName() instead.
.SH "int QDate::dayOfWeek () const"
Returns the weekday (Monday=1..Sunday=7) for this date.
.PP
See also day() and dayOfYear().
.SH "int QDate::dayOfYear () const"
Returns the day of the year (1..365) for this date.
.PP
See also day() and dayOfWeek().
.SH "int QDate::daysInMonth () const"
Returns the number of days in the month (28..31) for this date.
.PP
See also day() and daysInYear().
.SH "int QDate::daysInYear () const"
Returns the number of days in the year (365 or 366) for this date.
.PP
See also day() and daysInMonth().
.SH "int QDate::daysTo ( const QDate & d ) const"
Returns the number of days from this date to \fId\fR (which is negative if \fId\fR is earlier than this date).
.PP
Example:
.PP
.nf
.br
        QDate d1( 1995, 5, 17 );  // May 17th 1995
.br
        QDate d2( 1995, 5, 20 );  // May 20th 1995
.br
        d1.daysTo( d2 );          // returns 3
.br
        d2.daysTo( d1 );          // returns -3
.br
.fi
.PP
See also addDays().
.SH "QDate QDate::fromString ( const QString & s, Qt::DateFormat f = Qt::TextDate )\fC [static]\fR"
Returns the QDate represented by the string \fIs\fR, using the format \fIf\fR, or an invalid date if the string cannot be parsed.
.PP
Note for Qt::TextDate: It is recommended that you use the English short month names (e.g. "Jan"). Although localized month names can also be used, they depend on the user's locale settings.
.PP
\fBWarning:\fR Qt::LocalDate cannot be used here.
.SH "bool QDate::isNull () const"
Returns TRUE if the date is null; otherwise returns FALSE. A null date is invalid.
.PP
See also isValid().
.SH "bool QDate::isValid () const"
Returns TRUE if this date is valid; otherwise returns FALSE.
.PP
See also isNull().
.SH "bool QDate::isValid ( int y, int m, int d )\fC [static]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Returns TRUE if the specified date (year \fIy\fR, month \fIm\fR and day \fId\fR) is valid; otherwise returns FALSE.
.PP
Example:
.PP
.nf
.br
    QDate::isValid( 2002, 5, 17 );  // TRUE   May 17th 2002 is valid
.br
    QDate::isValid( 2002, 2, 30 );  // FALSE  Feb 30th does not exist
.br
    QDate::isValid( 2004, 2, 29 );  // TRUE   2004 is a leap year
.br
    QDate::isValid( 1202, 6, 6 );   // FALSE  1202 is pre-Gregorian
.br
.fi
.PP
\fBWarning:\fR A \fIy\fR value in the range 00..99 is interpreted as 1900..1999.
.PP
See also isNull() and setYMD().
.SH "bool QDate::leapYear ( int y )\fC [static]\fR"
Returns TRUE if the specified year \fIy\fR is a leap year; otherwise returns FALSE.
.SH "QString QDate::longDayName ( int weekday )\fC [static]\fR"
Returns the long name of the \fIweekday\fR.
.PP
1 = "Monday", 2 = "Tuesday", ... 7 = "Sunday"
.PP
The day names will be localized according to the system's locale settings.
.PP
See also toString(), shortDayName(), shortMonthName(), and longMonthName().
.SH "QString QDate::longMonthName ( int month )\fC [static]\fR"
Returns the long name of the \fImonth\fR.
.PP
1 = "January", 2 = "February", ... 12 = "December"
.PP
The month names will be localized according to the system's locale settings.
.PP
See also toString(), shortMonthName(), shortDayName(), and longDayName().
.SH "int QDate::month () const"
Returns the month (January=1..December=12) of this date.
.PP
See also year() and day().
.PP
Example: dclock/dclock.cpp.
.SH "QString QDate::monthName ( int month )\fC [static]\fR"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
Use shortMonthName() instead.
.SH "bool QDate::operator!= ( const QDate & d ) const"
Returns TRUE if this date is different from \fId\fR; otherwise returns FALSE.
.SH "bool QDate::operator< ( const QDate & d ) const"
Returns TRUE if this date is earlier than \fId\fR, otherwise returns FALSE.
.SH "bool QDate::operator<= ( const QDate & d ) const"
Returns TRUE if this date is earlier than or equal to \fId\fR, otherwise returns FALSE.
.SH "bool QDate::operator== ( const QDate & d ) const"
Returns TRUE if this date is equal to \fId\fR; otherwise returns FALSE.
.SH "bool QDate::operator> ( const QDate & d ) const"
Returns TRUE if this date is later than \fId\fR, otherwise returns FALSE.
.SH "bool QDate::operator>= ( const QDate & d ) const"
Returns TRUE if this date is later than or equal to \fId\fR, otherwise returns FALSE.
.SH "bool QDate::setYMD ( int y, int m, int d )"
Sets the date's year \fIy\fR, month \fIm\fR and day \fId\fR.
.PP
\fIy\fR must be in the range 1752..8000, \fIm\fR must be in the range 1..12, and \fId\fR must be in the range 1..31.
.PP
\fBWarning:\fR If \fIy\fR is in the range 0..99, it is interpreted as 1900..1999.
.PP
Returns TRUE if the date is valid; otherwise returns FALSE.
.SH "QString QDate::shortDayName ( int weekday )\fC [static]\fR"
Returns the name of the \fIweekday\fR.
.PP
1 = "Mon", 2 = "Tue", ... 7 = "Sun"
.PP
The day names will be localized according to the system's locale settings.
.PP
See also toString(), shortMonthName(), longMonthName(), and longDayName().
.SH "QString QDate::shortMonthName ( int month )\fC [static]\fR"
Returns the name of the \fImonth\fR.
.PP
1 = "Jan", 2 = "Feb", ... 12 = "Dec"
.PP
The month names will be localized according to the system's locale settings.
.PP
See also toString(), longMonthName(), shortDayName(), and longDayName().
.SH "QString QDate::toString ( const QString & format ) const"
Returns the date as a string. The \fIformat\fR parameter determines the format of the result string.
.PP
These expressions may be used:
.PP
<center>.nf
.TS
l - l. Expression Output d the day as number without a leading zero (1-31) dd the day as number with a leading zero (01-31) ddd the abbreviated localized day name (e.g. 'Mon'..'Sun'). Uses QDate::shortDayName(). dddd the long localized day name (e.g. 'Monday'..'Sunday'). Uses QDate::longDayName(). M the month as number without a leading zero (1-12) MM the month as number with a leading zero (01-12) MMM the abbreviated localized month name (e.g. 'Jan'..'Dec'). Uses QDate::shortMonthName(). MMMM the long localized month name (e.g. 'January'..'December'). Uses QDate::longMonthName(). yy the year as two digit number (00-99) yyyy
.TE
.fi
</center>
.PP
All other input characters will be ignored.
.PP
Example format strings (assuming that the QDate is the 20<sup><small>th</small></sup> July 1969): <center>.nf
.TS
l - l. Format Result dd.MM.yyyy 20.07.1969 ddd MMMM d yy
.TE
.fi
</center>
.PP
If the date is an invalid date, then QString::null will be returned.
.PP
See also QDateTime::toString() and QTime::toString().
.SH "QString QDate::toString ( Qt::DateFormat f = Qt::TextDate ) const"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Returns the date as a string. The \fIf\fR parameter determines the format of the string.
.PP
If \fIf\fR is Qt::TextDate, the string format is "Sat May 20 1995" (using the shortDayName() and shortMonthName() functions to generate the string, so the day and month names are locale specific).
.PP
If \fIf\fR is Qt::ISODate, the string format corresponds to the ISO 8601 specification for representations of dates, which is YYYY-MM-DD where YYYY is the year, MM is the month of the year (between 01 and 12), and DD is the day of the month between 01 and 31.
.PP
If \fIf\fR is Qt::LocalDate, the string format depends on the locale settings of the system.
.PP
If the date is an invalid date, then QString::null will be returned.
.PP
See also shortDayName() and shortMonthName().
.SH "int QDate::weekNumber ( int * yearNumber = 0 ) const"
Returns the week number (1 to 53), and stores the year in \fI*yearNumber\fR unless \fIyearNumber\fR is null (the default).
.PP
Returns 0 if the date is invalid.
.PP
In accordance with ISO 8601, weeks start on Monday and the first Thursday of a year is always in week 1 of that year. Most years have 52 weeks, but some have 53.
.PP
\fI*yearNumber\fR is not always the same as year(). For example, 1 January 2000 has week number 52 in the year 1999, and 31 December 2002 has week number 1 in the year 2003.
.PP
Copyright (c) 1989 The Regents of the University of California. All rights reserved.
.PP
Redistribution and use in source and binary forms are permitted provided that the above copyright notice and this paragraph are duplicated in all such forms and that any documentation, advertising materials, and other materials related to such distribution and use acknowledge that the software was developed by the University of California, Berkeley. The name of the University may not be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
.PP
See also isValid().
.SH "int QDate::year () const"
Returns the year (1752..8000) of this date.
.PP
See also month() and day().
.SH RELATED FUNCTION DOCUMENTATION
.SH "QDataStream & operator<< ( QDataStream & s, const QDate & d )"
Writes the date, \fId\fR, to the data stream, \fIs\fR.
.PP
See also Format of the QDataStream operators.
.SH "QDataStream & operator>> ( QDataStream & s, QDate & d )"
Reads a date from the stream \fIs\fR into \fId\fR.
.PP
See also Format of the QDataStream operators.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qdate.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qdate.3qt) and the Qt
version (3.3.8).
