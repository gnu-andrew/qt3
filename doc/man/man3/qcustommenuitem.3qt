'\" t
.TH QCustomMenuItem 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QCustomMenuItem \- Abstract base class for custom menu items in popup menus
.SH SYNOPSIS
\fC#include <qmenudata.h>\fR
.PP
Inherits Qt.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQCustomMenuItem\fR ()"
.br
.ti -1c
.BI "virtual \fB~QCustomMenuItem\fR ()"
.br
.ti -1c
.BI "virtual bool \fBfullSpan\fR () const"
.br
.ti -1c
.BI "virtual bool \fBisSeparator\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetFont\fR ( const QFont & font )"
.br
.ti -1c
.BI "virtual void \fBpaint\fR ( QPainter * p, const QColorGroup & cg, bool act, bool enabled, int x, int y, int w, int h ) = 0"
.br
.ti -1c
.BI "virtual QSize \fBsizeHint\fR () = 0"
.br
.in -1c
.SH DESCRIPTION
The QCustomMenuItem class is an abstract base class for custom menu items in popup menus.
.PP
A custom menu item is a menu item that is defined by two pure virtual functions, paint() and sizeHint(). The size hint tells the menu how much space it needs to reserve for this item, and paint is called whenever the item needs painting.
.PP
This simple mechanism allows you to create all kinds of application specific menu items. Examples are items showing different fonts in a word processor or menus that allow the selection of drawing utilities in a vector drawing program.
.PP
A custom item is inserted into a popup menu with QPopupMenu::insertItem().
.PP
By default, a custom item can also have an icon and a keyboard accelerator. You can reimplement fullSpan() to return TRUE if you want the item to span the entire popup menu width. This is particularly useful for labels.
.PP
If you want the custom item to be treated just as a separator, reimplement isSeparator() to return TRUE.
.PP
Note that you can insert pixmaps or bitmaps as items into a popup menu without needing to create a QCustomMenuItem. However, custom menu items offer more flexibility, and -- especially important with Windows style -- provide the possibility of drawing the item with a different color when it is highlighted.
.PP
menu/menu.cpp shows a simple example how custom menu items can be used.
.PP
Note: the current implementation of QCustomMenuItem will not recognize shortcut keys that are from text with ampersands. Normal accelerators work though.
.PP
.ce 1
.B "[Image Omitted]"
.PP
See also QMenuData, QPopupMenu, and Miscellaneous Classes.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QCustomMenuItem::QCustomMenuItem ()"
Constructs a QCustomMenuItem
.SH "QCustomMenuItem::~QCustomMenuItem ()\fC [virtual]\fR"
Destroys a QCustomMenuItem
.SH "bool QCustomMenuItem::fullSpan () const\fC [virtual]\fR"
Returns TRUE if this item wants to span the entire popup menu width; otherwise returns FALSE. The default is FALSE, meaning that the menu may show an icon and an accelerator key for this item as well.
.SH "bool QCustomMenuItem::isSeparator () const\fC [virtual]\fR"
Returns TRUE if this item is just a separator; otherwise returns FALSE.
.SH "void QCustomMenuItem::paint ( QPainter * p, const QColorGroup & cg, bool act, bool enabled, int x, int y, int w, int h )\fC [pure virtual]\fR"
Paints this item. When this function is invoked, the painter \fIp\fR is set to a font and foreground color suitable for a menu item text using color group \fIcg\fR. The item is active if \fIact\fR is TRUE and enabled if \fIenabled\fR is TRUE. The geometry values \fIx\fR, \fIy\fR, \fIw\fR and \fIh\fR specify where to draw the item.
.PP
Do not draw any background, this has already been done by the popup menu according to the current GUI style.
.SH "void QCustomMenuItem::setFont ( const QFont & font )\fC [virtual]\fR"
Sets the font of the custom menu item to \fIfont\fR.
.PP
This function is called whenever the font in the popup menu changes. For menu items that show their own individual font entry, you want to ignore this.
.SH "QSize QCustomMenuItem::sizeHint ()\fC [pure virtual]\fR"
Returns the item's size hint.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qcustommenuitem.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qcustommenuitem.3qt) and the Qt
version (3.3.8).
