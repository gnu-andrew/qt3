'\" t
.TH QDateEdit 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QDateEdit \- Date editor
.SH SYNOPSIS
\fC#include <qdatetimeedit.h>\fR
.PP
Inherits QDateTimeEditBase.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQDateEdit\fR ( QWidget * parent = 0, const char * name = 0 )"
.br
.ti -1c
.BI "\fBQDateEdit\fR ( const QDate & date, QWidget * parent = 0, const char * name = 0 )"
.br
.ti -1c
.BI "\fB~QDateEdit\fR ()"
.br
.ti -1c
.BI "enum \fBOrder\fR { DMY, MDY, YMD, YDM }"
.br
.ti -1c
.BI "QDate \fBdate\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetOrder\fR ( Order order )"
.br
.ti -1c
.BI "Order \fBorder\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetAutoAdvance\fR ( bool advance )"
.br
.ti -1c
.BI "bool \fBautoAdvance\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetMinValue\fR ( const QDate & d )"
.br
.ti -1c
.BI "QDate \fBminValue\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetMaxValue\fR ( const QDate & d )"
.br
.ti -1c
.BI "QDate \fBmaxValue\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetRange\fR ( const QDate & min, const QDate & max )"
.br
.ti -1c
.BI "QString \fBseparator\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetSeparator\fR ( const QString & s )"
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "virtual void \fBsetDate\fR ( const QDate & date )"
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void \fBvalueChanged\fR ( const QDate & date )"
.br
.in -1c
.SS "Properties"
.in +1c
.ti -1c
.BI "bool \fBautoAdvance\fR - whether the editor automatically advances to the next section"
.br
.ti -1c
.BI "QDate \fBdate\fR - the editor's date value"
.br
.ti -1c
.BI "QDate \fBmaxValue\fR - the editor's maximum value"
.br
.ti -1c
.BI "QDate \fBminValue\fR - the editor's minimum value"
.br
.ti -1c
.BI "Order \fBorder\fR - the order in which the " "year" ", month and day appear"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual QString \fBsectionFormattedText\fR ( int sec )"
.br
.ti -1c
.BI "virtual void \fBsetYear\fR ( int year )"
.br
.ti -1c
.BI "virtual void \fBsetMonth\fR ( int month )"
.br
.ti -1c
.BI "virtual void \fBsetDay\fR ( int day )"
.br
.ti -1c
.BI "virtual void \fBfix\fR ()"
.br
.in -1c
.SS "Protected Slots"
.in +1c
.ti -1c
.BI "void \fBupdateButtons\fR ()"
.br
.in -1c
.SH DESCRIPTION
The QDateEdit class provides a date editor.
.PP
QDateEdit allows the user to edit dates by using the keyboard or the arrow keys to increase/decrease date values. The arrow keys can be used to move from section to section within the QDateEdit box. Dates appear in accordance with the local date/time settings or in year, month, day order if the system doesn't provide this information. It is recommended that the QDateEdit be initialised with a date, e.g.
.PP
.nf
.br
    QDateEdit *dateEdit = new QDateEdit( QDate::currentDate(), this );
.br
    dateEdit->setRange( QDate::currentDate().addDays( -365 ),
.br
                        QDate::currentDate().addDays(  365 ) );
.br
    dateEdit->setOrder( QDateEdit::MDY );
.br
    dateEdit->setAutoAdvance( TRUE );
.br
.fi
.PP
Here we've created a new QDateEdit object initialised with today's date and restricted the valid date range to today plus or minus 365 days. We've set the order to month, day, year. If the auto advance property is TRUE (as we've set it here) when the user completes a section of the date, e.g. enters two digits for the month, they are automatically taken to the next section.
.PP
The maximum and minimum values for a date value in the date editor default to the maximum and minimum values for a QDate. You can change this by calling setMinValue(), setMaxValue() or setRange().
.PP
Terminology: A QDateEdit widget comprises three 'sections', one each for the year, month and day. You can change the separator character using QDateTimeEditor::setSeparator(), by default the separator will be taken from the systems settings. If that is not possible, it defaults to "-".
.PP
<center>
.ce 1
.B "[Image Omitted]"
.PP
</center>
.PP
See also QDate, QTimeEdit, QDateTimeEdit, Advanced Widgets, and Time and Date.
.SS "Member Type Documentation"
.SH "QDateEdit::Order"
This enum defines the order in which the sections that comprise a date appear.
.TP
\fCQDateEdit::MDY\fR - month-day-year
.TP
\fCQDateEdit::DMY\fR - day-month-year
.TP
\fCQDateEdit::YMD\fR - year-month-day (the default)
.TP
\fCQDateEdit::YDM\fR - year-day-month (included for completeness; but should not be used)
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QDateEdit::QDateEdit ( QWidget * parent = 0, const char * name = 0 )"
Constructs an empty date editor which is a child of \fIparent\fR and called name \fIname\fR.
.SH "QDateEdit::QDateEdit ( const QDate & date, QWidget * parent = 0, const char * name = 0 )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Constructs a date editor with the initial value \fIdate\fR, parent \fIparent\fR and called \fIname\fR.
.PP
The date editor is initialized with \fIdate\fR.
.SH "QDateEdit::~QDateEdit ()"
Destroys the object and frees any allocated resources.
.SH "bool QDateEdit::autoAdvance () const"
Returns TRUE if the editor automatically advances to the next section; otherwise returns FALSE. See the "autoAdvance" property for details.
.SH "QDate QDateEdit::date () const"
Returns the editor's date value. See the "date" property for details.
.SH "void QDateEdit::fix ()\fC [virtual protected]\fR"
Attempts to fix any invalid date entries.
.PP
The rules applied are as follows:
.TP
If the year has four digits it is left unchanged.
.TP
If the year has two digits, the year will be changed to four digits in the range current year - 70 to current year + 29.
.TP
If the year has three digits in the range 100..999, the current millennium, i.e. 2000, will be added giving a year in the range 2100..2999.
.TP
If the day or month is 0 then it will be set to 1 or the minimum valid day\\month in the range.
.SH "QDate QDateEdit::maxValue () const"
Returns the editor's maximum value. See the "maxValue" property for details.
.SH "QDate QDateEdit::minValue () const"
Returns the editor's minimum value. See the "minValue" property for details.
.SH "Order QDateEdit::order () const"
Returns the order in which the year, month and day appear. See the "order" property for details.
.SH "QString QDateEdit::sectionFormattedText ( int sec )\fC [virtual protected]\fR"
Returns the formatted number for section \fIsec\fR. This will correspond to either the year, month or day section, depending on the current display order.
.PP
See also order.
.SH "QString QDateEdit::separator () const"
Returns the editor's separator.
.SH "void QDateEdit::setAutoAdvance ( bool advance )\fC [virtual]\fR"
Sets whether the editor automatically advances to the next section to \fIadvance\fR. See the "autoAdvance" property for details.
.SH "void QDateEdit::setDate ( const QDate & date )\fC [virtual slot]\fR"
Sets the editor's date value to \fIdate\fR. See the "date" property for details.
.SH "void QDateEdit::setDay ( int day )\fC [virtual protected]\fR"
Sets the day to \fIday\fR, which must be a valid day. The function will ensure that the \fIday\fR set is valid for the month and year.
.SH "void QDateEdit::setMaxValue ( const QDate & d )\fC [virtual]\fR"
Sets the editor's maximum value to \fId\fR. See the "maxValue" property for details.
.SH "void QDateEdit::setMinValue ( const QDate & d )\fC [virtual]\fR"
Sets the editor's minimum value to \fId\fR. See the "minValue" property for details.
.SH "void QDateEdit::setMonth ( int month )\fC [virtual protected]\fR"
Sets the month to \fImonth\fR, which must be a valid month, i.e. between 1 and 12.
.SH "void QDateEdit::setOrder ( Order order )\fC [virtual]\fR"
Sets the order in which the year, month and day appear to \fIorder\fR. See the "order" property for details.
.SH "void QDateEdit::setRange ( const QDate & min, const QDate & max )\fC [virtual]\fR"
Sets the valid input range for the editor to be from \fImin\fR to \fImax\fR inclusive. If \fImin\fR is invalid no minimum date will be set. Similarly, if \fImax\fR is invalid no maximum date will be set.
.SH "void QDateEdit::setSeparator ( const QString & s )\fC [virtual]\fR"
Sets the separator to \fIs\fR. Note that currently only the first character of \fIs\fR is used.
.SH "void QDateEdit::setYear ( int year )\fC [virtual protected]\fR"
Sets the year to \fIyear\fR, which must be a valid year. The range currently supported is from 1752 to 8000.
.PP
See also QDate.
.SH "void QDateEdit::updateButtons ()\fC [protected slot]\fR"
Enables/disables the push buttons according to the min/max date for this widget.
.SH "void QDateEdit::valueChanged ( const QDate & date )\fC [signal]\fR"
This signal is emitted whenever the editor's value changes. The \fIdate\fR parameter is the new value.
.SS "Property Documentation"
.SH "bool autoAdvance"
This property holds whether the editor automatically advances to the next section.
.PP
If autoAdvance is TRUE, the editor will automatically advance focus to the next date section if a user has completed a section. The default is FALSE.
.PP
Set this property's value with setAutoAdvance() and get this property's value with autoAdvance().
.SH "QDate date"
This property holds the editor's date value.
.PP
If the date property is not valid, the editor displays all zeroes and QDateEdit::date() will return an invalid date. It is strongly recommended that the editor is given a default date value (e.g. currentDate()). That way, attempts to set the date property to an invalid date will fail.
.PP
When changing the date property, if the date is less than minValue(), or is greater than maxValue(), nothing happens.
.PP
Set this property's value with setDate() and get this property's value with date().
.SH "QDate maxValue"
This property holds the editor's maximum value.
.PP
Setting the maximum date value for the editor is equivalent to calling QDateEdit::setRange( minValue(), \fId\fR ), where \fId\fR is the maximum date. The default maximum date is 8000-12-31.
.PP
See also minValue and setRange().
.PP
Set this property's value with setMaxValue() and get this property's value with maxValue().
.SH "QDate minValue"
This property holds the editor's minimum value.
.PP
Setting the minimum date value is equivalent to calling QDateEdit::setRange( \fId\fR, maxValue() ), where \fId\fR is the minimum date. The default minimum date is 1752-09-14.
.PP
See also maxValue and setRange().
.PP
Set this property's value with setMinValue() and get this property's value with minValue().
.SH "Order order"
This property holds the order in which the year, month and day appear.
.PP
The default order is locale dependent.
.PP
See also Order.
.PP
Set this property's value with setOrder() and get this property's value with order().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qdateedit.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qdateedit.3qt) and the Qt
version (3.3.8).
