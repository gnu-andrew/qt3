'\" t
.TH QCanvasPolygonalItem 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QCanvasPolygonalItem \- Polygonal canvas item on a QCanvas
.SH SYNOPSIS
\fC#include <qcanvas.h>\fR
.PP
Inherits QCanvasItem.
.PP
Inherited by QCanvasRectangle, QCanvasPolygon, QCanvasLine, and QCanvasEllipse.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQCanvasPolygonalItem\fR ( QCanvas * canvas )"
.br
.ti -1c
.BI "virtual \fB~QCanvasPolygonalItem\fR ()"
.br
.ti -1c
.BI "virtual void \fBsetPen\fR ( QPen p )"
.br
.ti -1c
.BI "virtual void \fBsetBrush\fR ( QBrush b )"
.br
.ti -1c
.BI "QPen \fBpen\fR () const"
.br
.ti -1c
.BI "QBrush \fBbrush\fR () const"
.br
.ti -1c
.BI "virtual QPointArray \fBareaPoints\fR () const = 0"
.br
.ti -1c
.BI "virtual QPointArray \fBareaPointsAdvanced\fR () const"
.br
.ti -1c
.BI "virtual QRect \fBboundingRect\fR () const"
.br
.ti -1c
.BI "virtual int \fBrtti\fR () const"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual void \fBdraw\fR ( QPainter & p )"
.br
.ti -1c
.BI "virtual void \fBdrawShape\fR ( QPainter & p ) = 0"
.br
.ti -1c
.BI "bool \fBwinding\fR () const"
.br
.ti -1c
.BI "void \fBsetWinding\fR ( bool enable )"
.br
.ti -1c
.BI "void \fBinvalidate\fR ()"
.br
.ti -1c
.BI "bool \fBisValid\fR () const"
.br
.in -1c
.SH DESCRIPTION
The QCanvasPolygonalItem class provides a polygonal canvas item on a QCanvas.
.PP
The mostly rectangular classes, such as QCanvasSprite and QCanvasText, use the object's bounding rectangle for movement, repainting and collision calculations. For most other items, the bounding rectangle can be far too large -- a diagonal line being the worst case, and there are many other cases which are also bad. QCanvasPolygonalItem provides polygon-based bounding rectangle handling, etc., which is much faster for non-rectangular items.
.PP
Derived classes should try to define as small an area as possible to maximize efficiency, but the polygon must \fIdefinitely\fR be contained completely within the polygonal area. Calculating the exact requirements is usually difficult, but if you allow a small overestimate it can be easy and quick, while still getting almost all of QCanvasPolygonalItem's speed.
.PP
Note that all subclasses \fImust\fR call hide() in their destructor since hide() needs to be able to access areaPoints().
.PP
Normally, QCanvasPolygonalItem uses the odd-even algorithm for determining whether an object intersects this object. You can change this to the winding algorithm using setWinding().
.PP
The bounding rectangle is available using boundingRect(). The points bounding the polygonal item are retrieved with areaPoints(). Use areaPointsAdvanced() to retrieve the bounding points the polygonal item \fIwill\fR have after QCanvasItem::advance(1) has been called.
.PP
If the shape of the polygonal item is about to change while the item is visible, call invalidate() before updating with a different result from areaPoints().
.PP
By default, QCanvasPolygonalItem objects have a black pen and no brush (the default QPen and QBrush constructors). You can change this with setPen() and setBrush(), but note that some QCanvasPolygonalItem subclasses only use the brush, ignoring the pen setting.
.PP
The polygonal item can be drawn on a painter with draw(). Subclasses must reimplement drawShape() to draw themselves.
.PP
Like any other canvas item polygonal items can be moved with QCanvasItem::move() and QCanvasItem::moveBy(), or by setting coordinates with QCanvasItem::setX(), QCanvasItem::setY() and QCanvasItem::setZ().
.PP
See also Graphics Classes and Image Processing Classes.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QCanvasPolygonalItem::QCanvasPolygonalItem ( QCanvas * canvas )"
Constructs a QCanvasPolygonalItem on the canvas \fIcanvas\fR.
.SH "QCanvasPolygonalItem::~QCanvasPolygonalItem ()\fC [virtual]\fR"
Note that all subclasses \fImust\fR call hide() in their destructor since hide() needs to be able to access areaPoints().
.SH "QPointArray QCanvasPolygonalItem::areaPoints () const\fC [pure virtual]\fR"
This function must be reimplemented by subclasses. It \fImust\fR return the points bounding (i.e. outside and not touching) the shape or drawing errors will occur.
.PP
Reimplemented in QCanvasPolygon.
.SH "QPointArray QCanvasPolygonalItem::areaPointsAdvanced () const\fC [virtual]\fR"
Returns the points the polygonal item \fIwill\fR have after QCanvasItem::advance(1) is called, i.e. what the points are when advanced by the current xVelocity() and yVelocity().
.SH "QRect QCanvasPolygonalItem::boundingRect () const\fC [virtual]\fR"
Returns the bounding rectangle of the polygonal item, based on areaPoints().
.PP
Reimplemented from QCanvasItem.
.SH "QBrush QCanvasPolygonalItem::brush () const"
Returns the QBrush used to fill the item, if filled.
.PP
See also setBrush().
.SH "void QCanvasPolygonalItem::draw ( QPainter & p )\fC [virtual protected]\fR"
Reimplemented from QCanvasItem, this draws the polygonal item by setting the pen and brush for the item on the painter \fIp\fR and calling drawShape().
.PP
Reimplemented from QCanvasItem.
.SH "void QCanvasPolygonalItem::drawShape ( QPainter & p )\fC [pure virtual protected]\fR"
Subclasses must reimplement this function to draw their shape. The pen and brush of \fIp\fR are already set to pen() and brush() prior to calling this function.
.PP
\fBWarning:\fR When you reimplement this function, make sure that you leave the painter in the same state as you found it. For example, if you start by calling QPainter::translate(50, 50), end your code by calling QPainter::translate(-50, -50). Be also aware that the painter might already have some transformations set (i.e., don't call QPainter::resetXForm() when you're done).
.PP
See also draw().
.PP
Reimplemented in QCanvasRectangle, QCanvasPolygon, and QCanvasEllipse.
.SH "void QCanvasPolygonalItem::invalidate ()\fC [protected]\fR"
Invalidates all information about the area covered by the canvas item. The item will be updated automatically on the next call that changes the item's status, for example, move() or update(). Call this function if you are going to change the shape of the item (as returned by areaPoints()) while the item is visible.
.SH "bool QCanvasPolygonalItem::isValid () const\fC [protected]\fR"
Returns TRUE if the polygonal item's area information has not been invalidated; otherwise returns FALSE.
.PP
See also invalidate().
.SH "QPen QCanvasPolygonalItem::pen () const"
Returns the QPen used to draw the outline of the item, if any.
.PP
See also setPen().
.SH "int QCanvasPolygonalItem::rtti () const\fC [virtual]\fR"
Returns 2 (QCanvasItem::Rtti_PolygonalItem).
.PP
See also QCanvasItem::rtti().
.PP
Reimplemented from QCanvasItem.
.PP
Reimplemented in QCanvasRectangle, QCanvasPolygon, QCanvasLine, and QCanvasEllipse.
.SH "void QCanvasPolygonalItem::setBrush ( QBrush b )\fC [virtual]\fR"
Sets the QBrush used when drawing the polygonal item to the brush \fIb\fR.
.PP
See also setPen(), brush(), and drawShape().
.PP
Examples:
.)l canvas/canvas.cpp and chart/chartform_canvas.cpp.
.SH "void QCanvasPolygonalItem::setPen ( QPen p )\fC [virtual]\fR"
Sets the QPen used when drawing the item to the pen \fIp\fR. Note that many QCanvasPolygonalItems do not use the pen value.
.PP
See also setBrush(), pen(), and drawShape().
.PP
Examples:
.)l canvas/canvas.cpp and chart/chartform_canvas.cpp.
.SH "void QCanvasPolygonalItem::setWinding ( bool enable )\fC [protected]\fR"
If \fIenable\fR is TRUE, the polygonal item will use the winding algorithm to determine the "inside" of the polygon; otherwise the odd-even algorithm will be used.
.PP
The default is to use the odd-even algorithm.
.PP
See also winding().
.SH "bool QCanvasPolygonalItem::winding () const\fC [protected]\fR"
Returns TRUE if the polygonal item uses the winding algorithm to determine the "inside" of the polygon. Returns FALSE if it uses the odd-even algorithm.
.PP
The default is to use the odd-even algorithm.
.PP
See also setWinding().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qcanvaspolygonalitem.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qcanvaspolygonalitem.3qt) and the Qt
version (3.3.8).
