'\" t
.TH QUrlOperator 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QUrlOperator \- Common operations on URLs
.SH SYNOPSIS
\fC#include <qurloperator.h>\fR
.PP
Inherits QObject and QUrl.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQUrlOperator\fR ()"
.br
.ti -1c
.BI "\fBQUrlOperator\fR ( const QString & url )"
.br
.ti -1c
.BI "\fBQUrlOperator\fR ( const QUrlOperator & url )"
.br
.ti -1c
.BI "\fBQUrlOperator\fR ( const QUrlOperator & url, const QString & relUrl, bool checkSlash = FALSE )"
.br
.ti -1c
.BI "virtual \fB~QUrlOperator\fR ()"
.br
.ti -1c
.BI "virtual const QNetworkOperation * \fBlistChildren\fR ()"
.br
.ti -1c
.BI "virtual const QNetworkOperation * \fBmkdir\fR ( const QString & dirname )"
.br
.ti -1c
.BI "virtual const QNetworkOperation * \fBremove\fR ( const QString & filename )"
.br
.ti -1c
.BI "virtual const QNetworkOperation * \fBrename\fR ( const QString & oldname, const QString & newname )"
.br
.ti -1c
.BI "virtual const QNetworkOperation * \fBget\fR ( const QString & location = QString::null )"
.br
.ti -1c
.BI "virtual const QNetworkOperation * \fBput\fR ( const QByteArray & data, const QString & location = QString::null )"
.br
.ti -1c
.BI "virtual QPtrList<QNetworkOperation> \fBcopy\fR ( const QString & from, const QString & to, bool move = FALSE, bool toPath = TRUE )"
.br
.ti -1c
.BI "virtual void \fBcopy\fR ( const QStringList & files, const QString & dest, bool move = FALSE )"
.br
.ti -1c
.BI "virtual bool \fBisDir\fR ( bool * ok = 0 )"
.br
.ti -1c
.BI "virtual void \fBsetNameFilter\fR ( const QString & nameFilter )"
.br
.ti -1c
.BI "QString \fBnameFilter\fR () const"
.br
.ti -1c
.BI "virtual QUrlInfo \fBinfo\fR ( const QString & entry ) const"
.br
.ti -1c
.BI "virtual void \fBstop\fR ()"
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void \fBnewChildren\fR ( const QValueList<QUrlInfo> & i, QNetworkOperation * op )"
.br
.ti -1c
.BI "void \fBfinished\fR ( QNetworkOperation * op )"
.br
.ti -1c
.BI "void \fBstart\fR ( QNetworkOperation * op )"
.br
.ti -1c
.BI "void \fBcreatedDirectory\fR ( const QUrlInfo & i, QNetworkOperation * op )"
.br
.ti -1c
.BI "void \fBremoved\fR ( QNetworkOperation * op )"
.br
.ti -1c
.BI "void \fBitemChanged\fR ( QNetworkOperation * op )"
.br
.ti -1c
.BI "void \fBdata\fR ( const QByteArray & data, QNetworkOperation * op )"
.br
.ti -1c
.BI "void \fBdataTransferProgress\fR ( int bytesDone, int bytesTotal, QNetworkOperation * op )"
.br
.ti -1c
.BI "void \fBstartedNextCopy\fR ( const QPtrList<QNetworkOperation> & lst )"
.br
.ti -1c
.BI "void \fBconnectionStateChanged\fR ( int state, const QString & data )"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual void \fBclearEntries\fR ()"
.br
.ti -1c
.BI "void \fBgetNetworkProtocol\fR ()"
.br
.ti -1c
.BI "void \fBdeleteNetworkProtocol\fR ()"
.br
.in -1c
.SH RELATED FUNCTION DOCUMENTATION
.in +1c
.ti -1c
.BI "void \fBqInitNetworkProtocols\fR ()"
.br
.in -1c
.SH DESCRIPTION
The QUrlOperator class provides common operations on URLs.
.PP
This class operates on hierarchical structures (such as filesystems) using URLs. Its API facilitates all the common operations: <center>.nf
.TS
l - l. Operation Function List files listChildren() Make a directory mkdir() Remove a file remove() Rename a file rename() Get a file get() Put a file put() Copy a file
.TE
.fi
</center>
.PP
You can obtain additional information about the URL with isDir() and info(). If a directory is to be traversed using listChildren(), a name filter can be set with setNameFilter().
.PP
A QUrlOperator can be used like this, for example to download a file (and assuming that the FTP protocol is registered):
.PP
.nf
.br
    QUrlOperator *op = new QUrlOperator();
.br
    op->copy( QString("ftp://ftp.trolltech.com/qt/source/qt-2.1.0.tar.gz"),
.br
             "file:/tmp" );
.br
.fi
.PP
If you want to be notified about success/failure, progress, etc., you can connect to QUrlOperator's signals, e.g. to start(), newChildren(), createdDirectory(), removed(), data(), dataTransferProgress(), startedNextCopy(), connectionStateChanged(), finished(), etc. A network operation can be stopped with stop().
.PP
The class uses the functionality of registered network protocols to perform these operations. Depending of the protocol of the URL, it uses an appropriate network protocol class for the operations. Each of the operation functions of QUrlOperator creates a QNetworkOperation object that describes the operation and puts it into the operation queue for the network protocol used. If no suitable protocol could be found (because no implementation of the necessary network protocol is registered), the URL operator emits errors. Not every protocol supports every operation, but error handling deals with this problem.
.PP
To register the available network protocols, use the qInitNetworkProtocols() function. The protocols currently supported are:
.TP
FTP,
.TP
HTTP,
.TP
local file system.
.PP
For more information about the Qt Network Architecture see the Qt Network Documentation.
.PP
See also QNetworkProtocol, QNetworkOperation, Input/Output and Networking, and Miscellaneous Classes.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QUrlOperator::QUrlOperator ()"
Constructs a QUrlOperator with an empty (i.e. invalid) URL.
.SH "QUrlOperator::QUrlOperator ( const QString & url )"
Constructs a QUrlOperator using \fIurl\fR and parses this string.
.PP
If you pass strings like "/home/qt" the "file" protocol is assumed.
.SH "QUrlOperator::QUrlOperator ( const QUrlOperator & url )"
Constructs a copy of \fIurl\fR.
.SH "QUrlOperator::QUrlOperator ( const QUrlOperator & url, const QString & relUrl, bool checkSlash = FALSE )"
Constructs a QUrlOperator. The URL on which this QUrlOperator operates is constructed out of the arguments \fIurl\fR, \fIrelUrl\fR and \fIcheckSlash\fR: see the corresponding QUrl constructor for an explanation of these arguments.
.SH "QUrlOperator::~QUrlOperator ()\fC [virtual]\fR"
Destructor.
.SH "void QUrlOperator::clearEntries ()\fC [virtual protected]\fR"
Clears the cache of children.
.SH "void QUrlOperator::connectionStateChanged ( int state, const QString & data )\fC [signal]\fR"
This signal is emitted whenever the URL operator's connection state changes. \fIstate\fR describes the new state, which is a QNetworkProtocol::ConnectionState value.
.PP
\fIdata\fR is a string that describes the change of the connection. This can be used to display a message to the user.
.SH "QPtrList<QNetworkOperation> QUrlOperator::copy ( const QString & from, const QString & to, bool move = FALSE, bool toPath = TRUE )\fC [virtual]\fR"
Copies the file \fIfrom\fR to \fIto\fR. If \fImove\fR is TRUE, the file is moved (copied and removed). \fIfrom\fR must point to a file and \fIto\fR must point to a directory (into which \fIfrom\fR is copied) unless \fItoPath\fR is set to FALSE. If \fItoPath\fR is set to FALSE then the \fIto\fR variable is assumed to be the absolute file path (destination file path + file name). The copying is done using the get() and put() operations. If you want to be notified about the progress of the operation, connect to the dataTransferProgress() signal. Bear in mind that the get() and put() operations emit this signal through the QUrlOperator. The number of transferred bytes and the total bytes that you receive as arguments in this signal do not relate to the the whole copy operation; they relate first to the get() and then to the put() operation. Always check what type of operation the signal comes from; this is given in the signal's last argument.
.PP
At the end, finished() (with success or failure) is emitted, so check the state of the network operation object to see whether or not the operation was successful.
.PP
Because a move or copy operation consists of multiple operations (get(), put() and maybe remove()), this function doesn't return a single QNetworkOperation, but rather a list of them. They are in the order: get(), put() and (if applicable) remove().
.PP
See also get() and put().
.SH "void QUrlOperator::copy ( const QStringList & files, const QString & dest, bool move = FALSE )\fC [virtual]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Copies the \fIfiles\fR to the directory \fIdest\fR. If \fImove\fR is TRUE the files are moved, not copied. \fIdest\fR must point to a directory.
.PP
This function calls copy() for each entry in \fIfiles\fR in turn. You don't get a result from this function; each time a new copy begins, startedNextCopy() is emitted, with a list of QNetworkOperations that describe the new copy operation.
.SH "void QUrlOperator::createdDirectory ( const QUrlInfo & i, QNetworkOperation * op )\fC [signal]\fR"
This signal is emitted when mkdir() succeeds and the directory has been created. \fIi\fR holds the information about the new directory.
.PP
\fIop\fR is a pointer to the operation object, which contains all the information about the operation, including the state. \fCop->arg(0)\fR holds the new directory's name.
.PP
See also QNetworkOperation and QNetworkProtocol.
.SH "void QUrlOperator::data ( const QByteArray & data, QNetworkOperation * op )\fC [signal]\fR"
This signal is emitted when new \fIdata\fR has been received after calling get() or put(). \fIop\fR is a pointer to the operation object which contains all the information about the operation, including the state. \fCop->arg(0)\fR holds the name of the file whose data is retrieved and op->rawArg(1) holds the (raw) data.
.PP
See also QNetworkOperation and QNetworkProtocol.
.SH "void QUrlOperator::dataTransferProgress ( int bytesDone, int bytesTotal, QNetworkOperation * op )\fC [signal]\fR"
This signal is emitted during data transfer (using put() or get()). \fIbytesDone\fR specifies how many bytes of \fIbytesTotal\fR have been transferred. More information about the operation is stored in \fIop\fR, a pointer to the network operation that is processed. \fIbytesTotal\fR may be -1, which means that the total number of bytes is not known.
.PP
See also QNetworkOperation and QNetworkProtocol.
.SH "void QUrlOperator::deleteNetworkProtocol ()\fC [protected]\fR"
Deletes the currently used network protocol.
.SH "void QUrlOperator::finished ( QNetworkOperation * op )\fC [signal]\fR"
This signal is emitted when an operation of some sort finishes, whether with success or failure. \fIop\fR is a pointer to the operation object, which contains all the information, including the state, of the operation which has been finished. Check the state and error code of the operation object to see whether or not the operation was successful.
.PP
See also QNetworkOperation and QNetworkProtocol.
.SH "const QNetworkOperation * QUrlOperator::get ( const QString & location = QString::null )\fC [virtual]\fR"
Tells the network protocol to get data from \fIlocation\fR or, if this is QString::null, to get data from the location to which this URL points (see QUrl::fileName() and QUrl::encodedPathAndQuery()). What happens then depends on the network protocol. The data() signal is emitted when data comes in. Because it's unlikely that all data will come in at once, it is common for multiple data() signals to be emitted. The dataTransferProgress() signal is emitted while processing the operation. At the end, finished() (with success or failure) is emitted, so check the state of the network operation object to see whether or not the operation was successful.
.PP
If \fIlocation\fR is QString::null, the path of this QUrlOperator should point to a file when you use this operation. If \fIlocation\fR is not empty, it can be a relative URL (a child of the path to which the QUrlOperator points) or an absolute URL.
.PP
For example, to get a web page you might do something like this:
.PP
.nf
.br
    QUrlOperator op( "http://www.whatever.org/cgi-bin/search.pl?cmd=Hello" );
.br
    op.get();
.br
.fi
.PP
For most other operations, the path of the QUrlOperator must point to a directory. If you want to download a file you could do the following:
.PP
.nf
.br
    QUrlOperator op( "ftp://ftp.whatever.org/pub" );
.br
    // do some other stuff like op.listChildren() or op.mkdir( "new_dir" )
.br
    op.get( "a_file.txt" );
.br
.fi
.PP
This will get the data of ftp://ftp.whatever.org/pub/a_file.txt.
.PP
\fINever\fR do anything like this:
.PP
.nf
.br
    QUrlOperator op( "http://www.whatever.org/cgi-bin" );
.br
    op.get( "search.pl?cmd=Hello" ); // WRONG!
.br
.fi
.PP
If \fIlocation\fR is not empty and relative it must not contain any queries or references, just the name of a child. So if you need to specify a query or reference, do it as shown in the first example or specify the full URL (such as http://www.whatever.org/cgi-bin/search.pl?cmd=Hello) as \fIlocation\fR.
.PP
See also copy().
.SH "void QUrlOperator::getNetworkProtocol ()\fC [protected]\fR"
Finds a network protocol for the URL and deletes the old network protocol.
.SH "QUrlInfo QUrlOperator::info ( const QString & entry ) const\fC [virtual]\fR"
Returns the URL information for the child \fIentry\fR, or returns an empty QUrlInfo object if there is no information available about \fIentry\fR. Information about \fIentry\fR is only available after a successfully finished listChildren() operation.
.SH "bool QUrlOperator::isDir ( bool * ok = 0 )\fC [virtual]\fR"
Returns TRUE if the URL is a directory; otherwise returns FALSE. This may not always work correctly, if the protocol of the URL is something other than file (local filesystem). If you pass a bool pointer as the \fIok\fR argument, \fI*ok\fR is set to TRUE if the result of this function is known to be correct, and to FALSE otherwise.
.SH "void QUrlOperator::itemChanged ( QNetworkOperation * op )\fC [signal]\fR"
This signal is emitted whenever a file which is a child of the URL has been changed, for example by successfully calling rename(). \fIop\fR is a pointer to the operation object which contains all the information about the operation, including the state. \fCop->arg(0)\fR holds the original file name and \fCop->arg(1)\fR holds the new file name (if it was changed).
.PP
See also QNetworkOperation and QNetworkProtocol.
.SH "const QNetworkOperation * QUrlOperator::listChildren ()\fC [virtual]\fR"
Starts listing the children of this URL (e.g. the files in the directory). The start() signal is emitted before the first entry is listed and finished() is emitted after the last one. The newChildren() signal is emitted for each list of new entries. If an error occurs, the signal finished() is emitted, so be sure to check the state of the network operation pointer.
.PP
Because the operation may not be executed immediately, a pointer to the QNetworkOperation object created by this function is returned. This object contains all the data about the operation and is used to refer to this operation later (e.g. in the signals that are emitted by the QUrlOperator). The return value can also be 0 if the operation object couldn't be created.
.PP
The path of this QUrlOperator must to point to a directory (because the children of this directory will be listed), not to a file.
.SH "const QNetworkOperation * QUrlOperator::mkdir ( const QString & dirname )\fC [virtual]\fR"
Tries to create a directory (child) with the name \fIdirname\fR. If it is successful, a newChildren() signal with the new child is emitted, and the createdDirectory() signal with the information about the new child is also emitted. The finished() signal (with success or failure) is emitted after the operation has been processed, so check the state of the network operation object to see whether or not the operation was successful.
.PP
Because the operation will not be executed immediately, a pointer to the QNetworkOperation object created by this function is returned. This object contains all the data about the operation and is used to refer to this operation later (e.g. in the signals that are emitted by the QUrlOperator). The return value can also be 0 if the operation object couldn't be created.
.PP
The path of this QUrlOperator must to point to a directory (not a file) because the new directory will be created in this path.
.SH "QString QUrlOperator::nameFilter () const"
Returns the name filter of the URL.
.PP
See also QUrlOperator::setNameFilter() and QDir::nameFilter().
.SH "void QUrlOperator::newChildren ( const QValueList<QUrlInfo> & i, QNetworkOperation * op )\fC [signal]\fR"
This signal is emitted after listChildren() was called and new children (i.e. files) have been read from a list of files. \fIi\fR holds the information about the new files. \fIop\fR is a pointer to the operation object which contains all the information about the operation, including the state.
.PP
See also QNetworkOperation and QNetworkProtocol.
.SH "const QNetworkOperation * QUrlOperator::put ( const QByteArray & data, const QString & location = QString::null )\fC [virtual]\fR"
This function tells the network protocol to put \fIdata\fR in \fIlocation\fR. If \fIlocation\fR is empty (QString::null), it puts the \fIdata\fR in the location to which the URL points. What happens depends on the network protocol. Depending on the network protocol, some data might come back after putting data, in which case the data() signal is emitted. The dataTransferProgress() signal is emitted during processing of the operation. At the end, finished() (with success or failure) is emitted, so check the state of the network operation object to see whether or not the operation was successful.
.PP
If \fIlocation\fR is QString::null, the path of this QUrlOperator should point to a file when you use this operation. If \fIlocation\fR is not empty, it can be a relative (a child of the path to which the QUrlOperator points) or an absolute URL.
.PP
For putting some data to a file you can do the following:
.PP
.nf
.br
    QUrlOperator op( "ftp://ftp.whatever.com/home/me/filename.dat" );
.br
    op.put( data );
.br
.fi
.PP
For most other operations, the path of the QUrlOperator must point to a directory. If you want to upload data to a file you could do the following:
.PP
.nf
.br
    QUrlOperator op( "ftp://ftp.whatever.com/home/me" );
.br
    // do some other stuff like op.listChildren() or op.mkdir( "new_dir" )
.br
    op.put( data, "filename.dat" );
.br
.fi
.PP
This will upload the data to ftp://ftp.whatever.com/home/me/filename.dat.
.PP
See also copy().
.SH "const QNetworkOperation * QUrlOperator::remove ( const QString & filename )\fC [virtual]\fR"
Tries to remove the file (child) \fIfilename\fR. If it succeeds the removed() signal is emitted. finished() (with success or failure) is also emitted after the operation has been processed, so check the state of the network operation object to see whether or not the operation was successful.
.PP
Because the operation will not be executed immediately, a pointer to the QNetworkOperation object created by this function is returned. This object contains all the data about the operation and is used to refer to this operation later (e.g. in the signals that are emitted by the QUrlOperator). The return value can also be 0 if the operation object couldn't be created.
.PP
The path of this QUrlOperator must point to a directory; because if \fIfilename\fR is relative, it will try to remove it in this directory.
.SH "void QUrlOperator::removed ( QNetworkOperation * op )\fC [signal]\fR"
This signal is emitted when remove() has been succesful and the file has been removed.
.PP
\fIop\fR is a pointer to the operation object which contains all the information about the operation, including the state. \fCop->arg(0)\fR holds the name of the file that was removed.
.PP
See also QNetworkOperation and QNetworkProtocol.
.SH "const QNetworkOperation * QUrlOperator::rename ( const QString & oldname, const QString & newname )\fC [virtual]\fR"
Tries to rename the file (child) called \fIoldname\fR to \fInewname\fR. If it succeeds, the itemChanged() signal is emitted. finished() (with success or failure) is also emitted after the operation has been processed, so check the state of the network operation object to see whether or not the operation was successful.
.PP
Because the operation may not be executed immediately, a pointer to the QNetworkOperation object created by this function is returned. This object contains all the data about the operation and is used to refer to this operation later (e.g. in the signals that are emitted by the QUrlOperator). The return value can also be 0 if the operation object couldn't be created.
.PP
This path of this QUrlOperator must to point to a directory because \fIoldname\fR and \fInewname\fR are handled relative to this directory.
.SH "void QUrlOperator::setNameFilter ( const QString & nameFilter )\fC [virtual]\fR"
Sets the name filter of the URL to \fInameFilter\fR.
.PP
See also QDir::setNameFilter().
.SH "void QUrlOperator::start ( QNetworkOperation * op )\fC [signal]\fR"
Some operations (such as listChildren()) emit this signal when they start processing the operation. \fIop\fR is a pointer to the operation object which contains all the information about the operation, including the state.
.PP
See also QNetworkOperation and QNetworkProtocol.
.SH "void QUrlOperator::startedNextCopy ( const QPtrList<QNetworkOperation> & lst )\fC [signal]\fR"
This signal is emitted if copy() starts a new copy operation. \fIlst\fR contains all QNetworkOperations related to this copy operation.
.PP
See also copy().
.SH "void QUrlOperator::stop ()\fC [virtual]\fR"
Stops the current network operation and removes all this QUrlOperator's waiting network operations.
.SH RELATED FUNCTION DOCUMENTATION
.SH "void qInitNetworkProtocols ()"
This function registers the network protocols for FTP and HTTP. You must call this function before you use QUrlOperator for these protocols.
.PP
This function is declared in qnetwork.h.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qurloperator.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qurloperator.3qt) and the Qt
version (3.3.8).
