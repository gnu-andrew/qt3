'\" t
.TH QDockArea 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QDockArea \- Manages and lays out QDockWindows
.SH SYNOPSIS
\fC#include <qdockarea.h>\fR
.PP
Inherits QWidget.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "enum \fBHandlePosition\fR { Normal, Reverse }"
.br
.ti -1c
.BI "\fBQDockArea\fR ( Orientation o, HandlePosition h = Normal, QWidget * parent = 0, const char * name = 0 )"
.br
.ti -1c
.BI "\fB~QDockArea\fR ()"
.br
.ti -1c
.BI "void \fBmoveDockWindow\fR ( QDockWindow * w, const QPoint & p, const QRect & r, bool swap )"
.br
.ti -1c
.BI "void \fBremoveDockWindow\fR ( QDockWindow * w, bool makeFloating, bool swap, bool fixNewLines = TRUE )"
.br
.ti -1c
.BI "void \fBmoveDockWindow\fR ( QDockWindow * w, int index = -1 )"
.br
.ti -1c
.BI "bool \fBhasDockWindow\fR ( QDockWindow * w, int * index = 0 )"
.br
.ti -1c
.BI "Orientation \fBorientation\fR () const"
.br
.ti -1c
.BI "HandlePosition \fBhandlePosition\fR () const"
.br
.ti -1c
.BI "bool \fBisEmpty\fR () const"
.br
.ti -1c
.BI "int \fBcount\fR () const"
.br
.ti -1c
.BI "QPtrList<QDockWindow> \fBdockWindowList\fR () const"
.br
.ti -1c
.BI "bool \fBisDockWindowAccepted\fR ( QDockWindow * dw )"
.br
.ti -1c
.BI "void \fBsetAcceptDockWindow\fR ( QDockWindow * dw, bool accept )"
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "void \fBlineUp\fR ( bool keepNewLines )"
.br
.in -1c
.SS "Properties"
.in +1c
.ti -1c
.BI "int \fBcount\fR - the number of dock windows in the dock area  \fI(read " "only" ")\fR"
.br
.ti -1c
.BI "bool \fBempty\fR - whether the dock area is empty  \fI(read " "only" ")\fR"
.br
.ti -1c
.BI "HandlePosition \fBhandlePosition\fR - where the dock window splitter handle is placed in the dock area  \fI(read " "only" ")\fR"
.br
.ti -1c
.BI "Orientation \fBorientation\fR - the dock area's orientation  \fI(read " "only" ")\fR"
.br
.in -1c
.SH RELATED FUNCTION DOCUMENTATION
.in +1c
.ti -1c
.BI "QTextStream & \fBoperator<<\fR ( QTextStream & ts, const QDockArea & dockArea )"
.br
.ti -1c
.BI "QTextStream & \fBoperator>>\fR ( QTextStream & ts, QDockArea & dockArea )"
.br
.in -1c
.SH DESCRIPTION
The QDockArea class manages and lays out QDockWindows.
.PP
A QDockArea is a container which manages a list of QDockWindows which it lays out within its area. In cooperation with the QDockWindows it is responsible for the docking and undocking of QDockWindows and moving them inside the dock area. QDockAreas also handle the wrapping of QDockWindows to fill the available space as compactly as possible. QDockAreas can contain QToolBars since QToolBar is a QDockWindow subclass.
.PP
QMainWindow contains four QDockAreas which you can use for your QToolBars and QDockWindows, so in most situations you do not need to use the QDockArea class directly. Although QMainWindow contains support for its own dock areas it isn't convenient for adding new QDockAreas. If you need to create your own dock areas we suggest that you create a subclass of QWidget and add your QDockAreas to your subclass.
.PP
<center>
.ce 1
.B "[Image Omitted]"
.PP
</center>
.PP
\fILines\fR. QDockArea uses the concept of lines. A line is a horizontal region which may contain dock windows side-by-side. A dock area may have room for more than one line. When dock windows are docked into a dock area they are usually added at the right hand side of the top-most line that has room (unless manually placed by the user). When users move dock windows they may leave empty lines or gaps in non-empty lines. Dock windows can be lined up to minimize wasted space using the lineUp() function.
.PP
The QDockArea class maintains a position list of all its child dock windows. Dock windows are added to a dock area from position 0 onwards. Dock windows are laid out sequentially in position order from left to right, and in the case of multiple lines of dock windows, from top to bottom. If a dock window is floated it still retains its position since this is where the window will return if the user double clicks its caption. A dock window's position can be determined with hasDockWindow(). The position can be changed with moveDockWindow().
.PP
To dock or undock a dock window use QDockWindow::dock() and QDockWindow::undock() respectively. If you want to control which dock windows can dock in a dock area use setAcceptDockWindow(). To see if a dock area contains a particular dock window use hasDockWindow(); to see how many dock windows a dock area contains use count().
.PP
The streaming operators can write the positions of the dock windows in the dock area to a QTextStream. The positions can be read back later to restore the saved positions.
.PP
Save the positions to a QTextStream:
.PP
.nf
.br
    ts << *myDockArea;
.br
.fi
.PP
Restore the positions from a QTextStream:
.PP
.nf
.br
    ts >> *myDockArea;
.br
.fi
.PP
See also Main Window and Related Classes.
.SS "Member Type Documentation"
.SH "QDockArea::HandlePosition"
A dock window has two kinds of handles, the dock window handle used for dragging the dock window, and the splitter handle used to resize the dock window in relation to other dock windows using a splitter. (The splitter handle is only visible for docked windows.)
.PP
This enum specifies where the dock window splitter handle is placed in the dock area.
.TP
\fCQDockArea::Normal\fR - The splitter handles of dock windows are placed at the right or bottom.
.TP
\fCQDockArea::Reverse\fR - The splitter handles of dock windows are placed at the left or top.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QDockArea::QDockArea ( Orientation o, HandlePosition h = Normal, QWidget * parent = 0, const char * name = 0 )"
Constructs a QDockArea with orientation \fIo\fR, HandlePosition \fIh\fR, parent \fIparent\fR and called \fIname\fR.
.SH "QDockArea::~QDockArea ()"
Destroys the dock area and all the dock windows docked in the dock area.
.PP
Does not affect any floating dock windows or dock windows in other dock areas, even if they first appeared in this dock area. Floating dock windows are effectively top level windows and are not child windows of the dock area. When a floating dock window is docked (dragged into a dock area) its parent becomes the dock area.
.SH "int QDockArea::count () const"
Returns the number of dock windows in the dock area. See the "count" property for details.
.SH "QPtrList<QDockWindow> QDockArea::dockWindowList () const"
Returns a list of the dock windows in the dock area.
.SH "HandlePosition QDockArea::handlePosition () const"
Returns where the dock window splitter handle is placed in the dock area. See the "handlePosition" property for details.
.SH "bool QDockArea::hasDockWindow ( QDockWindow * w, int * index = 0 )"
Returns TRUE if the dock area contains the dock window \fIw\fR; otherwise returns FALSE. If \fIindex\fR is not 0 it will be set as follows: if the dock area contains the dock window \fI*index\fR is set to \fIw\fR's index position; otherwise \fI*index\fR is set to -1.
.SH "bool QDockArea::isDockWindowAccepted ( QDockWindow * dw )"
Returns TRUE if dock window \fIdw\fR could be docked into the dock area; otherwise returns FALSE.
.PP
See also setAcceptDockWindow().
.SH "bool QDockArea::isEmpty () const"
Returns TRUE if the dock area is empty; otherwise returns FALSE. See the "empty" property for details.
.SH "void QDockArea::lineUp ( bool keepNewLines )\fC [slot]\fR"
Lines up the dock windows in this dock area to minimize wasted space. If \fIkeepNewLines\fR is TRUE, only space within lines is cleaned up. If \fIkeepNewLines\fR is FALSE the number of lines might be changed.
.SH "void QDockArea::moveDockWindow ( QDockWindow * w, int index = -1 )"
Moves the QDockWindow \fIw\fR within the dock area. If \fIw\fR is not already docked in this area, \fIw\fR is docked first. If \fIindex\fR is -1 or larger than the number of docked widgets, \fIw\fR is appended at the end, otherwise it is inserted at the position \fIindex\fR.
.SH "void QDockArea::moveDockWindow ( QDockWindow * w, const QPoint & p, const QRect & r, bool swap )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Moves the dock window \fIw\fR inside the dock area where \fIp\fR is the new position (in global screen coordinates), \fIr\fR is the suggested rectangle of the dock window and \fIswap\fR specifies whether or not the orientation of the docked widget needs to be changed.
.PP
This function is used internally by QDockWindow. You shouldn't need to call it yourself.
.SH "Orientation QDockArea::orientation () const"
Returns the dock area's orientation. See the "orientation" property for details.
.SH "void QDockArea::removeDockWindow ( QDockWindow * w, bool makeFloating, bool swap, bool fixNewLines = TRUE )"
Removes the dock window \fIw\fR from the dock area. If \fImakeFloating\fR is TRUE, \fIw\fR gets floated, and if \fIswap\fR is TRUE, the orientation of \fIw\fR gets swapped. If \fIfixNewLines\fR is TRUE (the default) newlines in the area will be fixed.
.PP
You should never need to call this function yourself. Use QDockWindow::dock() and QDockWindow::undock() instead.
.SH "void QDockArea::setAcceptDockWindow ( QDockWindow * dw, bool accept )"
If \fIaccept\fR is TRUE, dock window \fIdw\fR can be docked in the dock area. If \fIaccept\fR is FALSE, dock window \fIdw\fR cannot be docked in the dock area.
.PP
See also isDockWindowAccepted().
.SS "Property Documentation"
.SH "int count"
This property holds the number of dock windows in the dock area.
.PP
Get this property's value with count().
.SH "bool empty"
This property holds whether the dock area is empty.
.PP
Get this property's value with isEmpty().
.SH "HandlePosition handlePosition"
This property holds where the dock window splitter handle is placed in the dock area.
.PP
The default position is Normal.
.PP
Get this property's value with handlePosition().
.SH "Orientation orientation"
This property holds the dock area's orientation.
.PP
There is no default value; the orientation is specified in the constructor.
.PP
Get this property's value with orientation().
.SH RELATED FUNCTION DOCUMENTATION
.SH "QTextStream & operator<< ( QTextStream & ts, const QDockArea & dockArea )"
Writes the layout of the dock windows in dock area \fIdockArea\fR to the text stream \fIts\fR.
.PP
See also operator>>().
.SH "QTextStream & operator>> ( QTextStream & ts, QDockArea & dockArea )"
Reads the layout description of the dock windows in dock area \fIdockArea\fR from the text stream \fIts\fR and restores it. The layout description must have been previously written by the operator<<() function.
.PP
See also operator<<().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qdockarea.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qdockarea.3qt) and the Qt
version (3.3.8).
