'\" t
.TH QFocusData 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QFocusData \- Maintains the list of widgets in the focus chain
.SH SYNOPSIS
\fC#include <qfocusdata.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "QWidget * \fBfocusWidget\fR () const"
.br
.ti -1c
.BI "QWidget * \fBhome\fR ()"
.br
.ti -1c
.BI "QWidget * \fBnext\fR ()"
.br
.ti -1c
.BI "QWidget * \fBprev\fR ()"
.br
.ti -1c
.BI "QWidget * \fBfirst\fR () const"
.br
.ti -1c
.BI "QWidget * \fBlast\fR () const"
.br
.ti -1c
.BI "int \fBcount\fR () const"
.br
.in -1c
.SH DESCRIPTION
The QFocusData class maintains the list of widgets in the focus chain.
.PP
This read-only list always contains at least one widget (i.e. the top-level widget). It provides a simple cursor which can be reset to the current focus widget using home(), or moved to its neighboring widgets using next() and prev(). You can also retrieve the count() of the number of widgets in the list. The list is a loop, so if you keep iterating, for example using next(), you will never come to the end.
.PP
Some widgets in the list may not accept focus. Widgets are added to the list as necessary, but not removed from it. This lets widgets change focus policy dynamically without disrupting the focus chain the user experiences. When a widget disables and re-enables tab focus, its position in the focus chain does not change.
.PP
When reimplementing QWidget::focusNextPrevChild() to provide special focus flow, you will usually call QWidget::focusData() to retrieve the focus data stored at the top-level widget. A top-level widget's focus data contains the focus list for its hierarchy of widgets.
.PP
The cursor may change at any time.
.PP
This class is \fInot\fR thread-safe.
.PP
See also QWidget::focusNextPrevChild(), QWidget::setTabOrder(), QWidget::focusPolicy, and Miscellaneous Classes.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "int QFocusData::count () const"
Returns the number of widgets in the focus chain.
.SH "QWidget * QFocusData::first () const"
Returns the first widget in the focus chain. The cursor is not modified.
.SH "QWidget * QFocusData::focusWidget () const"
Returns the widgets in the hierarchy that are in the focus chain.
.SH "QWidget * QFocusData::home ()"
Moves the cursor to the focusWidget() and returns that widget. You must call this before next() or prev() to iterate meaningfully.
.SH "QWidget * QFocusData::last () const"
Returns the last widget in the focus chain. The cursor is not modified.
.SH "QWidget * QFocusData::next ()"
Moves the cursor to the next widget in the focus chain. There is \fIalways\fR a next widget because the list is a loop.
.SH "QWidget * QFocusData::prev ()"
Moves the cursor to the previous widget in the focus chain. There
is \fIalways\fR a previous widget because the list is a loop.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qfocusdata.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qfocusdata.3qt) and the Qt
version (3.3.8).
