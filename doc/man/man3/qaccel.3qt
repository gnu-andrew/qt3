'\" t
.TH QAccel 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QAccel \- Handles keyboard accelerator and shortcut keys
.SH SYNOPSIS
\fC#include <qaccel.h>\fR
.PP
Inherits QObject.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQAccel\fR ( QWidget * parent, const char * name = 0 )"
.br
.ti -1c
.BI "\fBQAccel\fR ( QWidget * watch, QObject * parent, const char * name = 0 )"
.br
.ti -1c
.BI "\fB~QAccel\fR ()"
.br
.ti -1c
.BI "bool \fBisEnabled\fR () const"
.br
.ti -1c
.BI "void \fBsetEnabled\fR ( bool enable )"
.br
.ti -1c
.BI "uint \fBcount\fR () const"
.br
.ti -1c
.BI "int \fBinsertItem\fR ( const QKeySequence & key, int id = -1 )"
.br
.ti -1c
.BI "void \fBremoveItem\fR ( int id )"
.br
.ti -1c
.BI "void \fBclear\fR ()"
.br
.ti -1c
.BI "QKeySequence \fBkey\fR ( int id )"
.br
.ti -1c
.BI "int \fBfindKey\fR ( const QKeySequence & key ) const"
.br
.ti -1c
.BI "bool \fBisItemEnabled\fR ( int id ) const"
.br
.ti -1c
.BI "void \fBsetItemEnabled\fR ( int id, bool enable )"
.br
.ti -1c
.BI "bool \fBconnectItem\fR ( int id, const QObject * receiver, const char * member )"
.br
.ti -1c
.BI "bool \fBdisconnectItem\fR ( int id, const QObject * receiver, const char * member )"
.br
.ti -1c
.BI "void repairEventFilter ()  \fI(obsolete)\fR"
.br
.ti -1c
.BI "void \fBsetWhatsThis\fR ( int id, const QString & text )"
.br
.ti -1c
.BI "QString \fBwhatsThis\fR ( int id ) const"
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void \fBactivated\fR ( int id )"
.br
.ti -1c
.BI "void \fBactivatedAmbiguously\fR ( int id )"
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "QKeySequence \fBshortcutKey\fR ( const QString & str )"
.br
.ti -1c
.BI "QString keyToString ( QKeySequence k )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "QKeySequence stringToKey ( const QString & s )  \fI(obsolete)\fR"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual bool eventFilter ( QObject *, QEvent * )  \fI(obsolete)\fR"
.br
.in -1c
.SH DESCRIPTION
The QAccel class handles keyboard accelerator and shortcut keys.
.PP
A keyboard accelerator triggers an action when a certain key combination is pressed. The accelerator handles all keyboard activity for all the children of one top-level widget, so it is not affected by the keyboard focus.
.PP
In most cases, you will not need to use this class directly. Use the QAction class to create actions with accelerators that can be used in both menus and toolbars. If you're only interested in menus use QMenuData::insertItem() or QMenuData::setAccel() to make accelerators for operations that are also available on menus. Many widgets automatically generate accelerators, such as QButton, QGroupBox, QLabel (with QLabel::setBuddy()), QMenuBar and QTabBar. Example:
.PP
.nf
.br
        QPushButton p( "&Exit", parent ); // automatic shortcut ALT+Key_E
.br
        QPopupMenu *fileMenu = new fileMenu( parent );
.br
        fileMenu->insertItem( "Undo", parent, SLOT(undo()), CTRL+Key_Z );
.br
.fi
.PP
A QAccel contains a list of accelerator items that can be manipulated using insertItem(), removeItem(), clear(), key() and findKey().
.PP
Each accelerator item consists of an identifier and a QKeySequence. A single key sequence consists of a keyboard code combined with modifiers (SHIFT, CTRL, ALT or UNICODE_ACCEL). For example, \fCCTRL + Key_P\fR could be a shortcut for printing a document. The key codes are listed in qnamespace.h. As an alternative, use UNICODE_ACCEL with the unicode code point of the character. For example, \fCUNICODE_ACCEL + 'A'\fR gives the same accelerator as Key_A.
.PP
When an accelerator key is pressed, the accelerator sends out the signal activated() with a number that identifies this particular accelerator item. Accelerator items can also be individually connected, so that two different keys will activate two different slots (see connectItem() and disconnectItem()).
.PP
The activated() signal is \fInot\fR emitted when two or more accelerators match the same key. Instead, the first matching accelerator sends out the activatedAmbiguously() signal. By pressing the key multiple times, users can navigate between all matching accelerators. Some standard controls like QPushButton and QCheckBox connect the activatedAmbiguously() signal to the harmless setFocus() slot, whereas activated() is connected to a slot invoking the button's action. Most controls, like QLabel and QTabBar, treat activated() and activatedAmbiguously() as equivalent.
.PP
Use setEnabled() to enable or disable all the items in an accelerator, or setItemEnabled() to enable or disable individual items. An item is active only when both the QAccel and the item itself are enabled.
.PP
The function setWhatsThis() specifies a help text that appears when the user presses an accelerator key in What's This mode.
.PP
The accelerator will be deleted when \fIparent\fR is deleted, and will consume relevant key events until then.
.PP
Please note that the accelerator
.PP
.nf
.br
        accelerator->insertItem( QKeySequence("M") );
.br
.fi
can be triggered with both the 'M' key, and with Shift+M, unless a second accelerator is defined for the Shift+M combination.
.PP
Example:
.PP
.nf
.br
        QAccel *a = new QAccel( myWindow );        // create accels for myWindow
.br
        a->connectItem( a->insertItem(Key_P+CTRL), // adds Ctrl+P accelerator
.br
                        myWindow,                  // connected to myWindow's
.br
                        SLOT(printDoc()) );        // printDoc() slot
.br
.fi
.PP
See also QKeyEvent, QWidget::keyPressEvent(), QMenuData::setAccel(), QButton::accel, QLabel::setBuddy(), QKeySequence, GUI Design Handbook: Keyboard Shortcuts, and Miscellaneous Classes.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QAccel::QAccel ( QWidget * parent, const char * name = 0 )"
Constructs a QAccel object called \fIname\fR, with parent \fIparent\fR. The accelerator operates on \fIparent\fR.
.SH "QAccel::QAccel ( QWidget * watch, QObject * parent, const char * name = 0 )"
Constructs a QAccel object called \fIname\fR, that operates on \fIwatch\fR, and is a child of \fIparent\fR.
.PP
This constructor is not needed for normal application programming.
.SH "QAccel::~QAccel ()"
Destroys the accelerator object and frees all allocated resources.
.SH "void QAccel::activated ( int id )\fC [signal]\fR"
This signal is emitted when an accelerator key is pressed. \fIid\fR is a number that identifies this particular accelerator item.
.PP
See also activatedAmbiguously().
.SH "void QAccel::activatedAmbiguously ( int id )\fC [signal]\fR"
This signal is emitted when an accelerator key is pressed. \fIid\fR is a number that identifies this particular accelerator item.
.PP
See also activated().
.SH "void QAccel::clear ()"
Removes all accelerator items.
.SH "bool QAccel::connectItem ( int id, const QObject * receiver, const char * member )"
Connects the accelerator item \fIid\fR to the slot \fImember\fR of \fIreceiver\fR.
.PP
.nf
.br
        a->connectItem( 201, mainView, SLOT(quit()) );
.br
.fi
.PP
Of course, you can also send a signal as \fImember\fR.
.PP
Normally accelerators are connected to slots which then receive the \fCactivated(int id)\fR signal with the id of the accelerator item that was activated. If you choose to connect a specific accelerator item using this function, the activated() signal is emitted if the associated key sequence is pressed but no \fCactivated(int id)\fR signal is emitted.
.PP
See also disconnectItem().
.PP
Example: t14/gamebrd.cpp.
.SH "uint QAccel::count () const"
Returns the number of accelerator items in this accelerator.
.SH "bool QAccel::disconnectItem ( int id, const QObject * receiver, const char * member )"
Disconnects an accelerator item with id \fIid\fR from the function called \fImember\fR in the \fIreceiver\fR object.
.PP
See also connectItem().
.SH "bool QAccel::eventFilter ( QObject *, QEvent * )\fC [virtual protected]\fR"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code. serves no purpose anymore
.PP
Reimplemented from QObject.
.SH "int QAccel::findKey ( const QKeySequence & key ) const"
Returns the identifier of the accelerator item with the key code \fIkey\fR, or -1 if the item cannot be found.
.SH "int QAccel::insertItem ( const QKeySequence & key, int id = -1 )"
Inserts an accelerator item and returns the item's identifier.
.PP
\fIkey\fR is a key code and an optional combination of SHIFT, CTRL and ALT. \fIid\fR is the accelerator item id.
.PP
If \fIid\fR is negative, then the item will be assigned a unique negative identifier less than -1.
.PP
.nf
.br
        QAccel *a = new QAccel( myWindow );        // create accels for myWindow
.br
        a->insertItem( CTRL + Key_P, 200 );        // Ctrl+P, e.g. to print document
.br
        a->insertItem( ALT + Key_X, 201 );         // Alt+X, e.g. to quit
.br
        a->insertItem( UNICODE_ACCEL + 'q', 202 ); // Unicode 'q', e.g. to quit
.br
        a->insertItem( Key_D );                    // gets a unique negative id < -1
.br
        a->insertItem( CTRL + SHIFT + Key_P );     // gets a unique negative id < -1
.br
.fi
.PP
Example: t14/gamebrd.cpp.
.SH "bool QAccel::isEnabled () const"
Returns TRUE if the accelerator is enabled; otherwise returns FALSE.
.PP
See also setEnabled() and isItemEnabled().
.SH "bool QAccel::isItemEnabled ( int id ) const"
Returns TRUE if the accelerator item with the identifier \fIid\fR is enabled. Returns FALSE if the item is disabled or cannot be found.
.PP
See also setItemEnabled() and isEnabled().
.SH "QKeySequence QAccel::key ( int id )"
Returns the key sequence of the accelerator item with identifier \fIid\fR, or an invalid key sequence (0) if the id cannot be found.
.SH "QString QAccel::keyToString ( QKeySequence k )\fC [static]\fR"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
Creates an accelerator string for the key \fIk\fR. For instance CTRL+Key_O gives "Ctrl+O". The "Ctrl" etc. are translated (using QObject::tr()) in the "QAccel" context.
.PP
The function is superfluous. Cast the QKeySequence \fIk\fR to a QString for the same effect.
.SH "void QAccel::removeItem ( int id )"
Removes the accelerator item with the identifier \fIid\fR.
.SH "void QAccel::repairEventFilter ()"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code. serves no purpose anymore
.SH "void QAccel::setEnabled ( bool enable )"
Enables the accelerator if \fIenable\fR is TRUE, or disables it if \fIenable\fR is FALSE.
.PP
Individual keys can also be enabled or disabled using setItemEnabled(). To work, a key must be an enabled item in an enabled QAccel.
.PP
See also isEnabled() and setItemEnabled().
.SH "void QAccel::setItemEnabled ( int id, bool enable )"
Enables the accelerator item with the identifier \fIid\fR if \fIenable\fR is TRUE, and disables item \fIid\fR if \fIenable\fR is FALSE.
.PP
To work, an item must be enabled and be in an enabled QAccel.
.PP
See also isItemEnabled() and isEnabled().
.SH "void QAccel::setWhatsThis ( int id, const QString & text )"
Sets a What's This help text for the accelerator item \fIid\fR to \fItext\fR.
.PP
The text will be shown when the application is in What's This mode and the user hits the accelerator key.
.PP
To set What's This help on a menu item (with or without an accelerator key), use QMenuData::setWhatsThis().
.PP
See also whatsThis(), QWhatsThis::inWhatsThisMode(), QMenuData::setWhatsThis(), and QAction::whatsThis.
.SH "QKeySequence QAccel::shortcutKey ( const QString & str )\fC [static]\fR"
Returns the shortcut key sequence for \fIstr\fR, or an invalid key sequence (0) if \fIstr\fR has no shortcut sequence.
.PP
For example, shortcutKey("E&xit") returns ALT+Key_X, shortcutKey("&Quit") returns ALT+Key_Q and shortcutKey("Quit") returns 0. (In code that does not inherit the Qt namespace class, you must write e.g. Qt::ALT+Qt::Key_Q.)
.PP
We provide a list of common accelerators in English. At the time of writing, Microsoft and Open Group do not appear to have issued equivalent recommendations for other languages.
.SH "QKeySequence QAccel::stringToKey ( const QString & s )\fC [static]\fR"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
Returns an accelerator code for the string \fIs\fR. For example" Ctrl+O" gives CTRL+UNICODE_ACCEL+'O'. The strings "Ctrl"," Shift", "Alt" are recognized, as well as their translated equivalents in the "QAccel" context (using QObject::tr()). Returns 0 if \fIs\fR is not recognized.
.PP
This function is typically used with tr(), so that accelerator keys can be replaced in translations:
.PP
.nf
.br
    QPopupMenu *file = new QPopupMenu( this );
.br
    file->insertItem( p1, tr("&Open..."), this, SLOT(open()),
.br
                      QAccel::stringToKey(tr("Ctrl+O", "File|Open")) );
.br
.fi
.PP
Notice the \fC"File|Open"\fR translator comment. It is by no means necessary, but it provides some context for the human translator.
.PP
The function is superfluous. Construct a QKeySequence from the string \fIs\fR for the same effect.
.PP
See also QObject::tr() and Internationalization with Qt.
.PP
Example: i18n/mywidget.cpp.
.SH "QString QAccel::whatsThis ( int id ) const"
Returns the What's This help text for the specified item \fIid\fR or QString::null if no text has been specified.
.PP
See also setWhatsThis().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qaccel.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qaccel.3qt) and the Qt
version (3.3.8).
