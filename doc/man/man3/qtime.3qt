'\" t
.TH QTime 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QTime \- Clock time functions
.SH SYNOPSIS
All the functions in this class are reentrant when Qt is built with thread support.</p>
.PP
\fC#include <qdatetime.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQTime\fR ()"
.br
.ti -1c
.BI "\fBQTime\fR ( int h, int m, int s = 0, int ms = 0 )"
.br
.ti -1c
.BI "bool \fBisNull\fR () const"
.br
.ti -1c
.BI "bool \fBisValid\fR () const"
.br
.ti -1c
.BI "int \fBhour\fR () const"
.br
.ti -1c
.BI "int \fBminute\fR () const"
.br
.ti -1c
.BI "int \fBsecond\fR () const"
.br
.ti -1c
.BI "int \fBmsec\fR () const"
.br
.ti -1c
.BI "QString \fBtoString\fR ( Qt::DateFormat f = Qt::TextDate ) const"
.br
.ti -1c
.BI "QString \fBtoString\fR ( const QString & format ) const"
.br
.ti -1c
.BI "bool \fBsetHMS\fR ( int h, int m, int s, int ms = 0 )"
.br
.ti -1c
.BI "QTime \fBaddSecs\fR ( int nsecs ) const"
.br
.ti -1c
.BI "int \fBsecsTo\fR ( const QTime & t ) const"
.br
.ti -1c
.BI "QTime \fBaddMSecs\fR ( int ms ) const"
.br
.ti -1c
.BI "int \fBmsecsTo\fR ( const QTime & t ) const"
.br
.ti -1c
.BI "bool \fBoperator==\fR ( const QTime & t ) const"
.br
.ti -1c
.BI "bool \fBoperator!=\fR ( const QTime & t ) const"
.br
.ti -1c
.BI "bool \fBoperator<\fR ( const QTime & t ) const"
.br
.ti -1c
.BI "bool \fBoperator<=\fR ( const QTime & t ) const"
.br
.ti -1c
.BI "bool \fBoperator>\fR ( const QTime & t ) const"
.br
.ti -1c
.BI "bool \fBoperator>=\fR ( const QTime & t ) const"
.br
.ti -1c
.BI "void \fBstart\fR ()"
.br
.ti -1c
.BI "int \fBrestart\fR ()"
.br
.ti -1c
.BI "int \fBelapsed\fR () const"
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "QTime \fBcurrentTime\fR ()"
.br
.ti -1c
.BI "QTime \fBcurrentTime\fR ( Qt::TimeSpec ts )"
.br
.ti -1c
.BI "QTime \fBfromString\fR ( const QString & s, Qt::DateFormat f = Qt::TextDate )"
.br
.ti -1c
.BI "bool \fBisValid\fR ( int h, int m, int s, int ms = 0 )"
.br
.in -1c
.SH RELATED FUNCTION DOCUMENTATION
.in +1c
.ti -1c
.BI "QDataStream & \fBoperator<<\fR ( QDataStream & s, const QTime & t )"
.br
.ti -1c
.BI "QDataStream & \fBoperator>>\fR ( QDataStream & s, QTime & t )"
.br
.in -1c
.SH DESCRIPTION
The QTime class provides clock time functions.
.PP
A QTime object contains a clock time, i.e. the number of hours, minutes, seconds, and milliseconds since midnight. It can read the current time from the system clock and measure a span of elapsed time. It provides functions for comparing times and for manipulating a time by adding a number of (milli)seconds.
.PP
QTime uses the 24-hour clock format; it has no concept of AM/PM. It operates in local time; it knows nothing about time zones or daylight savings time.
.PP
A QTime object is typically created either by giving the number of hours, minutes, seconds, and milliseconds explicitly, or by using the static function currentTime(), which creates a QTime object that contains the system's clock time. Note that the accuracy depends on the accuracy of the underlying operating system; not all systems provide 1-millisecond accuracy.
.PP
The hour(), minute(), second(), and msec() functions provide access to the number of hours, minutes, seconds, and milliseconds of the time. The same information is provided in textual format by the toString() function.
.PP
QTime provides a full set of operators to compare two QTime objects. One time is considered smaller than another if it is earlier than the other.
.PP
The time a given number of seconds or milliseconds later than a given time can be found using the addSecs() or addMSecs() functions. Correspondingly, the number of (milli)seconds between two times can be found using the secsTo() or msecsTo() functions.
.PP
QTime can be used to measure a span of elapsed time using the start(), restart(), and elapsed() functions.
.PP
See also QDate, QDateTime, and Time and Date.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QTime::QTime ()"
Constructs the time 0 hours, minutes, seconds and milliseconds, i.e. 00:00:00.000 (midnight). This is a valid time.
.PP
See also isValid().
.SH "QTime::QTime ( int h, int m, int s = 0, int ms = 0 )"
Constructs a time with hour \fIh\fR, minute \fIm\fR, seconds \fIs\fR and milliseconds \fIms\fR.
.PP
\fIh\fR must be in the range 0..23, \fIm\fR and \fIs\fR must be in the range 0..59, and \fIms\fR must be in the range 0..999.
.PP
See also isValid().
.SH "QTime QTime::addMSecs ( int ms ) const"
Returns a QTime object containing a time \fIms\fR milliseconds later than the time of this object (or earlier if \fIms\fR is negative).
.PP
Note that the time will wrap if it passes midnight. See addSecs() for an example.
.PP
See also addSecs() and msecsTo().
.SH "QTime QTime::addSecs ( int nsecs ) const"
Returns a QTime object containing a time \fInsecs\fR seconds later than the time of this object (or earlier if \fInsecs\fR is negative).
.PP
Note that the time will wrap if it passes midnight.
.PP
Example:
.PP
.nf
.br
    QTime n( 14, 0, 0 );                // n == 14:00:00
.br
    QTime t;
.br
    t = n.addSecs( 70 );                // t == 14:01:10
.br
    t = n.addSecs( -70 );               // t == 13:58:50
.br
    t = n.addSecs( 10*60*60 + 5 );      // t == 00:00:05
.br
    t = n.addSecs( -15*60*60 );         // t == 23:00:00
.br
.fi
.PP
See also addMSecs(), secsTo(), and QDateTime::addSecs().
.SH "QTime QTime::currentTime ( Qt::TimeSpec ts )\fC [static]\fR"
Returns the current time as reported by the system clock, for the TimeSpec \fIts\fR. The default TimeSpec is LocalTime.
.PP
Note that the accuracy depends on the accuracy of the underlying operating system; not all systems provide 1-millisecond accuracy.
.PP
See also Qt::TimeSpec.
.PP
Examples:
.)l aclock/aclock.cpp, dclock/dclock.cpp, t12/cannon.cpp, and tictac/tictac.cpp.
.SH "QTime QTime::currentTime ()\fC [static]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Returns the current time as reported by the system clock.
.PP
Note that the accuracy depends on the accuracy of the underlying operating system; not all systems provide 1-millisecond accuracy.
.SH "int QTime::elapsed () const"
Returns the number of milliseconds that have elapsed since the last time start() or restart() was called.
.PP
Note that the counter wraps to zero 24 hours after the last call to start() or restart.
.PP
Note that the accuracy depends on the accuracy of the underlying operating system; not all systems provide 1-millisecond accuracy.
.PP
\fBWarning:\fR If the system's clock setting has been changed since the last time start() or restart() was called, the result is undefined. This can happen when daylight savings time is turned on or off.
.PP
See also start() and restart().
.SH "QTime QTime::fromString ( const QString & s, Qt::DateFormat f = Qt::TextDate )\fC [static]\fR"
Returns the representation \fIs\fR as a QTime using the format \fIf\fR, or an invalid time if this is not possible.
.PP
\fBWarning:\fR Note that Qt::LocalDate cannot be used here.
.SH "int QTime::hour () const"
Returns the hour part (0..23) of the time.
.PP
Examples:
.)l aclock/aclock.cpp and tictac/tictac.cpp.
.SH "bool QTime::isNull () const"
Returns TRUE if the time is equal to 00:00:00.000; otherwise returns FALSE. A null time is valid.
.PP
See also isValid().
.SH "bool QTime::isValid () const"
Returns TRUE if the time is valid; otherwise returns FALSE. The time 23:30:55.746 is valid, whereas 24:12:30 is invalid.
.PP
See also isNull().
.SH "bool QTime::isValid ( int h, int m, int s, int ms = 0 )\fC [static]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Returns TRUE if the specified time is valid; otherwise returns FALSE.
.PP
The time is valid if \fIh\fR is in the range 0..23, \fIm\fR and \fIs\fR are in the range 0..59, and \fIms\fR is in the range 0..999.
.PP
Example:
.PP
.nf
.br
    QTime::isValid(21, 10, 30); // returns TRUE
.br
    QTime::isValid(22, 5,  62); // returns FALSE
.br
.fi
.SH "int QTime::minute () const"
Returns the minute part (0..59) of the time.
.PP
Examples:
.)l aclock/aclock.cpp and tictac/tictac.cpp.
.SH "int QTime::msec () const"
Returns the millisecond part (0..999) of the time.
.SH "int QTime::msecsTo ( const QTime & t ) const"
Returns the number of milliseconds from this time to \fIt\fR (which is negative if \fIt\fR is earlier than this time).
.PP
Because QTime measures time within a day and there are 86400 seconds in a day, the result is always between -86400000 and 86400000 msec.
.PP
See also secsTo().
.SH "bool QTime::operator!= ( const QTime & t ) const"
Returns TRUE if this time is different from \fIt\fR; otherwise returns FALSE.
.SH "bool QTime::operator< ( const QTime & t ) const"
Returns TRUE if this time is earlier than \fIt\fR; otherwise returns FALSE.
.SH "bool QTime::operator<= ( const QTime & t ) const"
Returns TRUE if this time is earlier than or equal to \fIt\fR; otherwise returns FALSE.
.SH "bool QTime::operator== ( const QTime & t ) const"
Returns TRUE if this time is equal to \fIt\fR; otherwise returns FALSE.
.SH "bool QTime::operator> ( const QTime & t ) const"
Returns TRUE if this time is later than \fIt\fR; otherwise returns FALSE.
.SH "bool QTime::operator>= ( const QTime & t ) const"
Returns TRUE if this time is later than or equal to \fIt\fR; otherwise returns FALSE.
.SH "int QTime::restart ()"
Sets this time to the current time and returns the number of milliseconds that have elapsed since the last time start() or restart() was called.
.PP
This function is guaranteed to be atomic and is thus very handy for repeated measurements. Call start() to start the first measurement and then restart() for each later measurement.
.PP
Note that the counter wraps to zero 24 hours after the last call to start() or restart().
.PP
\fBWarning:\fR If the system's clock setting has been changed since the last time start() or restart() was called, the result is undefined. This can happen when daylight savings time is turned on or off.
.PP
See also start(), elapsed(), and currentTime().
.SH "int QTime::second () const"
Returns the second part (0..59) of the time.
.PP
Example: tictac/tictac.cpp.
.SH "int QTime::secsTo ( const QTime & t ) const"
Returns the number of seconds from this time to \fIt\fR (which is negative if \fIt\fR is earlier than this time).
.PP
Because QTime measures time within a day and there are 86400 seconds in a day, the result is always between -86400 and 86400.
.PP
See also addSecs() and QDateTime::secsTo().
.PP
Example: t12/cannon.cpp.
.SH "bool QTime::setHMS ( int h, int m, int s, int ms = 0 )"
Sets the time to hour \fIh\fR, minute \fIm\fR, seconds \fIs\fR and milliseconds \fIms\fR.
.PP
\fIh\fR must be in the range 0..23, \fIm\fR and \fIs\fR must be in the range 0..59, and \fIms\fR must be in the range 0..999. Returns TRUE if the set time is valid; otherwise returns FALSE.
.PP
See also isValid().
.SH "void QTime::start ()"
Sets this time to the current time. This is practical for timing:
.PP
.nf
.br
    QTime t;
.br
    t.start();
.br
    some_lengthy_task();
.br
    qDebug( "Time elapsed: %d ms", t.elapsed() );
.br
.fi
.PP
See also restart(), elapsed(), and currentTime().
.SH "QString QTime::toString ( const QString & format ) const"
Returns the time as a string. The \fIformat\fR parameter determines the format of the result string.
.PP
These expressions may be used:
.PP
<center>.nf
.TS
l - l. Expression Output h the hour without a leading zero (0..23 or 1..12 if AM/PM display) hh the hour with a leading zero (00..23 or 01..12 if AM/PM display) m the minute without a leading zero (0..59) mm the minute with a leading zero (00..59) s the second whithout a leading zero (0..59) ss the second whith a leading zero (00..59) z the milliseconds without leading zeroes (0..999) zzz the milliseconds with leading zeroes (000..999) AP use AM/PM display. \fIAP\fR will be replaced by either "AM" or "PM". ap
.TE
.fi
</center>
.PP
All other input characters will be ignored.
.PP
Example format strings (assuming that the QTime is 14:13:09.042)
.PP
<center>.nf
.TS
l - l. Format Result hh:mm:ss.zzz 14:13:09.042 h:m:s ap
.TE
.fi
</center>
.PP
If the time is an invalid time, then QString::null will be returned.
.PP
See also QDate::toString() and QDateTime::toString().
.SH "QString QTime::toString ( Qt::DateFormat f = Qt::TextDate ) const"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Returns the time as a string. Milliseconds are not included. The \fIf\fR parameter determines the format of the string.
.PP
If \fIf\fR is Qt::TextDate, the string format is HH:MM:SS; e.g. 1 second before midnight would be "23:59:59".
.PP
If \fIf\fR is Qt::ISODate, the string format corresponds to the ISO 8601 extended specification for representations of dates, which is also HH:MM:SS.
.PP
If \fIf\fR is Qt::LocalDate, the string format depends on the locale settings of the system.
.PP
If the time is an invalid time, then QString::null will be returned.
.SH RELATED FUNCTION DOCUMENTATION
.SH "QDataStream & operator<< ( QDataStream & s, const QTime & t )"
Writes time \fIt\fR to the stream \fIs\fR.
.PP
See also Format of the QDataStream operators.
.SH "QDataStream & operator>> ( QDataStream & s, QTime & t )"
Reads a time from the stream \fIs\fR into \fIt\fR.
.PP
See also Format of the QDataStream operators.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qtime.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qtime.3qt) and the Qt
version (3.3.8).
