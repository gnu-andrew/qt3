'\" t
.TH QMapConstIterator 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QMapConstIterator \- Iterator for QMap
.SH SYNOPSIS
\fC#include <qmap.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "typedef std::bidirectional_iterator_tag \fBiterator_category\fR"
.br
.ti -1c
.BI "typedef T \fBvalue_type\fR"
.br
.ti -1c
.BI "typedef const T * \fBpointer\fR"
.br
.ti -1c
.BI "typedef const T & \fBreference\fR"
.br
.ti -1c
.BI "\fBQMapConstIterator\fR ()"
.br
.ti -1c
.BI "\fBQMapConstIterator\fR ( QMapNode<K, T> * p )"
.br
.ti -1c
.BI "\fBQMapConstIterator\fR ( const QMapConstIterator<K, T> & it )"
.br
.ti -1c
.BI "\fBQMapConstIterator\fR ( const QMapIterator<K, T> & it )"
.br
.ti -1c
.BI "bool \fBoperator==\fR ( const QMapConstIterator<K, T> & it ) const"
.br
.ti -1c
.BI "bool \fBoperator!=\fR ( const QMapConstIterator<K, T> & it ) const"
.br
.ti -1c
.BI "const T & \fBoperator*\fR () const"
.br
.ti -1c
.BI "const K & \fBkey\fR () const"
.br
.ti -1c
.BI "const T & \fBdata\fR () const"
.br
.ti -1c
.BI "QMapConstIterator<K, T> & \fBoperator++\fR ()"
.br
.ti -1c
.BI "QMapConstIterator<K, T> \fBoperator++\fR ( int )"
.br
.ti -1c
.BI "QMapConstIterator<K, T> & \fBoperator--\fR ()"
.br
.ti -1c
.BI "QMapConstIterator<K, T> \fBoperator--\fR ( int )"
.br
.in -1c
.SH DESCRIPTION
The QMapConstIterator class provides an iterator for QMap.
.PP
In contrast to QMapIterator, this class is used to iterate over a const map. It does not allow you to modify the values of the map because this would break the const semantics.
.PP
For more information on QMap iterators, see QMapIterator and the QMap example.
.PP
See also QMap, QMapIterator, Qt Template Library Classes, and Non-GUI Classes.
.SS "Member Type Documentation"
.SH "QMapConstIterator::iterator_category"
The type of iterator category, \fCstd::bidirectional_iterator_tag\fR.
.SH "QMapConstIterator::pointer"
Const pointer to value_type.
.SH "QMapConstIterator::reference"
Const reference to value_type.
.SH "QMapConstIterator::value_type"
The type of const value.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QMapConstIterator::QMapConstIterator ()"
Constructs an uninitialized iterator.
.SH "QMapConstIterator::QMapConstIterator ( QMapNode<K, T> * p )"
Constructs an iterator starting at node \fIp\fR.
.SH "QMapConstIterator::QMapConstIterator ( const QMapConstIterator<K, T> & it )"
Constructs a copy of the iterator, \fIit\fR.
.SH "QMapConstIterator::QMapConstIterator ( const QMapIterator<K, T> & it )"
Constructs a copy of the iterator, \fIit\fR.
.SH "const T & QMapConstIterator::data () const"
Returns a const reference to the current item's data.
.SH "const K & QMapConstIterator::key () const"
Returns a const reference to the current item's key.
.SH "bool QMapConstIterator::operator!= ( const QMapConstIterator<K, T> & it ) const"
Compares the iterator to the \fIit\fR iterator and returns FALSE if they point to the same item; otherwise returns TRUE.
.SH "const T & QMapConstIterator::operator* () const"
Dereference operator. Returns a const reference to the current item's data. The same as data().
.SH "QMapConstIterator<K, T> & QMapConstIterator::operator++ ()"
Prefix ++ makes the succeeding item current and returns an iterator pointing to the new current item. The iterator cannot check whether it reached the end of the map. Incrementing the iterator returned by end() causes undefined results.
.SH "QMapConstIterator<K, T> QMapConstIterator::operator++ ( int )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Postfix ++ makes the succeeding item current and returns an iterator pointing to the new current item. The iterator cannot check whether it reached the end of the map. Incrementing the iterator returned by end() causes undefined results.
.SH "QMapConstIterator<K, T> & QMapConstIterator::operator-- ()"
Prefix -- makes the previous item current and returns an iterator pointing to the new current item. The iterator cannot check whether it reached the beginning of the map. Decrementing the iterator returned by begin() causes undefined results.
.SH "QMapConstIterator<K, T> QMapConstIterator::operator-- ( int )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Postfix -- makes the previous item current and returns an iterator pointing to the new current item. The iterator cannot check whether it reached the beginning of the map. Decrementing the iterator returned by begin() causes undefined results.
.SH "bool QMapConstIterator::operator== ( const QMapConstIterator<K, T> & it ) const"
Compares the iterator to the \fIit\fR iterator and returns TRUE if
they point to the same item; otherwise returns FALSE.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qmapconstiterator.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qmapconstiterator.3qt) and the Qt
version (3.3.8).
