'\" t
.TH QSemaphore 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QSemaphore \- Robust integer semaphore
.SH SYNOPSIS
All the functions in this class are thread-safe when Qt is built with thread support.</p>
.PP
\fC#include <qsemaphore.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQSemaphore\fR ( int maxcount )"
.br
.ti -1c
.BI "virtual \fB~QSemaphore\fR ()"
.br
.ti -1c
.BI "int \fBavailable\fR () const"
.br
.ti -1c
.BI "int \fBtotal\fR () const"
.br
.ti -1c
.BI "int \fBoperator++\fR ( int )"
.br
.ti -1c
.BI "int \fBoperator--\fR ( int )"
.br
.ti -1c
.BI "int \fBoperator+=\fR ( int n )"
.br
.ti -1c
.BI "int \fBoperator-=\fR ( int n )"
.br
.ti -1c
.BI "bool \fBtryAccess\fR ( int n )"
.br
.in -1c
.SH DESCRIPTION
The QSemaphore class provides a robust integer semaphore.
.PP
A QSemaphore can be used to serialize thread execution, in a similar way to a QMutex. A semaphore differs from a mutex, in that a semaphore can be accessed by more than one thread at a time.
.PP
For example, suppose we have an application that stores data in a large tree structure. The application creates 10 threads (commonly called a thread pool) to perform searches on the tree. When the application searches the tree for some piece of data, it uses one thread per base node to do the searching. A semaphore could be used to make sure that two threads don't try to search the same branch of the tree at the same time.
.PP
A non-computing example of a semaphore would be dining at a restuarant. A semaphore is initialized to have a maximum count equal to the number of chairs in the restuarant. As people arrive, they want a seat. As seats are filled, the semaphore is accessed, once per person. As people leave, the access is released, allowing more people to enter. If a party of 10 people want to be seated, but there are only 9 seats, those 10 people will wait, but a party of 4 people would be seated (taking the available seats to 5, making the party of 10 people wait longer).
.PP
When a semaphore is created it is given a number which is the maximum number of concurrent accesses it will permit. Accesses to the sempahore are gained using operator++() or operator+=(), and released with operator--() or operator-=(). The number of accesses allowed is retrieved with available(), and the total number with total(). Note that the incrementing functions will block if there aren't enough available accesses. Use tryAccess() if you want to acquire accesses without blocking.
.PP
See also Environment Classes and Threading.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QSemaphore::QSemaphore ( int maxcount )"
Creates a new semaphore. The semaphore can be concurrently accessed at most \fImaxcount\fR times.
.SH "QSemaphore::~QSemaphore ()\fC [virtual]\fR"
Destroys the semaphore.
.PP
\fBWarning:\fR If you destroy a semaphore that has accesses in use the resultant behavior is undefined.
.SH "int QSemaphore::available () const"
Returns the number of accesses currently available to the semaphore.
.SH "int QSemaphore::operator++ ( int )"
Postfix ++ operator.
.PP
Try to get access to the semaphore. If available() == 0, this call will block until it can get access, i.e. until available() > 0.
.SH "int QSemaphore::operator+= ( int n )"
Try to get access to the semaphore. If available() < \fIn\fR, this call will block until it can get all the accesses it wants, i.e. until available() >= \fIn\fR.
.SH "int QSemaphore::operator-- ( int )"
Postfix -- operator.
.PP
Release access of the semaphore. This wakes all threads waiting for access to the semaphore.
.SH "int QSemaphore::operator-= ( int n )"
Release \fIn\fR accesses to the semaphore.
.SH "int QSemaphore::total () const"
Returns the total number of accesses to the semaphore.
.SH "bool QSemaphore::tryAccess ( int n )"
Try to get access to the semaphore. If available() < \fIn\fR, this
function will return FALSE immediately. If available() >= \fIn\fR,
this function will take \fIn\fR accesses and return TRUE. This
function does \fInot\fR block.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qsemaphore.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qsemaphore.3qt) and the Qt
version (3.3.8).
