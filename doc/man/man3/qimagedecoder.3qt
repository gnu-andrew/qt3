'\" t
.TH QImageDecoder 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QImageDecoder \- Incremental image decoder for all supported image formats
.SH SYNOPSIS
\fC#include <qasyncimageio.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQImageDecoder\fR ( QImageConsumer * c )"
.br
.ti -1c
.BI "\fB~QImageDecoder\fR ()"
.br
.ti -1c
.BI "const QImage & \fBimage\fR ()"
.br
.ti -1c
.BI "int \fBdecode\fR ( const uchar * buffer, int length )"
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "const char * \fBformatName\fR ( const uchar * buffer, int length )"
.br
.ti -1c
.BI "QImageFormatType * \fBformat\fR ( const char * name )"
.br
.ti -1c
.BI "QStrList \fBinputFormats\fR ()"
.br
.ti -1c
.BI "void \fBregisterDecoderFactory\fR ( QImageFormatType * f )"
.br
.ti -1c
.BI "void \fBunregisterDecoderFactory\fR ( QImageFormatType * f )"
.br
.in -1c
.SH DESCRIPTION
The QImageDecoder class is an incremental image decoder for all supported image formats.
.PP
New formats are installed by creating objects of class QImageFormatType; the QMovie class can be used for all installed incremental image formats. QImageDecoder is only useful for creating new ways of feeding data to an QImageConsumer.
.PP
A QImageDecoder is a machine that decodes images. It takes encoded image data via its decode() method and expresses its decoding by supplying information to a QImageConsumer. It implements its decoding by using a QImageFormat created by one of the currently-existing QImageFormatType factory objects.
.PP
QImageFormatType and QImageFormat are the classes that you might need to implement support for additional image formats.
.PP
Qt supports GIF reading if it is configured that way during installation (see qgif.h). If it is, we are required to state that" The Graphics Interchange Format(c) is the Copyright property of CompuServe Incorporated. GIF(sm) is a Service Mark property of CompuServe Incorporated."
.PP
\fBWarning:\fR If you are in a country that recognizes software patents and in which Unisys holds a patent on LZW compression and/or decompression and you want to use GIF, Unisys may require you to license that technology. Such countries include Canada, Japan, the USA, France, Germany, Italy and the UK.
.PP
GIF support may be removed completely in a future version of Qt. We recommend using the MNG or PNG format.
.PP
See also Graphics Classes, Image Processing Classes, and Multimedia Classes.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QImageDecoder::QImageDecoder ( QImageConsumer * c )"
Constructs a QImageDecoder that will send change information to the QImageConsumer \fIc\fR.
.SH "QImageDecoder::~QImageDecoder ()"
Destroys a QImageDecoder. The image it built is destroyed. The decoder built by the factory for the file format is destroyed. The consumer for which it decoded the image is \fInot\fR destroyed.
.SH "int QImageDecoder::decode ( const uchar * buffer, int length )"
Call this function to decode some data into image changes. The data in \fIbuffer\fR will be decoded, sending change information to the QImageConsumer of this QImageDecoder until one of the change functions of the consumer returns FALSE. The length of the data is given in \fIlength\fR.
.PP
Returns the number of bytes consumed: 0 if consumption is complete, and -1 if decoding fails due to invalid data.
.SH "QImageFormatType * QImageDecoder::format ( const char * name )\fC [static]\fR"
Returns a QImageFormatType by name. This might be used when the user needs to force data to be interpreted as being in a certain format. \fIname\fR is one of the formats listed by QImageDecoder::inputFormats(). Note that you will still need to supply decodable data to result->decoderFor() before you can begin decoding the data.
.SH "const char * QImageDecoder::formatName ( const uchar * buffer, int length )\fC [static]\fR"
Call this function to find the name of the format of the given header. The returned string is statically allocated. The function will look at the first \fIlength\fR characters in the \fIbuffer\fR.
.PP
Returns 0 if the format is not recognized.
.SH "const QImage & QImageDecoder::image ()"
Returns the image currently being decoded.
.SH "QStrList QImageDecoder::inputFormats ()\fC [static]\fR"
Returns a sorted list of formats for which asynchronous loading is supported.
.SH "void QImageDecoder::registerDecoderFactory ( QImageFormatType * f )\fC [static]\fR"
Registers the new QImageFormatType \fIf\fR. This is not needed in application code because factories call this themselves.
.SH "void QImageDecoder::unregisterDecoderFactory ( QImageFormatType * f )\fC [static]\fR"
Unregisters the QImageFormatType \fIf\fR. This is not needed in
application code because factories call this themselves.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qimagedecoder.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qimagedecoder.3qt) and the Qt
version (3.3.8).
