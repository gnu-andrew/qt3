'\" t
.TH Qt 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
Qt \- Namespace for miscellaneous identifiers that need to be global-like
.SH SYNOPSIS
\fC#include <qnamespace.h>\fR
.PP
Inherited by QObject, QPixmap, QBrush, QCanvasItem, QCursor, QPainter, QEvent, QIconViewItem, QKeySequence, QListViewItem, QCustomMenuItem, QPen, QStyleSheetItem, QSyntaxHighlighter, QTab, QTableItem, QThread, QToolTip, and QWhatsThis.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "enum \fBButtonState\fR { NoButton = 0x0000, LeftButton = 0x0001, RightButton = 0x0002, MidButton = 0x0004, MouseButtonMask = 0x0007, ShiftButton = 0x0100, ControlButton = 0x0200, AltButton = 0x0400, MetaButton = 0x0800, KeyButtonMask = 0x0f00, Keypad = 0x4000 }"
.br
.ti -1c
.BI "enum \fBOrientation\fR { Horizontal = 0, Vertical }"
.br
.ti -1c
.BI "enum \fBSortOrder\fR { Ascending, Descending }"
.br
.ti -1c
.BI "enum \fBAlignmentFlags\fR { AlignAuto = 0x0000, AlignLeft = 0x0001, AlignRight = 0x0002, AlignHCenter = 0x0004, AlignJustify = 0x0008, AlignHorizontal_Mask = AlignLeft | AlignRight | AlignHCenter | AlignJustify, AlignTop = 0x0010, AlignBottom = 0x0020, AlignVCenter = 0x0040, AlignVertical_Mask = AlignTop | AlignBottom | AlignVCenter, AlignCenter = AlignVCenter | AlignHCenter }"
.br
.ti -1c
.BI "enum \fBTextFlags\fR { SingleLine = 0x0080, DontClip = 0x0100, ExpandTabs = 0x0200, ShowPrefix = 0x0400, WordBreak = 0x0800, BreakAnywhere = 0x1000, NoAccel = 0x4000 }"
.br
.ti -1c
.BI "enum \fBWidgetState\fR { WState_Created = 0x00000001, WState_Disabled = 0x00000002, WState_Visible = 0x00000004, WState_ForceHide = 0x00000008, WState_OwnCursor = 0x00000010, WState_MouseTracking = 0x00000020, WState_CompressKeys = 0x00000040, WState_BlockUpdates = 0x00000080, WState_InPaintEvent = 0x00000100, WState_Reparented = 0x00000200, WState_ConfigPending = 0x00000400, WState_Resized = 0x00000800, WState_AutoMask = 0x00001000, WState_Polished = 0x00002000, WState_DND = 0x00004000, WState_Reserved0 = 0x00008000, WState_FullScreen = 0x00010000, WState_OwnSizePolicy = 0x00020000, WState_CreatedHidden = 0x00040000, WState_Maximized = 0x00080000, WState_Minimized = 0x00100000, WState_ForceDisabled = 0x00200000, WState_Exposed = 0x00400000, WState_HasMouse = 0x00800000 }"
.br
.ti -1c
.BI "enum \fBWidgetFlags\fR { WType_TopLevel = 0x00000001, WType_Dialog = 0x00000002, WType_Popup = 0x00000004, WType_Desktop = 0x00000008, WType_Mask = 0x0000000f, WStyle_Customize = 0x00000010, WStyle_NormalBorder = 0x00000020, WStyle_DialogBorder = 0x00000040, WStyle_NoBorder = 0x00002000, WStyle_Title = 0x00000080, WStyle_SysMenu = 0x00000100, WStyle_Minimize = 0x00000200, WStyle_Maximize = 0x00000400, WStyle_MinMax = WStyle_Minimize | WStyle_Maximize, WStyle_Tool = 0x00000800, WStyle_StaysOnTop = 0x00001000, WStyle_ContextHelp = 0x00004000, WStyle_Reserved = 0x00008000, WStyle_Mask = 0x0000fff0, WDestructiveClose = 0x00010000, WPaintDesktop = 0x00020000, WPaintUnclipped = 0x00040000, WPaintClever = 0x00080000, WResizeNoErase = 0x00100000, WMouseNoMask = 0x00200000, WStaticContents = 0x00400000, WRepaintNoErase = 0x00800000, WX11BypassWM = 0x01000000, WWinOwnDC = 0x00000000, WMacNoSheet = 0x00000000, WMacDrawer = 0x00000000, WX11BypassWM = 0x00000000, WWinOwnDC = 0x01000000, WMacNoSheet = 0x00000000, WMacDrawer = 0x00000000, WGroupLeader = 0x02000000, WShowModal = 0x04000000, WNoMousePropagation = 0x08000000, WSubWindow = 0x10000000, WStyle_Splash = 0x20000000, WNoAutoErase = WRepaintNoErase | WResizeNoErase, WNorthWestGravity = WStaticContents, WType_Modal = WType_Dialog | WShowModal, WStyle_Dialog = WType_Dialog, WStyle_NoBorderEx = WStyle_NoBorder }"
.br
.ti -1c
.BI "enum \fBWindowState\fR { WindowNoState = 0x00000000, WindowMinimized = 0x00000001, WindowMaximized = 0x00000002, WindowFullScreen = 0x00000004, WindowActive = 0x00000008 }"
.br
.ti -1c
.BI "enum \fBImageConversionFlags\fR { ColorMode_Mask = 0x00000003, AutoColor = 0x00000000, ColorOnly = 0x00000003, MonoOnly = 0x00000002, AlphaDither_Mask = 0x0000000c, ThresholdAlphaDither = 0x00000000, OrderedAlphaDither = 0x00000004, DiffuseAlphaDither = 0x00000008, NoAlpha = 0x0000000c, Dither_Mask = 0x00000030, DiffuseDither = 0x00000000, OrderedDither = 0x00000010, ThresholdDither = 0x00000020, DitherMode_Mask = 0x000000c0, AutoDither = 0x00000000, PreferDither = 0x00000040, AvoidDither = 0x00000080 }"
.br
.ti -1c
.BI "enum \fBBGMode\fR { TransparentMode, OpaqueMode }"
.br
.ti -1c
.BI "enum \fBPaintUnit\fR { PixelUnit, LoMetricUnit, HiMetricUnit, LoEnglishUnit, HiEnglishUnit, TwipsUnit }"
.br
.ti -1c
.BI "enum GUIStyle { MacStyle, WindowsStyle, Win3Style, PMStyle, MotifStyle }  \fI(obsolete)\fR"
.br
.ti -1c
.BI "enum \fBSequenceMatch\fR { NoMatch, PartialMatch, Identical }"
.br
.ti -1c
.BI "enum \fBModifier\fR { META = 0x00100000, SHIFT = 0x00200000, CTRL = 0x00400000, ALT = 0x00800000, MODIFIER_MASK = 0x00f00000, UNICODE_ACCEL = 0x10000000, ASCII_ACCEL = UNICODE_ACCEL }"
.br
.ti -1c
.BI "enum \fBKey\fR { Key_Escape = 0x1000, Key_Tab = 0x1001, Key_Backtab = 0x1002, Key_BackTab = Key_Backtab, Key_Backspace = 0x1003, Key_BackSpace = Key_Backspace, Key_Return = 0x1004, Key_Enter = 0x1005, Key_Insert = 0x1006, Key_Delete = 0x1007, Key_Pause = 0x1008, Key_Print = 0x1009, Key_SysReq = 0x100a, Key_Clear = 0x100b, Key_Home = 0x1010, Key_End = 0x1011, Key_Left = 0x1012, Key_Up = 0x1013, Key_Right = 0x1014, Key_Down = 0x1015, Key_Prior = 0x1016, Key_PageUp = Key_Prior, Key_Next = 0x1017, Key_PageDown = Key_Next, Key_Shift = 0x1020, Key_Control = 0x1021, Key_Meta = 0x1022, Key_Alt = 0x1023, Key_CapsLock = 0x1024, Key_NumLock = 0x1025, Key_ScrollLock = 0x1026, Key_F1 = 0x1030, Key_F2 = 0x1031, Key_F3 = 0x1032, Key_F4 = 0x1033, Key_F5 = 0x1034, Key_F6 = 0x1035, Key_F7 = 0x1036, Key_F8 = 0x1037, Key_F9 = 0x1038, Key_F10 = 0x1039, Key_F11 = 0x103a, Key_F12 = 0x103b, Key_F13 = 0x103c, Key_F14 = 0x103d, Key_F15 = 0x103e, Key_F16 = 0x103f, Key_F17 = 0x1040, Key_F18 = 0x1041, Key_F19 = 0x1042, Key_F20 = 0x1043, Key_F21 = 0x1044, Key_F22 = 0x1045, Key_F23 = 0x1046, Key_F24 = 0x1047, Key_F25 = 0x1048, Key_F26 = 0x1049, Key_F27 = 0x104a, Key_F28 = 0x104b, Key_F29 = 0x104c, Key_F30 = 0x104d, Key_F31 = 0x104e, Key_F32 = 0x104f, Key_F33 = 0x1050, Key_F34 = 0x1051, Key_F35 = 0x1052, Key_Super_L = 0x1053, Key_Super_R = 0x1054, Key_Menu = 0x1055, Key_Hyper_L = 0x1056, Key_Hyper_R = 0x1057, Key_Help = 0x1058, Key_Direction_L = 0x1059, Key_Direction_R = 0x1060, Key_Space = 0x20, Key_Any = Key_Space, Key_Exclam = 0x21, Key_QuoteDbl = 0x22, Key_NumberSign = 0x23, Key_Dollar = 0x24, Key_Percent = 0x25, Key_Ampersand = 0x26, Key_Apostrophe = 0x27, Key_ParenLeft = 0x28, Key_ParenRight = 0x29, Key_Asterisk = 0x2a, Key_Plus = 0x2b, Key_Comma = 0x2c, Key_Minus = 0x2d, Key_Period = 0x2e, Key_Slash = 0x2f, Key_0 = 0x30, Key_1 = 0x31, Key_2 = 0x32, Key_3 = 0x33, Key_4 = 0x34, Key_5 = 0x35, Key_6 = 0x36, Key_7 = 0x37, Key_8 = 0x38, Key_9 = 0x39, Key_Colon = 0x3a, Key_Semicolon = 0x3b, Key_Less = 0x3c, Key_Equal = 0x3d, Key_Greater = 0x3e, Key_Question = 0x3f, Key_At = 0x40, Key_A = 0x41, Key_B = 0x42, Key_C = 0x43, Key_D = 0x44, Key_E = 0x45, Key_F = 0x46, Key_G = 0x47, Key_H = 0x48, Key_I = 0x49, Key_J = 0x4a, Key_K = 0x4b, Key_L = 0x4c, Key_M = 0x4d, Key_N = 0x4e, Key_O = 0x4f, Key_P = 0x50, Key_Q = 0x51, Key_R = 0x52, Key_S = 0x53, Key_T = 0x54, Key_U = 0x55, Key_V = 0x56, Key_W = 0x57, Key_X = 0x58, Key_Y = 0x59, Key_Z = 0x5a, Key_BracketLeft = 0x5b, Key_Backslash = 0x5c, Key_BracketRight = 0x5d, Key_AsciiCircum = 0x5e, Key_Underscore = 0x5f, Key_QuoteLeft = 0x60, Key_BraceLeft = 0x7b, Key_Bar = 0x7c, Key_BraceRight = 0x7d, Key_AsciiTilde = 0x7e, Key_nobreakspace = 0x0a0, Key_exclamdown = 0x0a1, Key_cent = 0x0a2, Key_sterling = 0x0a3, Key_currency = 0x0a4, Key_yen = 0x0a5, Key_brokenbar = 0x0a6, Key_section = 0x0a7, Key_diaeresis = 0x0a8, Key_copyright = 0x0a9, Key_ordfeminine = 0x0aa, Key_guillemotleft = 0x0ab, Key_notsign = 0x0ac, Key_hyphen = 0x0ad, Key_registered = 0x0ae, Key_macron = 0x0af, Key_degree = 0x0b0, Key_plusminus = 0x0b1, Key_twosuperior = 0x0b2, Key_threesuperior = 0x0b3, Key_acute = 0x0b4, Key_mu = 0x0b5, Key_paragraph = 0x0b6, Key_periodcentered = 0x0b7, Key_cedilla = 0x0b8, Key_onesuperior = 0x0b9, Key_masculine = 0x0ba, Key_guillemotright = 0x0bb, Key_onequarter = 0x0bc, Key_onehalf = 0x0bd, Key_threequarters = 0x0be, Key_questiondown = 0x0bf, Key_Agrave = 0x0c0, Key_Aacute = 0x0c1, Key_Acircumflex = 0x0c2, Key_Atilde = 0x0c3, Key_Adiaeresis = 0x0c4, Key_Aring = 0x0c5, Key_AE = 0x0c6, Key_Ccedilla = 0x0c7, Key_Egrave = 0x0c8, Key_Eacute = 0x0c9, Key_Ecircumflex = 0x0ca, Key_Ediaeresis = 0x0cb, Key_Igrave = 0x0cc, Key_Iacute = 0x0cd, Key_Icircumflex = 0x0ce, Key_Idiaeresis = 0x0cf, Key_ETH = 0x0d0, Key_Ntilde = 0x0d1, Key_Ograve = 0x0d2, Key_Oacute = 0x0d3, Key_Ocircumflex = 0x0d4, Key_Otilde = 0x0d5, Key_Odiaeresis = 0x0d6, Key_multiply = 0x0d7, Key_Ooblique = 0x0d8, Key_Ugrave = 0x0d9, Key_Uacute = 0x0da, Key_Ucircumflex = 0x0db, Key_Udiaeresis = 0x0dc, Key_Yacute = 0x0dd, Key_THORN = 0x0de, Key_ssharp = 0x0df, Key_agrave = 0x0e0, Key_aacute = 0x0e1, Key_acircumflex = 0x0e2, Key_atilde = 0x0e3, Key_adiaeresis = 0x0e4, Key_aring = 0x0e5, Key_ae = 0x0e6, Key_ccedilla = 0x0e7, Key_egrave = 0x0e8, Key_eacute = 0x0e9, Key_ecircumflex = 0x0ea, Key_ediaeresis = 0x0eb, Key_igrave = 0x0ec, Key_iacute = 0x0ed, Key_icircumflex = 0x0ee, Key_idiaeresis = 0x0ef, Key_eth = 0x0f0, Key_ntilde = 0x0f1, Key_ograve = 0x0f2, Key_oacute = 0x0f3, Key_ocircumflex = 0x0f4, Key_otilde = 0x0f5, Key_odiaeresis = 0x0f6, Key_division = 0x0f7, Key_oslash = 0x0f8, Key_ugrave = 0x0f9, Key_uacute = 0x0fa, Key_ucircumflex = 0x0fb, Key_udiaeresis = 0x0fc, Key_yacute = 0x0fd, Key_thorn = 0x0fe, Key_ydiaeresis = 0x0ff, Key_Back = 0x1061, Key_Forward = 0x1062, Key_Stop = 0x1063, Key_Refresh = 0x1064, Key_VolumeDown = 0x1070, Key_VolumeMute = 0x1071, Key_VolumeUp = 0x1072, Key_BassBoost = 0x1073, Key_BassUp = 0x1074, Key_BassDown = 0x1075, Key_TrebleUp = 0x1076, Key_TrebleDown = 0x1077, Key_MediaPlay = 0x1080, Key_MediaStop = 0x1081, Key_MediaPrev = 0x1082, Key_MediaNext = 0x1083, Key_MediaRecord = 0x1084, Key_HomePage = 0x1090, Key_Favorites = 0x1091, Key_Search = 0x1092, Key_Standby = 0x1093, Key_OpenUrl = 0x1094, Key_LaunchMail = 0x10a0, Key_LaunchMedia = 0x10a1, Key_Launch0 = 0x10a2, Key_Launch1 = 0x10a3, Key_Launch2 = 0x10a4, Key_Launch3 = 0x10a5, Key_Launch4 = 0x10a6, Key_Launch5 = 0x10a7, Key_Launch6 = 0x10a8, Key_Launch7 = 0x10a9, Key_Launch8 = 0x10aa, Key_Launch9 = 0x10ab, Key_LaunchA = 0x10ac, Key_LaunchB = 0x10ad, Key_LaunchC = 0x10ae, Key_LaunchD = 0x10af, Key_LaunchE = 0x10b0, Key_LaunchF = 0x10b1, Key_MediaLast = 0x1fff, Key_unknown = 0xffff }"
.br
.ti -1c
.BI "enum \fBArrowType\fR { UpArrow, DownArrow, LeftArrow, RightArrow }"
.br
.ti -1c
.BI "enum \fBRasterOp\fR { CopyROP, OrROP, XorROP, NotAndROP, EraseROP = NotAndROP, NotCopyROP, NotOrROP, NotXorROP, AndROP, NotEraseROP = AndROP, NotROP, ClearROP, SetROP, NopROP, AndNotROP, OrNotROP, NandROP, NorROP, LastROP = NorROP }"
.br
.ti -1c
.BI "enum \fBPenStyle\fR { NoPen, SolidLine, DashLine, DotLine, DashDotLine, DashDotDotLine, MPenStyle = 0x0f }"
.br
.ti -1c
.BI "enum \fBPenCapStyle\fR { FlatCap = 0x00, SquareCap = 0x10, RoundCap = 0x20, MPenCapStyle = 0x30 }"
.br
.ti -1c
.BI "enum \fBPenJoinStyle\fR { MiterJoin = 0x00, BevelJoin = 0x40, RoundJoin = 0x80, MPenJoinStyle = 0xc0 }"
.br
.ti -1c
.BI "enum \fBBrushStyle\fR { NoBrush, SolidPattern, Dense1Pattern, Dense2Pattern, Dense3Pattern, Dense4Pattern, Dense5Pattern, Dense6Pattern, Dense7Pattern, HorPattern, VerPattern, CrossPattern, BDiagPattern, FDiagPattern, DiagCrossPattern, CustomPattern = 24 }"
.br
.ti -1c
.BI "enum \fBMacintoshVersion\fR { MV_Unknown = 0x0000, MV_9 = 0x0001, MV_10_DOT_0 = 0x0002, MV_10_DOT_1 = 0x0003, MV_10_DOT_2 = 0x0004, MV_10_DOT_3 = 0x0005, MV_10_DOT_4 = 0x0006, MV_CHEETAH = MV_10_DOT_0, MV_PUMA = MV_10_DOT_1, MV_JAGUAR = MV_10_DOT_2, MV_PANTHER = MV_10_DOT_3, MV_TIGER = MV_10_DOT_4 }"
.br
.ti -1c
.BI "enum \fBWindowsVersion\fR { WV_32s = 0x0001, WV_95 = 0x0002, WV_98 = 0x0003, WV_Me = 0x0004, WV_DOS_based = 0x000f, WV_NT = 0x0010, WV_2000 = 0x0020, WV_XP = 0x0030, WV_2003 = 0x0040, WV_VISTA = 0x0080, WV_NT_based = 0x00f0, WV_CE = 0x0100, WV_CENET = 0x0200, WV_CE_based = 0x0f00 }"
.br
.ti -1c
.BI "enum \fBUIEffect\fR { UI_General, UI_AnimateMenu, UI_FadeMenu, UI_AnimateCombo, UI_AnimateTooltip, UI_FadeTooltip, UI_AnimateToolBox }"
.br
.ti -1c
.BI "enum \fBCursorShape\fR { ArrowCursor, UpArrowCursor, CrossCursor, WaitCursor, IbeamCursor, SizeVerCursor, SizeHorCursor, SizeBDiagCursor, SizeFDiagCursor, SizeAllCursor, BlankCursor, SplitVCursor, SplitHCursor, PointingHandCursor, ForbiddenCursor, WhatsThisCursor, BusyCursor, LastCursor = BusyCursor, BitmapCursor = 24 }"
.br
.ti -1c
.BI "enum \fBTextFormat\fR { PlainText, RichText, AutoText, LogText }"
.br
.ti -1c
.BI "enum \fBAnchorAttribute\fR { AnchorName, AnchorHref }"
.br
.ti -1c
.BI "enum \fBDock\fR { DockUnmanaged, DockTornOff, DockTop, DockBottom, DockRight, DockLeft, DockMinimized, Unmanaged = DockUnmanaged, TornOff = DockTornOff, Top = DockTop, Bottom = DockBottom, Right = DockRight, Left = DockLeft, Minimized = DockMinimized }"
.br
.ti -1c
.BI "enum \fBDateFormat\fR { TextDate, ISODate, LocalDate }"
.br
.ti -1c
.BI "enum \fBTimeSpec\fR { LocalTime, UTC }"
.br
.ti -1c
.BI "enum \fBBackgroundMode\fR { FixedColor, FixedPixmap, NoBackground, PaletteForeground, PaletteButton, PaletteLight, PaletteMidlight, PaletteDark, PaletteMid, PaletteText, PaletteBrightText, PaletteBase, PaletteBackground, PaletteShadow, PaletteHighlight, PaletteHighlightedText, PaletteButtonText, PaletteLink, PaletteLinkVisited, X11ParentRelative }"
.br
.ti -1c
.BI "enum \fBStringComparisonMode\fR { CaseSensitive = 0x00001, BeginsWith = 0x00002, EndsWith = 0x00004, Contains = 0x00008, ExactMatch = 0x00010 }"
.br
.ti -1c
.BI "enum \fBCorner\fR { TopLeft = 0x00000, TopRight = 0x00001, BottomLeft = 0x00002, BottomRight = 0x00003 }"
.br
.ti -1c
.BI "typedef void * \fBHANDLE\fR"
.br
.in -1c
.SH DESCRIPTION
The Qt class is a namespace for miscellaneous identifiers that need to be global-like.
.PP
Normally, you can ignore this class. QObject and a few other classes inherit it, so all the identifiers in the Qt namespace are normally usable without qualification.
.PP
However, you may occasionally need to say \fCQt::black\fR instead of just \fCblack\fR, particularly in static utility functions (such as many class factories).
.PP
See also Miscellaneous Classes.
.SS "Member Type Documentation"
.SH "Qt::AlignmentFlags"
This enum type is used to describe alignment. It contains horizontal and vertical flags.
.PP
The horizontal flags are:
.TP
\fCQt::AlignAuto\fR - Aligns according to the language. Left for most, right for Arabic and Hebrew.
.TP
\fCQt::AlignLeft\fR - Aligns with the left edge.
.TP
\fCQt::AlignRight\fR - Aligns with the right edge.
.TP
\fCQt::AlignHCenter\fR - Centers horizontally in the available space.
.TP
\fCQt::AlignJustify\fR - Justifies the text in the available space. Does not work for everything and may be interpreted as AlignAuto in some cases.
.PP
The vertical flags are:
.TP
\fCQt::AlignTop\fR - Aligns with the top.
.TP
\fCQt::AlignBottom\fR - Aligns with the bottom.
.TP
\fCQt::AlignVCenter\fR - Centers vertically in the available space.
.PP
You can use only one of the horizontal flags at a time. There is one two-dimensional flag:
.TP
\fCQt::AlignCenter\fR - Centers in both dimensions.
.PP
You can use at most one horizontal and one vertical flag at a time. AlignCenter counts as both horizontal and vertical.
.PP
Masks:
.TP
\fCQt::AlignHorizontal_Mask\fR
.TP
\fCQt::AlignVertical_Mask\fR
.PP
Conflicting combinations of flags have undefined meanings.
.SH "Qt::AnchorAttribute"
An anchor has one or more of the following attributes:
.TP
\fCQt::AnchorName\fR - the name attribute of the anchor. This attribute is used when scrolling to an anchor in the document.
.TP
\fCQt::AnchorHref\fR - the href attribute of the anchor. This attribute is used when a link is clicked to determine what content to load.
.SH "Qt::ArrowType"
.TP
\fCQt::UpArrow\fR
.TP
\fCQt::DownArrow\fR
.TP
\fCQt::LeftArrow\fR
.TP
\fCQt::RightArrow\fR
.SH "Qt::BGMode"
Background mode
.TP
\fCQt::TransparentMode\fR
.TP
\fCQt::OpaqueMode\fR
.SH "Qt::BackgroundMode"
This enum describes how the background of a widget changes, as the widget's palette changes.
.PP
The background is what the widget contains when paintEvent() is called. To minimize flicker, this should be the most common color or pixmap in the widget. For PaletteBackground, use colorGroup().brush( QColorGroup::Background ), and so on.
.TP
\fCQt::PaletteForeground\fR
.TP
\fCQt::PaletteBackground\fR
.TP
\fCQt::PaletteButton\fR
.TP
\fCQt::PaletteLight\fR
.TP
\fCQt::PaletteMidlight\fR
.TP
\fCQt::PaletteDark\fR
.TP
\fCQt::PaletteMid\fR
.TP
\fCQt::PaletteText\fR
.TP
\fCQt::PaletteBrightText\fR
.TP
\fCQt::PaletteButtonText\fR
.TP
\fCQt::PaletteBase\fR
.TP
\fCQt::PaletteShadow\fR
.TP
\fCQt::PaletteHighlight\fR
.TP
\fCQt::PaletteHighlightedText\fR
.TP
\fCQt::PaletteLink\fR
.TP
\fCQt::PaletteLinkVisited\fR
.TP
\fCQt::X11ParentRelative\fR - (internal use only)
.PP
The final three values have special meaning:
.TP
\fCQt::NoBackground\fR - the widget is not cleared before paintEvent(). If the widget's paint event always draws on all the pixels, using this mode can be both fast and flicker-free.
.TP
\fCQt::FixedColor\fR - the widget is cleared to a fixed color, normally different from all the ones in the palette(). Set using setPaletteBackgroundColor().
.TP
\fCQt::FixedPixmap\fR - the widget is cleared to a fixed pixmap, normally different from all the ones in the palette(). Set using setPaletteBackgroundPixmap().
.PP
Although FixedColor and FixedPixmap are sometimes just right, if you use them, make sure that you test your application when the desktop color scheme has been changed. (On X11, a quick way to test this is e.g. "./myapp -bg paleblue". On Windows, you must use the control panel.)
.PP
See also QWidget::backgroundMode, QWidget::backgroundMode, QWidget::setBackgroundPixmap(), and QWidget::paletteBackgroundColor.
.SH "Qt::BrushStyle"
.TP
\fCQt::NoBrush\fR
.TP
\fCQt::SolidPattern\fR
.TP
\fCQt::Dense1Pattern\fR
.TP
\fCQt::Dense2Pattern\fR
.TP
\fCQt::Dense3Pattern\fR
.TP
\fCQt::Dense4Pattern\fR
.TP
\fCQt::Dense5Pattern\fR
.TP
\fCQt::Dense6Pattern\fR
.TP
\fCQt::Dense7Pattern\fR
.TP
\fCQt::HorPattern\fR
.TP
\fCQt::VerPattern\fR
.TP
\fCQt::CrossPattern\fR
.TP
\fCQt::BDiagPattern\fR
.TP
\fCQt::FDiagPattern\fR
.TP
\fCQt::DiagCrossPattern\fR
.TP
\fCQt::CustomPattern\fR
.PP
<center>
.ce 1
.B "[Image Omitted]"
.PP
</center>
.SH "Qt::ButtonState"
This enum type describes the state of the mouse and the modifier buttons.
.TP
\fCQt::NoButton\fR - used when the button state does not refer to any button (see QMouseEvent::button()).
.TP
\fCQt::LeftButton\fR - set if the left button is pressed, or if this event refers to the left button. (The left button may be the right button on left-handed mice.)
.TP
\fCQt::RightButton\fR - the right button.
.TP
\fCQt::MidButton\fR - the middle button.
.TP
\fCQt::ShiftButton\fR - a Shift key on the keyboard is also pressed.
.TP
\fCQt::ControlButton\fR - a Ctrl key on the keyboard is also pressed.
.TP
\fCQt::AltButton\fR - an Alt key on the keyboard is also pressed.
.TP
\fCQt::MetaButton\fR - a Meta key on the keyboard is also pressed.
.TP
\fCQt::Keypad\fR - a keypad button is pressed.
.TP
\fCQt::KeyButtonMask\fR - a mask for ShiftButton, ControlButton, AltButton and MetaButton.
.TP
\fCQt::MouseButtonMask\fR - a mask for LeftButton, RightButton and MidButton.
.SH "Qt::Corner"
This enum type specifies a corner in a rectangle:
.TP
\fCQt::TopLeft\fR - top left corner
.TP
\fCQt::TopRight\fR - top right corner
.TP
\fCQt::BottomLeft\fR - bottom left corner
.TP
\fCQt::BottomRight\fR - bottom right corner
.SH "Qt::CursorShape"
This enum type defines the various cursors that can be used.
.TP
\fCQt::ArrowCursor\fR - standard arrow cursor
.TP
\fCQt::UpArrowCursor\fR - upwards arrow
.TP
\fCQt::CrossCursor\fR - crosshair
.TP
\fCQt::WaitCursor\fR - hourglass/watch
.TP
\fCQt::BusyCursor\fR - standard arrow with hourglass/watch
.TP
\fCQt::IbeamCursor\fR - ibeam/text entry
.TP
\fCQt::SizeVerCursor\fR - vertical resize
.TP
\fCQt::SizeHorCursor\fR - horizontal resize
.TP
\fCQt::SizeFDiagCursor\fR - diagonal resize (&#92;)
.TP
\fCQt::SizeBDiagCursor\fR - diagonal resize (/)
.TP
\fCQt::SizeAllCursor\fR - all directions resize
.TP
\fCQt::BlankCursor\fR - blank/invisible cursor
.TP
\fCQt::SplitVCursor\fR - vertical splitting
.TP
\fCQt::SplitHCursor\fR - horizontal splitting
.TP
\fCQt::PointingHandCursor\fR - a pointing hand
.TP
\fCQt::ForbiddenCursor\fR - a slashed circle
.TP
\fCQt::WhatsThisCursor\fR - an arrow with a question mark
.TP
\fCQt::BitmapCursor\fR
.PP
ArrowCursor is the default for widgets in a normal state.
.PP
<center>
.ce 1
.B "[Image Omitted]"
.PP
</center>
.SH "Qt::DateFormat"
.TP
\fCQt::TextDate\fR - (default) Qt format
.TP
\fCQt::ISODate\fR - ISO 8601 extended format (YYYY-MM-DD, or with time, YYYY-MM-DDTHH:MM:SS)
.TP
\fCQt::LocalDate\fR - locale dependent format
.SH "Qt::Dock"
Each dock window can be in one of the following positions:
.TP
\fCQt::DockTop\fR - above the central widget, below the menu bar.
.TP
\fCQt::DockBottom\fR - below the central widget, above the status bar.
.TP
\fCQt::DockLeft\fR - to the left of the central widget.
.TP
\fCQt::DockRight\fR - to the right of the central widget.
.TP
\fCQt::DockMinimized\fR - the dock window is not shown (this is effectively a 'hidden' dock area); the handles of all minimized dock windows are drawn in one row below the menu bar.
.TP
\fCQt::DockTornOff\fR - the dock window floats as its own top level window which always stays on top of the main window.
.TP
\fCQt::DockUnmanaged\fR - not managed by a QMainWindow.
.SH "Qt::GUIStyle"
\fBThis type is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.TP
\fCQt::WindowsStyle\fR
.TP
\fCQt::MotifStyle\fR
.TP
\fCQt::MacStyle\fR
.TP
\fCQt::Win3Style\fR
.TP
\fCQt::PMStyle\fR
.SH "Qt::ImageConversionFlags"
The conversion flag is a bitwise-OR of the following values. The options marked "(default)" are set if no other values from the list are included (since the defaults are zero):
.PP
Color/Mono preference (ignored for QBitmap)
.TP
\fCQt::AutoColor\fR - (default) - If the image has depth 1 and contains only black and white pixels, the pixmap becomes monochrome.
.TP
\fCQt::ColorOnly\fR - The pixmap is dithered/converted to the native display depth.
.TP
\fCQt::MonoOnly\fR - The pixmap becomes monochrome. If necessary, it is dithered using the chosen dithering algorithm.
.PP
Dithering mode preference for RGB channels
.TP
\fCQt::DiffuseDither\fR - (default) - A high-quality dither.
.TP
\fCQt::OrderedDither\fR - A faster, more ordered dither.
.TP
\fCQt::ThresholdDither\fR - No dithering; closest color is used.
.PP
Dithering mode preference for alpha channel
.TP
\fCQt::ThresholdAlphaDither\fR - (default) - No dithering.
.TP
\fCQt::OrderedAlphaDither\fR - A faster, more ordered dither.
.TP
\fCQt::DiffuseAlphaDither\fR - A high-quality dither.
.TP
\fCQt::NoAlpha\fR - Not supported.
.PP
Color matching versus dithering preference
.TP
\fCQt::PreferDither\fR - (default when converting to a pixmap) - Always dither 32-bit images when the image is converted to 8 bits.
.TP
\fCQt::AvoidDither\fR - (default when converting for the purpose of saving to file) - Dither 32-bit images only if the image has more than 256 colors and it is being converted to 8 bits.
.TP
\fCQt::AutoDither\fR - Not supported.
.PP
The following are not values that are used directly, but masks for the above classes:
.TP
\fCQt::ColorMode_Mask\fR - Mask for the color mode.
.TP
\fCQt::Dither_Mask\fR - Mask for the dithering mode for RGB channels.
.TP
\fCQt::AlphaDither_Mask\fR - Mask for the dithering mode for the alpha channel.
.TP
\fCQt::DitherMode_Mask\fR - Mask for the mode that determines the preference of color matching versus dithering.
.PP
Using 0 as the conversion flag sets all the default options.
.SH "Qt::Key"
The key names used by Qt.
.TP
\fCQt::Key_Escape\fR
.TP
\fCQt::Key_Tab\fR
.TP
\fCQt::Key_Backtab\fR
.TP
\fCQt::Key_Backspace\fR
.TP
\fCQt::Key_Return\fR
.TP
\fCQt::Key_Enter\fR
.TP
\fCQt::Key_Insert\fR
.TP
\fCQt::Key_Delete\fR
.TP
\fCQt::Key_Pause\fR
.TP
\fCQt::Key_Print\fR
.TP
\fCQt::Key_SysReq\fR
.TP
\fCQt::Key_Home\fR
.TP
\fCQt::Key_End\fR
.TP
\fCQt::Key_Left\fR
.TP
\fCQt::Key_Up\fR
.TP
\fCQt::Key_Right\fR
.TP
\fCQt::Key_Down\fR
.TP
\fCQt::Key_Prior\fR
.TP
\fCQt::Key_Next\fR
.TP
\fCQt::Key_Shift\fR
.TP
\fCQt::Key_Control\fR
.TP
\fCQt::Key_Meta\fR
.TP
\fCQt::Key_Alt\fR
.TP
\fCQt::Key_CapsLock\fR
.TP
\fCQt::Key_NumLock\fR
.TP
\fCQt::Key_ScrollLock\fR
.TP
\fCQt::Key_Clear\fR
.TP
\fCQt::Key_F1\fR
.TP
\fCQt::Key_F2\fR
.TP
\fCQt::Key_F3\fR
.TP
\fCQt::Key_F4\fR
.TP
\fCQt::Key_F5\fR
.TP
\fCQt::Key_F6\fR
.TP
\fCQt::Key_F7\fR
.TP
\fCQt::Key_F8\fR
.TP
\fCQt::Key_F9\fR
.TP
\fCQt::Key_F10\fR
.TP
\fCQt::Key_F11\fR
.TP
\fCQt::Key_F12\fR
.TP
\fCQt::Key_F13\fR
.TP
\fCQt::Key_F14\fR
.TP
\fCQt::Key_F15\fR
.TP
\fCQt::Key_F16\fR
.TP
\fCQt::Key_F17\fR
.TP
\fCQt::Key_F18\fR
.TP
\fCQt::Key_F19\fR
.TP
\fCQt::Key_F20\fR
.TP
\fCQt::Key_F21\fR
.TP
\fCQt::Key_F22\fR
.TP
\fCQt::Key_F23\fR
.TP
\fCQt::Key_F24\fR
.TP
\fCQt::Key_F25\fR
.TP
\fCQt::Key_F26\fR
.TP
\fCQt::Key_F27\fR
.TP
\fCQt::Key_F28\fR
.TP
\fCQt::Key_F29\fR
.TP
\fCQt::Key_F30\fR
.TP
\fCQt::Key_F31\fR
.TP
\fCQt::Key_F32\fR
.TP
\fCQt::Key_F33\fR
.TP
\fCQt::Key_F34\fR
.TP
\fCQt::Key_F35\fR
.TP
\fCQt::Key_Super_L\fR
.TP
\fCQt::Key_Super_R\fR
.TP
\fCQt::Key_Menu\fR
.TP
\fCQt::Key_Hyper_L\fR
.TP
\fCQt::Key_Hyper_R\fR
.TP
\fCQt::Key_Help\fR
.TP
\fCQt::Key_Space\fR
.TP
\fCQt::Key_Any\fR
.TP
\fCQt::Key_Exclam\fR
.TP
\fCQt::Key_QuoteDbl\fR
.TP
\fCQt::Key_NumberSign\fR
.TP
\fCQt::Key_Dollar\fR
.TP
\fCQt::Key_Percent\fR
.TP
\fCQt::Key_Ampersand\fR
.TP
\fCQt::Key_Apostrophe\fR
.TP
\fCQt::Key_ParenLeft\fR
.TP
\fCQt::Key_ParenRight\fR
.TP
\fCQt::Key_Asterisk\fR
.TP
\fCQt::Key_Plus\fR
.TP
\fCQt::Key_Comma\fR
.TP
\fCQt::Key_Minus\fR
.TP
\fCQt::Key_Period\fR
.TP
\fCQt::Key_Slash\fR
.TP
\fCQt::Key_0\fR
.TP
\fCQt::Key_1\fR
.TP
\fCQt::Key_2\fR
.TP
\fCQt::Key_3\fR
.TP
\fCQt::Key_4\fR
.TP
\fCQt::Key_5\fR
.TP
\fCQt::Key_6\fR
.TP
\fCQt::Key_7\fR
.TP
\fCQt::Key_8\fR
.TP
\fCQt::Key_9\fR
.TP
\fCQt::Key_Colon\fR
.TP
\fCQt::Key_Semicolon\fR
.TP
\fCQt::Key_Less\fR
.TP
\fCQt::Key_Equal\fR
.TP
\fCQt::Key_Greater\fR
.TP
\fCQt::Key_Question\fR
.TP
\fCQt::Key_At\fR
.TP
\fCQt::Key_A\fR
.TP
\fCQt::Key_B\fR
.TP
\fCQt::Key_C\fR
.TP
\fCQt::Key_D\fR
.TP
\fCQt::Key_E\fR
.TP
\fCQt::Key_F\fR
.TP
\fCQt::Key_G\fR
.TP
\fCQt::Key_H\fR
.TP
\fCQt::Key_I\fR
.TP
\fCQt::Key_J\fR
.TP
\fCQt::Key_K\fR
.TP
\fCQt::Key_L\fR
.TP
\fCQt::Key_M\fR
.TP
\fCQt::Key_N\fR
.TP
\fCQt::Key_O\fR
.TP
\fCQt::Key_P\fR
.TP
\fCQt::Key_Q\fR
.TP
\fCQt::Key_R\fR
.TP
\fCQt::Key_S\fR
.TP
\fCQt::Key_T\fR
.TP
\fCQt::Key_U\fR
.TP
\fCQt::Key_V\fR
.TP
\fCQt::Key_W\fR
.TP
\fCQt::Key_X\fR
.TP
\fCQt::Key_Y\fR
.TP
\fCQt::Key_Z\fR
.TP
\fCQt::Key_BracketLeft\fR
.TP
\fCQt::Key_Backslash\fR
.TP
\fCQt::Key_BracketRight\fR
.TP
\fCQt::Key_AsciiCircum\fR
.TP
\fCQt::Key_Underscore\fR
.TP
\fCQt::Key_QuoteLeft\fR
.TP
\fCQt::Key_BraceLeft\fR
.TP
\fCQt::Key_Bar\fR
.TP
\fCQt::Key_BraceRight\fR
.TP
\fCQt::Key_AsciiTilde\fR
.TP
\fCQt::Key_nobreakspace\fR
.TP
\fCQt::Key_exclamdown\fR
.TP
\fCQt::Key_cent\fR
.TP
\fCQt::Key_sterling\fR
.TP
\fCQt::Key_currency\fR
.TP
\fCQt::Key_yen\fR
.TP
\fCQt::Key_brokenbar\fR
.TP
\fCQt::Key_section\fR
.TP
\fCQt::Key_diaeresis\fR
.TP
\fCQt::Key_copyright\fR
.TP
\fCQt::Key_ordfeminine\fR
.TP
\fCQt::Key_guillemotleft\fR
.TP
\fCQt::Key_notsign\fR
.TP
\fCQt::Key_hyphen\fR
.TP
\fCQt::Key_registered\fR
.TP
\fCQt::Key_macron\fR
.TP
\fCQt::Key_degree\fR
.TP
\fCQt::Key_plusminus\fR
.TP
\fCQt::Key_twosuperior\fR
.TP
\fCQt::Key_threesuperior\fR
.TP
\fCQt::Key_acute\fR
.TP
\fCQt::Key_mu\fR
.TP
\fCQt::Key_paragraph\fR
.TP
\fCQt::Key_periodcentered\fR
.TP
\fCQt::Key_cedilla\fR
.TP
\fCQt::Key_onesuperior\fR
.TP
\fCQt::Key_masculine\fR
.TP
\fCQt::Key_guillemotright\fR
.TP
\fCQt::Key_onequarter\fR
.TP
\fCQt::Key_onehalf\fR
.TP
\fCQt::Key_threequarters\fR
.TP
\fCQt::Key_questiondown\fR
.TP
\fCQt::Key_Agrave\fR
.TP
\fCQt::Key_Aacute\fR
.TP
\fCQt::Key_Acircumflex\fR
.TP
\fCQt::Key_Atilde\fR
.TP
\fCQt::Key_Adiaeresis\fR
.TP
\fCQt::Key_Aring\fR
.TP
\fCQt::Key_AE\fR
.TP
\fCQt::Key_Ccedilla\fR
.TP
\fCQt::Key_Egrave\fR
.TP
\fCQt::Key_Eacute\fR
.TP
\fCQt::Key_Ecircumflex\fR
.TP
\fCQt::Key_Ediaeresis\fR
.TP
\fCQt::Key_Igrave\fR
.TP
\fCQt::Key_Iacute\fR
.TP
\fCQt::Key_Icircumflex\fR
.TP
\fCQt::Key_Idiaeresis\fR
.TP
\fCQt::Key_ETH\fR
.TP
\fCQt::Key_Ntilde\fR
.TP
\fCQt::Key_Ograve\fR
.TP
\fCQt::Key_Oacute\fR
.TP
\fCQt::Key_Ocircumflex\fR
.TP
\fCQt::Key_Otilde\fR
.TP
\fCQt::Key_Odiaeresis\fR
.TP
\fCQt::Key_multiply\fR
.TP
\fCQt::Key_Ooblique\fR
.TP
\fCQt::Key_Ugrave\fR
.TP
\fCQt::Key_Uacute\fR
.TP
\fCQt::Key_Ucircumflex\fR
.TP
\fCQt::Key_Udiaeresis\fR
.TP
\fCQt::Key_Yacute\fR
.TP
\fCQt::Key_THORN\fR
.TP
\fCQt::Key_ssharp\fR
.TP
\fCQt::Key_agrave\fR
.TP
\fCQt::Key_aacute\fR
.TP
\fCQt::Key_acircumflex\fR
.TP
\fCQt::Key_atilde\fR
.TP
\fCQt::Key_adiaeresis\fR
.TP
\fCQt::Key_aring\fR
.TP
\fCQt::Key_ae\fR
.TP
\fCQt::Key_ccedilla\fR
.TP
\fCQt::Key_egrave\fR
.TP
\fCQt::Key_eacute\fR
.TP
\fCQt::Key_ecircumflex\fR
.TP
\fCQt::Key_ediaeresis\fR
.TP
\fCQt::Key_igrave\fR
.TP
\fCQt::Key_iacute\fR
.TP
\fCQt::Key_icircumflex\fR
.TP
\fCQt::Key_idiaeresis\fR
.TP
\fCQt::Key_eth\fR
.TP
\fCQt::Key_ntilde\fR
.TP
\fCQt::Key_ograve\fR
.TP
\fCQt::Key_oacute\fR
.TP
\fCQt::Key_ocircumflex\fR
.TP
\fCQt::Key_otilde\fR
.TP
\fCQt::Key_odiaeresis\fR
.TP
\fCQt::Key_division\fR
.TP
\fCQt::Key_oslash\fR
.TP
\fCQt::Key_ugrave\fR
.TP
\fCQt::Key_uacute\fR
.TP
\fCQt::Key_ucircumflex\fR
.TP
\fCQt::Key_udiaeresis\fR
.TP
\fCQt::Key_yacute\fR
.TP
\fCQt::Key_thorn\fR
.TP
\fCQt::Key_ydiaeresis\fR
.PP
Multimedia keys
.TP
\fCQt::Key_Back\fR
.TP
\fCQt::Key_Forward\fR
.TP
\fCQt::Key_Stop\fR
.TP
\fCQt::Key_Refresh\fR
.TP
\fCQt::Key_VolumeDown\fR
.TP
\fCQt::Key_VolumeMute\fR
.TP
\fCQt::Key_VolumeUp\fR
.TP
\fCQt::Key_BassBoost\fR
.TP
\fCQt::Key_BassUp\fR
.TP
\fCQt::Key_BassDown\fR
.TP
\fCQt::Key_TrebleUp\fR
.TP
\fCQt::Key_TrebleDown\fR
.TP
\fCQt::Key_MediaPlay\fR
.TP
\fCQt::Key_MediaStop\fR
.TP
\fCQt::Key_MediaPrev\fR
.TP
\fCQt::Key_MediaNext\fR
.TP
\fCQt::Key_MediaRecord\fR
.TP
\fCQt::Key_HomePage\fR
.TP
\fCQt::Key_Favorites\fR
.TP
\fCQt::Key_Search\fR
.TP
\fCQt::Key_Standby\fR
.TP
\fCQt::Key_OpenUrl\fR
.TP
\fCQt::Key_LaunchMail\fR
.TP
\fCQt::Key_LaunchMedia\fR
.TP
\fCQt::Key_Launch0\fR
.TP
\fCQt::Key_Launch1\fR
.TP
\fCQt::Key_Launch2\fR
.TP
\fCQt::Key_Launch3\fR
.TP
\fCQt::Key_Launch4\fR
.TP
\fCQt::Key_Launch5\fR
.TP
\fCQt::Key_Launch6\fR
.TP
\fCQt::Key_Launch7\fR
.TP
\fCQt::Key_Launch8\fR
.TP
\fCQt::Key_Launch9\fR
.TP
\fCQt::Key_LaunchA\fR
.TP
\fCQt::Key_LaunchB\fR
.TP
\fCQt::Key_LaunchC\fR
.TP
\fCQt::Key_LaunchD\fR
.TP
\fCQt::Key_LaunchE\fR
.TP
\fCQt::Key_LaunchF\fR
.TP
\fCQt::Key_MediaLast\fR
.TP
\fCQt::Key_unknown\fR
.TP
\fCQt::Key_Direction_L\fR - internal use only
.TP
\fCQt::Key_Direction_R\fR - internal use only
.SH "Qt::MacintoshVersion"
.TP
\fCQt::MV_Unknown\fR - Version cannot be detected
.TP
\fCQt::MV_9\fR - Mac OS 9
.TP
\fCQt::MV_10_DOT_3\fR - Mac OS X 10.3
.TP
\fCQt::MV_10_DOT_2\fR - Mac OS X 10.2
.TP
\fCQt::MV_10_DOT_1\fR - Mac OS X 10.1
.TP
\fCQt::MV_10_DOT_0\fR - Mac OS X 10.0
.TP
\fCQt::MV_10_DOT_4\fR - Mac OS X 10.4
.TP
\fCQt::MV_CHEETAH\fR - 10.0 Codename
.TP
\fCQt::MV_PUMA\fR - 10.1 Codename
.TP
\fCQt::MV_JAGUAR\fR - 10.2 Codename
.TP
\fCQt::MV_PANTHER\fR - 10.3 Codename
.TP
\fCQt::MV_TIGER\fR - 10.4 Codename
.SH "Qt::Modifier"
This enum type describes the keyboard modifier keys supported by Qt.
.TP
\fCQt::SHIFT\fR - the Shift keys provided on all standard keyboards.
.TP
\fCQt::META\fR - the Meta keys.
.TP
\fCQt::CTRL\fR - the Ctrl keys.
.TP
\fCQt::ALT\fR - the normal Alt keys, but not e.g. AltGr.
.TP
\fCQt::MODIFIER_MASK\fR - is a mask of Shift, Ctrl, Alt and Meta.
.TP
\fCQt::UNICODE_ACCEL\fR - the accelerator is specified as a Unicode code point, not as a Qt Key.
.SH "Qt::Orientation"
This type is used to signify an object's orientation.
.TP
\fCQt::Horizontal\fR
.TP
\fCQt::Vertical\fR
.PP
Orientation is used with QScrollBar for example.
.SH "Qt::PaintUnit"
.TP
\fCQt::PixelUnit\fR
.TP
\fCQt::LoMetricUnit\fR - \fIobsolete\fR
.TP
\fCQt::HiMetricUnit\fR - \fIobsolete\fR
.TP
\fCQt::LoEnglishUnit\fR - \fIobsolete\fR
.TP
\fCQt::HiEnglishUnit\fR - \fIobsolete\fR
.TP
\fCQt::TwipsUnit\fR - \fIobsolete\fR
.SH "Qt::PenCapStyle"
This enum type defines the pen cap styles supported by Qt, i.e. the line end caps that can be drawn using QPainter.
.TP
\fCQt::FlatCap\fR - a square line end that does not cover the end point of the line.
.TP
\fCQt::SquareCap\fR - a square line end that covers the end point and extends beyond it with half the line width.
.TP
\fCQt::RoundCap\fR - a rounded line end.
.TP
\fCQt::MPenCapStyle\fR - mask of the pen cap styles.
.PP
<center>
.ce 1
.B "[Image Omitted]"
.PP
</center>
.SH "Qt::PenJoinStyle"
This enum type defines the pen join styles supported by Qt, i.e. which joins between two connected lines can be drawn using QPainter.
.TP
\fCQt::MiterJoin\fR - The outer edges of the lines are extended to meet at an angle, and this area is filled.
.TP
\fCQt::BevelJoin\fR - The triangular notch between the two lines is filled.
.TP
\fCQt::RoundJoin\fR - A circular arc between the two lines is filled.
.TP
\fCQt::MPenJoinStyle\fR - mask of the pen join styles.
.PP
<center>
.ce 1
.B "[Image Omitted]"
.PP
</center>
.SH "Qt::PenStyle"
This enum type defines the pen styles that can be drawn using QPainter. The styles are
.TP
\fCQt::NoPen\fR - no line at all. For example, QPainter::drawRect() fills but does not draw any boundary line.
.TP
\fCQt::SolidLine\fR - a simple line.
.TP
\fCQt::DashLine\fR - dashes separated by a few pixels.
.TP
\fCQt::DotLine\fR - dots separated by a few pixels.
.TP
\fCQt::DashDotLine\fR - alternate dots and dashes.
.TP
\fCQt::DashDotDotLine\fR - one dash, two dots, one dash, two dots.
.TP
\fCQt::MPenStyle\fR - mask of the pen styles.
.PP
<center>
.ce 1
.B "[Image Omitted]"
.PP
</center>
.SH "Qt::RasterOp"
This enum type is used to describe the way things are written to the paint device. Each bit of the \fIsrc\fR (what you write) interacts with the corresponding bit of the \fIdst\fR pixel.
.TP
\fCQt::CopyROP\fR - dst = src
.TP
\fCQt::OrROP\fR - dst = src OR dst
.TP
\fCQt::XorROP\fR - dst = src XOR dst
.TP
\fCQt::NotAndROP\fR - dst = (NOT src) AND dst
.TP
\fCQt::EraseROP\fR - an alias for NotAndROP
.TP
\fCQt::NotCopyROP\fR - dst = NOT src
.TP
\fCQt::NotOrROP\fR - dst = (NOT src) OR dst
.TP
\fCQt::NotXorROP\fR - dst = (NOT src) XOR dst
.TP
\fCQt::AndROP\fR - dst = src AND dst
.TP
\fCQt::NotEraseROP\fR - an alias for AndROP
.TP
\fCQt::NotROP\fR - dst = NOT dst
.TP
\fCQt::ClearROP\fR - dst = 0
.TP
\fCQt::SetROP\fR - dst = 1
.TP
\fCQt::NopROP\fR - dst = dst
.TP
\fCQt::AndNotROP\fR - dst = src AND (NOT dst)
.TP
\fCQt::OrNotROP\fR - dst = src OR (NOT dst)
.TP
\fCQt::NandROP\fR - dst = NOT (src AND dst)
.TP
\fCQt::NorROP\fR - dst = NOT (src OR dst)
.PP
By far the most useful ones are CopyROP and XorROP.
.PP
On Qt/Embedded, only CopyROP, XorROP, and NotROP are supported.
.SH "Qt::SequenceMatch"
.TP
\fCQt::NoMatch\fR - Sequences have nothing in common
.TP
\fCQt::PartialMatch\fR - Sequences match partially, but are not complete
.TP
\fCQt::Identical\fR - Sequences do not differ
.SH "Qt::SortOrder"
This enum describes how the items in a widget are sorted.
.TP
\fCQt::Ascending\fR - The items are sorted ascending e.g. starts with 'AAA' ends with 'ZZZ' in Latin-1 locales
.TP
\fCQt::Descending\fR - The items are sorted descending e.g. starts with 'ZZZ' ends with 'AAA' in Latin-1 locales
.SH "Qt::StringComparisonMode"
This enum type is used to set the string comparison mode when searching for an item. It is used by QListBox, QListView and QIconView, for example. We'll refer to the string being searched as the 'target' string.
.TP
\fCQt::CaseSensitive\fR - The strings must match case sensitively.
.TP
\fCQt::ExactMatch\fR - The target and search strings must match exactly.
.TP
\fCQt::BeginsWith\fR - The target string begins with the search string.
.TP
\fCQt::EndsWith\fR - The target string ends with the search string.
.TP
\fCQt::Contains\fR - The target string contains the search string.
.PP
If you OR these flags together (excluding CaseSensitive), the search criteria be applied in the following order: ExactMatch, BeginsWith, EndsWith, Contains.
.PP
Matching is case-insensitive unless CaseSensitive is set. CaseSensitive can be OR-ed with any combination of the other flags.
.SH "Qt::TextFlags"
This enum type is used to define some modifier flags. Some of these flags only make sense in the context of printing:
.TP
\fCQt::SingleLine\fR - Treats all whitespace as spaces and prints just one line.
.TP
\fCQt::DontClip\fR - If it's impossible to stay within the given bounds, it prints outside.
.TP
\fCQt::ExpandTabs\fR - Makes the U+0009 (ASCII tab) character move to the next tab stop.
.TP
\fCQt::ShowPrefix\fR - Displays the string "&P" as <u>P</u> (see QButton for an example). For an ampersand, use "&&".
.TP
\fCQt::WordBreak\fR - Breaks lines at appropriate points, e.g. at word boundaries.
.TP
\fCQt::BreakAnywhere\fR - Breaks lines anywhere, even within words.
.TP
\fCQt::NoAccel\fR - Same as ShowPrefix but doesn't draw the underlines.
.PP
You can use as many modifier flags as you want, except that SingleLine and WordBreak cannot be combined.
.PP
Flags that are inappropriate for a given use (e.g. ShowPrefix to QGridLayout::addWidget()) are generally ignored.
.SH "Qt::TextFormat"
This enum is used in widgets that can display both plain text and rich text, e.g. QLabel. It is used for deciding whether a text string should be interpreted as one or the other. This is normally done by passing one of the enum values to a setTextFormat() function.
.TP
\fCQt::PlainText\fR - The text string is interpreted as a plain text string.
.TP
\fCQt::RichText\fR - The text string is interpreted as a rich text string using the current QStyleSheet::defaultSheet().
.TP
\fCQt::AutoText\fR - The text string is interpreted as for RichText if QStyleSheet::mightBeRichText() returns TRUE, otherwise as PlainText.
.TP
\fCQt::LogText\fR - A special, limited text format which is only used by QTextEdit in an optimized mode.
.SH "Qt::TimeSpec"
.TP
\fCQt::LocalTime\fR - Locale dependent time (Timezones and Daylight Savings Time)
.TP
\fCQt::UTC\fR - Coordinated Universal Time, replaces Greenwich Time
.SH "Qt::UIEffect"
.TP
\fCQt::UI_General\fR
.TP
\fCQt::UI_AnimateMenu\fR
.TP
\fCQt::UI_FadeMenu\fR
.TP
\fCQt::UI_AnimateCombo\fR
.TP
\fCQt::UI_AnimateTooltip\fR
.TP
\fCQt::UI_FadeTooltip\fR
.TP
\fCQt::UI_AnimateToolBox\fR - Reserved
.SH "Qt::WidgetFlags"

.PP
This enum type is used to specify various window-system properties for the widget. They are fairly unusual but necessary in a few cases. Some of these flags depend on whether the underlying window manager supports them. (See the toplevel example for an explanation and example of their use.)
.PP
The main types are
.TP
\fCQt::WType_TopLevel\fR - indicates that this widget is a top-level widget, usually with a window-system frame and so on.
.TP
\fCQt::WType_Dialog\fR - indicates that this widget is a top-level window that should be decorated as a dialog (i.e. typically no maximize or minimize buttons in the title bar). If you want to use it as a modal dialog it should be launched from another window, or have a parent and this flag should be combined with WShowModal. If you make it modal, the dialog will prevent other top-level windows in the application from getting any input. WType_Dialog implies WType_TopLevel. We refer to a top-level window that has a parent as a \fIsecondary\fR window. (See also WGroupLeader.)
.TP
\fCQt::WType_Popup\fR - indicates that this widget is a popup top-level window, i.e. that it is modal, but has a window system frame appropriate for popup menus. WType_Popup implies WType_TopLevel.
.TP
\fCQt::WType_Desktop\fR - indicates that this widget is the desktop. See also WPaintDesktop below. WType_Desktop implies WType_TopLevel.
.PP
There are also a number of flags which you can use to customize the appearance of top-level windows. These have no effect on other windows:
.TP
\fCQt::WStyle_Customize\fR - indicates that the \fCWStyle_*\fR flags should be used to build the window instead of the default flags.
.TP
\fCQt::WStyle_NormalBorder\fR - gives the window a normal border. This cannot be combined with WStyle_DialogBorder or WStyle_NoBorder.
.TP
\fCQt::WStyle_DialogBorder\fR - gives the window a thin dialog border. This cannot be combined with WStyle_NormalBorder or WStyle_NoBorder.
.TP
\fCQt::WStyle_NoBorder\fR - produces a borderless window. Note that the user cannot move or resize a borderless window via the window system. This cannot be combined with WStyle_NormalBorder or WStyle_DialogBorder. On Windows, the flag works fine. On X11, the result of the flag is dependent on the window manager and its ability to understand MOTIF and/or NETWM hints: most existing modern window managers can handle this. With WX11BypassWM, you can bypass the window manager completely. This results in a borderless window that is not managed at all (i.e. no keyboard input unless you call setActiveWindow() manually).
.TP
\fCQt::WStyle_NoBorderEx\fR - this value is obsolete. It has the same effect as using WStyle_NoBorder.
.TP
\fCQt::WStyle_Title\fR - gives the window a title bar.
.TP
\fCQt::WStyle_SysMenu\fR - adds a window system menu.
.TP
\fCQt::WStyle_Minimize\fR - adds a minimize button. Note that on Windows this has to be combined with WStyle_SysMenu for it to work.
.TP
\fCQt::WStyle_Maximize\fR - adds a maximize button. Note that on Windows this has to be combined with WStyle_SysMenu for it to work.
.TP
\fCQt::WStyle_MinMax\fR - is equal to \fCWStyle_Minimize|WStyle_Maximize\fR. Note that on Windows this has to be combined with WStyle_SysMenu to work.
.TP
\fCQt::WStyle_ContextHelp\fR - adds a context help button to dialogs.
.TP
\fCQt::WStyle_Tool\fR - makes the window a tool window. A tool window is often a small window with a smaller than usual title bar and decoration, typically used for collections of tool buttons. It there is a parent, the tool window will always be kept on top of it. If there isn't a parent, you may consider passing WStyle_StaysOnTop as well. If the window system supports it, a tool window can be decorated with a somewhat lighter frame. It can also be combined with WStyle_NoBorder.
.TP
\fCQt::WStyle_StaysOnTop\fR - informs the window system that the window should stay on top of all other windows. Note that on some window managers on X11 you also have to pass WX11BypassWM for this flag to work correctly.
.TP
\fCQt::WStyle_Dialog\fR - indicates that the window is a logical subwindow of its parent (i.e. a dialog). The window will not get its own taskbar entry and will be kept on top of its parent by the window system. Usually it will also be minimized when the parent is minimized. If not customized, the window is decorated with a slightly simpler title bar. This is the flag QDialog uses.
.TP
\fCQt::WStyle_Splash\fR - indicates that the window is a splash screen. On X11, we try to follow NETWM standard for a splash screen window if the window manager supports is otherwise it is equivalent to WX11BypassWM. On other platforms, it is equivalent to WStyle_NoBorder \fC|\fR WMacNoSheet \fC|\fR WStyle_Tool \fC|\fR WWinOwnDC
.PP
Modifier flags:
.TP
\fCQt::WDestructiveClose\fR - makes Qt delete this widget when the widget has accepted closeEvent(), or when the widget tried to ignore closeEvent() but could not.
.TP
\fCQt::WPaintDesktop\fR - gives this widget paint events for the desktop.
.TP
\fCQt::WPaintUnclipped\fR - makes all painters operating on this widget unclipped. Children of this widget or other widgets in front of it do not clip the area the painter can paint on.
.TP
\fCQt::WPaintClever\fR - indicates that Qt should \fInot\fR try to optimize repainting for the widget, but instead pass on window system repaint events directly. (This tends to produce more events and smaller repaint regions.)
.TP
\fCQt::WMouseNoMask\fR - indicates that even if the widget has a mask, it wants mouse events for its entire rectangle.
.TP
\fCQt::WStaticContents\fR - indicates that the widget contents are north-west aligned and static. On resize, such a widget will receive paint events only for the newly visible part of itself.
.TP
\fCQt::WNoAutoErase\fR - indicates that the widget paints all its pixels. Updating, resizing, scrolling and focus changes should therefore not erase the widget. This allows smart-repainting to avoid flicker.
.TP
\fCQt::WResizeNoErase\fR - this value is obsolete; use WNoAutoErase instead.
.TP
\fCQt::WRepaintNoErase\fR - this value is obsolete; use WNoAutoErase instead.
.TP
\fCQt::WGroupLeader\fR - makes this window a group leader. A group leader should \fInot\fR have a parent (i.e. it should be a top-level window). Any decendant windows (direct or indirect) of a group leader are in its group; other windows are not. If you show a secondary window from the group (i.e. show a window whose top-most parent is a group leader), that window will be modal with respect to the other windows in the group, but modeless with respect to windows in other groups.
.PP
Miscellaneous flags
.TP
\fCQt::WShowModal\fR - see WType_Dialog
.PP
Internal flags.
.TP
\fCQt::WNoMousePropagation\fR
.TP
\fCQt::WStaticContents\fR
.TP
\fCQt::WStyle_Reserved\fR
.TP
\fCQt::WSubWindow\fR
.TP
\fCQt::WType_Modal\fR
.TP
\fCQt::WWinOwnDC\fR
.TP
\fCQt::WX11BypassWM\fR
.TP
\fCQt::WMacNoSheet\fR
.TP
\fCQt::WMacDrawer\fR
.TP
\fCQt::WStyle_Mask\fR
.TP
\fCQt::WType_Mask\fR
.SH "Qt::WidgetState"
Internal flags.
.TP
\fCQt::WState_Created\fR
.TP
\fCQt::WState_Disabled\fR
.TP
\fCQt::WState_Visible\fR
.TP
\fCQt::WState_ForceHide\fR
.TP
\fCQt::WState_OwnCursor\fR
.TP
\fCQt::WState_MouseTracking\fR
.TP
\fCQt::WState_CompressKeys\fR
.TP
\fCQt::WState_BlockUpdates\fR
.TP
\fCQt::WState_InPaintEvent\fR
.TP
\fCQt::WState_Reparented\fR
.TP
\fCQt::WState_ConfigPending\fR
.TP
\fCQt::WState_Resized\fR
.TP
\fCQt::WState_AutoMask\fR
.TP
\fCQt::WState_Polished\fR
.TP
\fCQt::WState_DND\fR
.TP
\fCQt::WState_Reserved0\fR - \fIinternal\fR
.TP
\fCQt::WState_CreatedHidden\fR
.TP
\fCQt::WState_Maximized\fR
.TP
\fCQt::WState_Minimized\fR
.TP
\fCQt::WState_ForceDisabled\fR
.TP
\fCQt::WState_Exposed\fR
.TP
\fCQt::WState_HasMouse\fR
.TP
\fCQt::WState_CreatedHidden\fR
.TP
\fCQt::WState_OwnSizePolicy\fR
.TP
\fCQt::WState_FullScreen\fR
.SH "Qt::WindowState"

.PP
This enum type is used to specify the current state of a top-level window.
.PP
The states are
.TP
\fCQt::WindowNoState\fR - The window has no state set (in normal state).
.TP
\fCQt::WindowMinimized\fR - The window is minimized (i.e. iconified).
.TP
\fCQt::WindowMaximized\fR - The window is maximized with a frame around it.
.TP
\fCQt::WindowFullScreen\fR - The window fills the entire screen without any frame around it.
.TP
\fCQt::WindowActive\fR - The window is the active window, i.e. it has keyboard focus.
.SH "Qt::WindowsVersion"
.TP
\fCQt::WV_32s\fR - Windows 3.1 with Win 32s
.TP
\fCQt::WV_95\fR - Windows 95
.TP
\fCQt::WV_98\fR - Windows 98
.TP
\fCQt::WV_Me\fR - Windows Me
.TP
\fCQt::WV_DOS_based\fR
.TP
\fCQt::WV_NT\fR - Windows NT
.TP
\fCQt::WV_2000\fR - Windows 2000
.TP
\fCQt::WV_XP\fR - Windows XP
.TP
\fCQt::WV_2003\fR - Windows Server 2003
.TP
\fCQt::WV_NT_based\fR
.TP
\fCQt::WV_VISTA\fR - Windows Vista
.TP
\fCQt::WV_CE\fR - Windows CE
.TP
\fCQt::WV_CENET\fR - Windows CE .NET
.TP
\fCQt::WV_CE_based\fR

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qt.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qt.3qt) and the Qt
version (3.3.8).
