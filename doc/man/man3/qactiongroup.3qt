'\" t
.TH QActionGroup 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QActionGroup \- Groups actions together
.SH SYNOPSIS
\fC#include <qaction.h>\fR
.PP
Inherits QAction.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQActionGroup\fR ( QObject * parent, const char * name = 0 )"
.br
.ti -1c
.BI "\fBQActionGroup\fR ( QObject * parent, const char * name, bool exclusive )"
.br
.ti -1c
.BI "\fB~QActionGroup\fR ()"
.br
.ti -1c
.BI "void \fBsetExclusive\fR ( bool )"
.br
.ti -1c
.BI "bool \fBisExclusive\fR () const"
.br
.ti -1c
.BI "void \fBadd\fR ( QAction * action )"
.br
.ti -1c
.BI "void \fBaddSeparator\fR ()"
.br
.ti -1c
.BI "virtual bool \fBaddTo\fR ( QWidget * w )"
.br
.ti -1c
.BI "void \fBsetUsesDropDown\fR ( bool enable )"
.br
.ti -1c
.BI "bool \fBusesDropDown\fR () const"
.br
.ti -1c
.BI "void insert ( QAction * a )  \fI(obsolete)\fR"
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void \fBselected\fR ( QAction * )"
.br
.in -1c
.SS "Properties"
.in +1c
.ti -1c
.BI "bool \fBexclusive\fR - whether the action group does exclusive toggling"
.br
.ti -1c
.BI "bool \fBusesDropDown\fR - whether the group's actions are displayed in a subwidget of the widgets the action group is added to"
.br
.in -1c
.SH DESCRIPTION
The QActionGroup class groups actions together.
.PP
In some situations it is useful to group actions together. For example, if you have a left justify action, a right justify action and a center action, only one of these actions should be active at any one time, and one simple way of achieving this is to group the actions together in an action group.
.PP
An action group can also be added to a menu or a toolbar as a single unit, with all the actions within the action group appearing as separate menu options and toolbar buttons.
.PP
Here's an example from examples/textedit:
.PP
.nf
.br
        QActionGroup *grp = new QActionGroup( this );
.br
        connect( grp, SIGNAL( selected( QAction* ) ), this, SLOT( textAlign( QAction* ) ) );
.fi
.PP
Here we create a new action group. Since the action group is exclusive by default, only one of the actions in the group is ever active at any one time. We then connect the group's selected() signal to our textAlign() slot.
.PP
.nf
.br
        actionAlignLeft = new QAction( QPixmap::fromMimeSource( "textleft.xpm" ), tr( "&Left" ), CTRL + Key_L, grp, "textLeft" );
.br
        actionAlignLeft->setToggleAction( TRUE );
.fi
.PP
We create a left align action, add it to the toolbar and the menu and make it a toggle action. We create center and right align actions in exactly the same way.
.PP
The actions in an action group emit their activated() (and for toggle actions, toggled()) signals as usual.
.PP
The setExclusive() function is used to ensure that only one action is active at any one time: it should be used with actions which have their toggleAction set to TRUE.
.PP
Action group actions appear as individual menu options and toolbar buttons. For exclusive action groups use setUsesDropDown() to display the actions in a subwidget of any widget the action group is added to. For example, the actions would appear in a combobox in a toolbar or as a submenu in a menu.
.PP
Actions can be added to an action group using add(), but normally they are added by creating the action with the action group as parent. Actions can have separators dividing them using addSeparator(). Action groups are added to widgets with addTo().
.PP
See also Main Window and Related Classes and Basic Widgets.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QActionGroup::QActionGroup ( QObject * parent, const char * name = 0 )"
Constructs an action group called \fIname\fR, with parent \fIparent\fR.
.PP
The action group is exclusive by default. Call setExclusive(FALSE) to make the action group non-exclusive.
.SH "QActionGroup::QActionGroup ( QObject * parent, const char * name, bool exclusive )"
Constructs an action group called \fIname\fR, with parent \fIparent\fR.
.PP
If \fIexclusive\fR is TRUE only one toggle action in the group will ever be active.
.PP
See also exclusive.
.SH "QActionGroup::~QActionGroup ()"
Destroys the object and frees allocated resources.
.SH "void QActionGroup::add ( QAction * action )"
Adds action \fIaction\fR to this group.
.PP
Normally an action is added to a group by creating it with the group as parent, so this function is not usually used.
.PP
See also addTo().
.SH "void QActionGroup::addSeparator ()"
Adds a separator to the group.
.SH "bool QActionGroup::addTo ( QWidget * w )\fC [virtual]\fR"
Adds this action group to the widget \fIw\fR.
.PP
If isExclusive() is FALSE or usesDropDown() is FALSE, the actions within the group are added to the widget individually. For example, if the widget is a menu, the actions will appear as individual menu options, and if the widget is a toolbar, the actions will appear as toolbar buttons.
.PP
If both isExclusive() and usesDropDown() are TRUE, the actions are presented either in a combobox (if \fIw\fR is a toolbar) or in a submenu (if \fIw\fR is a menu).
.PP
All actions should be added to the action group \fIbefore\fR the action group is added to the widget. If actions are added to the action group \fIafter\fR the action group has been added to the widget these later actions will \fInot\fR appear.
.PP
See also exclusive, usesDropDown, and removeFrom().
.PP
Example: themes/themes.cpp.
.PP
Reimplemented from QAction.
.SH "void QActionGroup::insert ( QAction * a )"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
Use add() instead, or better still create the action with the action group as its parent.
.SH "bool QActionGroup::isExclusive () const"
Returns TRUE if the action group does exclusive toggling; otherwise returns FALSE. See the "exclusive" property for details.
.SH "void QActionGroup::selected ( QAction * )\fC [signal]\fR"
This signal is emitted from exclusive groups when toggle actions change state.
.PP
The argument is the action whose state changed to "on".
.PP
See also exclusive, on, and QAction::toggled().
.PP
Examples:
.)l chart/chartform.cpp and textedit/textedit.cpp.
.SH "void QActionGroup::setExclusive ( bool )"
Sets whether the action group does exclusive toggling. See the "exclusive" property for details.
.SH "void QActionGroup::setUsesDropDown ( bool enable )"
Sets whether the group's actions are displayed in a subwidget of the widgets the action group is added to to \fIenable\fR. See the "usesDropDown" property for details.
.SH "bool QActionGroup::usesDropDown () const"
Returns TRUE if the group's actions are displayed in a subwidget of the widgets the action group is added to; otherwise returns FALSE. See the "usesDropDown" property for details.
.SS "Property Documentation"
.SH "bool exclusive"
This property holds whether the action group does exclusive toggling.
.PP
If exclusive is TRUE only one toggle action in the action group can ever be active at any one time. If the user chooses another toggle action in the group the one they chose becomes active and the one that was active becomes inactive.
.PP
See also QAction::toggleAction.
.PP
Set this property's value with setExclusive() and get this property's value with isExclusive().
.SH "bool usesDropDown"
This property holds whether the group's actions are displayed in a subwidget of the widgets the action group is added to.
.PP
Exclusive action groups added to a toolbar display their actions in a combobox with the action's QAction::text and QAction::iconSet properties shown. Non-exclusive groups are represented by a tool button showing their QAction::iconSet and -- depending on QMainWindow::usesTextLabel() -- text() property.
.PP
In a popup menu the member actions are displayed in a submenu.
.PP
Changing usesDropDown only affects \fIsubsequent\fR calls to addTo().
.PP
Note that setting this property for actions in a combobox causes calls to their QAction::setVisible(), QAction::setEnabled(), and QAction::setDisabled() functions to have no effect.
.PP
This property's default is FALSE.
.PP
Set this property's value with setUsesDropDown() and get this property's value with usesDropDown().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qactiongroup.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qactiongroup.3qt) and the Qt
version (3.3.8).
