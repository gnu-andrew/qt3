'\" t
.TH QFile 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QFile \- I/O device that operates on files
.SH SYNOPSIS
Almost all the functions in this class are reentrant when Qt is built with thread support. The exceptions are \fBsetEncodingFunction\fR(), \fBsetDecodingFunction\fR(), and \fBsetErrorString\fR(). </p>
.PP
\fC#include <qfile.h>\fR
.PP
Inherits QIODevice.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQFile\fR ()"
.br
.ti -1c
.BI "\fBQFile\fR ( const QString & name )"
.br
.ti -1c
.BI "\fB~QFile\fR ()"
.br
.ti -1c
.BI "QString \fBname\fR () const"
.br
.ti -1c
.BI "void \fBsetName\fR ( const QString & name )"
.br
.ti -1c
.BI "typedef QCString (* \fBEncoderFn\fR ) ( const QString & fileName )"
.br
.ti -1c
.BI "typedef QString (* \fBDecoderFn\fR ) ( const QCString & localfileName )"
.br
.ti -1c
.BI "bool \fBexists\fR () const"
.br
.ti -1c
.BI "bool \fBremove\fR ()"
.br
.ti -1c
.BI "virtual bool \fBopen\fR ( int m )"
.br
.ti -1c
.BI "bool \fBopen\fR ( int m, FILE * f )"
.br
.ti -1c
.BI "bool \fBopen\fR ( int m, int f )"
.br
.ti -1c
.BI "virtual void \fBclose\fR ()"
.br
.ti -1c
.BI "virtual void \fBflush\fR ()"
.br
.ti -1c
.BI "virtual Offset \fBsize\fR () const"
.br
.ti -1c
.BI "virtual bool \fBatEnd\fR () const"
.br
.ti -1c
.BI "virtual Q_LONG \fBreadLine\fR ( char * p, Q_ULONG maxlen )"
.br
.ti -1c
.BI "Q_LONG \fBreadLine\fR ( QString & s, Q_ULONG maxlen )"
.br
.ti -1c
.BI "virtual int \fBgetch\fR ()"
.br
.ti -1c
.BI "virtual int \fBputch\fR ( int ch )"
.br
.ti -1c
.BI "virtual int \fBungetch\fR ( int ch )"
.br
.ti -1c
.BI "int \fBhandle\fR () const"
.br
.ti -1c
.BI "QString \fBerrorString\fR () const"
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "QCString \fBencodeName\fR ( const QString & fileName )"
.br
.ti -1c
.BI "QString \fBdecodeName\fR ( const QCString & localFileName )"
.br
.ti -1c
.BI "void \fBsetEncodingFunction\fR ( EncoderFn f )"
.br
.ti -1c
.BI "void \fBsetDecodingFunction\fR ( DecoderFn f )"
.br
.ti -1c
.BI "bool \fBexists\fR ( const QString & fileName )"
.br
.ti -1c
.BI "bool \fBremove\fR ( const QString & fileName )"
.br
.in -1c
.SS "Important Inherited Members"
.in +1c
.ti -1c
.BI "virtual QByteArray \fBreadAll\fR ()"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "void \fBsetErrorString\fR ( const QString & str )"
.br
.in -1c
.SH DESCRIPTION
The QFile class is an I/O device that operates on files.
.PP
QFile is an I/O device for reading and writing binary and text files. A QFile may be used by itself or more conveniently with a QDataStream or QTextStream.
.PP
The file name is usually passed in the constructor but can be changed with setName(). You can check for a file's existence with exists() and remove a file with remove().
.PP
The file is opened with open(), closed with close() and flushed with flush(). Data is usually read and written using QDataStream or QTextStream, but you can read with readBlock() and readLine() and write with writeBlock(). QFile also supports getch(), ungetch() and putch().
.PP
The size of the file is returned by size(). You can get the current file position or move to a new file position using the at() functions. If you've reached the end of the file, atEnd() returns TRUE. The file handle is returned by handle().
.PP
Here is a code fragment that uses QTextStream to read a text file line by line. It prints each line with a line number.
.PP
.nf
.br
    QStringList lines;
.br
    QFile file( "file.txt" );
.br
    if ( file.open( IO_ReadOnly ) ) {
.br
        QTextStream stream( &file );
.br
        QString line;
.br
        int i = 1;
.br
        while ( !stream.atEnd() ) {
.br
            line = stream.readLine(); // line of text excluding '\\n'
.br
            printf( "%3d: %s\\n", i++, line.latin1() );
.br
            lines += line;
.br
        }
.br
        file.close();
.br
    }
.br
.fi
.PP
Writing text is just as easy. The following example shows how to write the data we read into the string list from the previous example:
.PP
.nf
.br
    QFile file( "file.txt" );
.br
    if ( file.open( IO_WriteOnly ) ) {
.br
        QTextStream stream( &file );
.br
        for ( QStringList::Iterator it = lines.begin(); it != lines.end(); ++it )
.br
            stream << *it << "\\n";
.br
        file.close();
.br
    }
.br
.fi
.PP
The QFileInfo class holds detailed information about a file, such as access permissions, file dates and file types.
.PP
The QDir class manages directories and lists of file names.
.PP
Qt uses Unicode file names. If you want to do your own I/O on Unix systems you may want to use encodeName() (and decodeName()) to convert the file name into the local encoding.
.PP
See also QDataStream, QTextStream, and Input/Output and Networking.
.SS "Member Type Documentation"
.SH "QFile::DecoderFn"
This is used by QFile::setDecodingFunction().
.SH "QFile::EncoderFn"
This is used by QFile::setEncodingFunction().
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QFile::QFile ()"
Constructs a QFile with no name.
.SH "QFile::QFile ( const QString & name )"
Constructs a QFile with a file name \fIname\fR.
.PP
See also setName().
.SH "QFile::~QFile ()"
Destroys a QFile. Calls close().
.SH "bool QFile::atEnd () const\fC [virtual]\fR"
Returns TRUE if the end of file has been reached; otherwise returns FALSE. If QFile has not been open()'d, then the behavior is undefined.
.PP
See also size().
.PP
Example: distributor/distributor.ui.h.
.PP
Reimplemented from QIODevice.
.SH "void QFile::close ()\fC [virtual]\fR"
Closes an open file.
.PP
The file is not closed if it was opened with an existing file handle. If the existing file handle is a \fCFILE*\fR, the file is flushed. If the existing file handle is an \fCint\fR file descriptor, nothing is done to the file.
.PP
Some "write-behind" filesystems may report an unspecified error on closing the file. These errors only indicate that something may have gone wrong since the previous open(). In such a case status() reports IO_UnspecifiedError after close(), otherwise IO_Ok.
.PP
See also open() and flush().
.PP
Examples:
.)l chart/chartform_files.cpp, distributor/distributor.ui.h, helpviewer/helpwindow.cpp, mdi/application.cpp, qdir/qdir.cpp, qwerty/qwerty.cpp, and xml/outliner/outlinetree.cpp.
.PP
Reimplemented from QIODevice.
.SH "QString QFile::decodeName ( const QCString & localFileName )\fC [static]\fR"
This does the reverse of QFile::encodeName() using \fIlocalFileName\fR.
.PP
See also setDecodingFunction().
.PP
Example: distributor/distributor.ui.h.
.SH "QCString QFile::encodeName ( const QString & fileName )\fC [static]\fR"
When you use QFile, QFileInfo, and QDir to access the file system with Qt, you can use Unicode file names. On Unix, these file names are converted to an 8-bit encoding. If you want to do your own file I/O on Unix, you should convert the file name using this function. On Windows NT/2000, Unicode file names are supported directly in the file system and this function should be avoided. On Windows 95, non-Latin1 locales are not supported.
.PP
By default, this function converts \fIfileName\fR to the local 8-bit encoding determined by the user's locale. This is sufficient for file names that the user chooses. File names hard-coded into the application should only use 7-bit ASCII filename characters.
.PP
The conversion scheme can be changed using setEncodingFunction(). This might be useful if you wish to give the user an option to store file names in UTF-8, etc., but be aware that such file names would probably then be unrecognizable when seen by other programs.
.PP
See also decodeName().
.PP
Example: distributor/distributor.ui.h.
.SH "QString QFile::errorString () const"
Returns a human-readable description of the reason of an error that occurred on the device. The error described by the string corresponds to changes of QIODevice::status(). If the status is reset, the error string is also reset.
.PP
The returned strings are not translated with the QObject::tr() or QApplication::translate() functions. They are marked as translatable strings in the "QFile" context. Before you show the string to the user you should translate it first, for example:
.PP
.nf
.br
        QFile f( "address.dat" );
.br
        if ( !f.open( IO_ReadOnly ) {
.br
            QMessageBox::critical(
.br
                this,
.br
                tr("Open failed"),
.br
                tr("Could not open file for reading: %1").arg( qApp->translate("QFile",f.errorString()) )
.br
                );
.br
            return;
.br
        }
.br
.fi
.PP
See also QIODevice::status(), QIODevice::resetStatus(), and setErrorString().
.SH "bool QFile::exists ( const QString & fileName )\fC [static]\fR"
Returns TRUE if the file given by \fIfileName\fR exists; otherwise returns FALSE.
.PP
Examples:
.)l chart/chartform.cpp, dirview/dirview.cpp, and helpviewer/helpwindow.cpp.
.SH "bool QFile::exists () const"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Returns TRUE if this file exists; otherwise returns FALSE.
.PP
See also name().
.SH "void QFile::flush ()\fC [virtual]\fR"
Flushes the file buffer to the disk.
.PP
close() also flushes the file buffer.
.PP
Reimplemented from QIODevice.
.SH "int QFile::getch ()\fC [virtual]\fR"
Reads a single byte/character from the file.
.PP
Returns the byte/character read, or -1 if the end of the file has been reached.
.PP
See also putch() and ungetch().
.PP
Reimplemented from QIODevice.
.SH "int QFile::handle () const"
Returns the file handle of the file.
.PP
This is a small positive integer, suitable for use with C library functions such as fdopen() and fcntl(). On systems that use file descriptors for sockets (ie. Unix systems, but not Windows) the handle can be used with QSocketNotifier as well.
.PP
If the file is not open or there is an error, handle() returns -1.
.PP
See also QSocketNotifier.
.SH "QString QFile::name () const"
Returns the name set by setName().
.PP
See also setName() and QFileInfo::fileName().
.SH "bool QFile::open ( int m )\fC [virtual]\fR"
Opens the file specified by the file name currently set, using the mode \fIm\fR. Returns TRUE if successful, otherwise FALSE.
.PP

.PP
The mode parameter \fIm\fR must be a combination of the following flags: <center>.nf
.TS
l - l. Flag Meaning IO_Raw Raw (non-buffered) file access. IO_ReadOnly Opens the file in read-only mode. IO_WriteOnly Opens the file in write-only mode. If this flag is used with another flag, e.g. IO_ReadOnly or IO_Raw or IO_Append, the file is \fInot\fR truncated; but if used on its own (or with IO_Truncate), the file is truncated. IO_ReadWrite Opens the file in read/write mode, equivalent to IO_Append Opens the file in append mode. (You must actually use IO_Truncate Truncates the file. IO_Translate
.TE
.fi
</center>
.PP
The raw access mode is best when I/O is block-operated using a 4KB block size or greater. Buffered access works better when reading small portions of data at a time.
.PP
\fBWarning:\fR When working with buffered files, data may not be written to the file at once. Call flush() to make sure that the data is really written.
.PP
\fBWarning:\fR If you have a buffered file opened for both reading and writing you must not perform an input operation immediately after an output operation or vice versa. You should always call flush() or a file positioning operation, e.g. at(), between input and output operations, otherwise the buffer may contain garbage.
.PP
If the file does not exist and IO_WriteOnly or IO_ReadWrite is specified, it is created.
.PP
Example:
.PP
.nf
.br
        QFile f1( "/tmp/data.bin" );
.br
        f1.open( IO_Raw | IO_ReadWrite );
.br
.br
        QFile f2( "readme.txt" );
.br
        f2.open( IO_ReadOnly | IO_Translate );
.br
.br
        QFile f3( "audit.log" );
.br
        f3.open( IO_WriteOnly | IO_Append );
.br
.fi
.PP
See also name(), close(), isOpen(), and flush().
.PP
Examples:
.)l application/application.cpp, chart/chartform_files.cpp, distributor/distributor.ui.h, helpviewer/helpwindow.cpp, qdir/qdir.cpp, qwerty/qwerty.cpp, and xml/outliner/outlinetree.cpp.
.PP
Reimplemented from QIODevice.
.SH "bool QFile::open ( int m, FILE * f )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Opens a file in the mode \fIm\fR using an existing file handle \fIf\fR. Returns TRUE if successful, otherwise FALSE.
.PP
Example:
.PP
.nf
.br
    #include <stdio.h>
.br
.br
    void printError( const char* msg )
.br
    {
.br
        QFile f;
.br
        f.open( IO_WriteOnly, stderr );
.br
        f.writeBlock( msg, qstrlen(msg) );      // write to stderr
.br
        f.close();
.br
    }
.br
.fi
.PP
When a QFile is opened using this function, close() does not actually close the file, only flushes it.
.PP
\fBWarning:\fR If \fIf\fR is \fCstdin\fR, \fCstdout\fR, \fCstderr\fR, you may not be able to seek. See QIODevice::isSequentialAccess() for more information.
.PP
See also close().
.SH "bool QFile::open ( int m, int f )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Opens a file in the mode \fIm\fR using an existing file descriptor \fIf\fR. Returns TRUE if successful, otherwise FALSE.
.PP
When a QFile is opened using this function, close() does not actually close the file.
.PP
The QFile that is opened using this function, is automatically set to be in raw mode; this means that the file input/output functions are slow. If you run into performance issues, you should try to use one of the other open functions.
.PP
\fBWarning:\fR If \fIf\fR is one of 0 (stdin), 1 (stdout) or 2 (stderr), you may not be able to seek. size() is set to \fCINT_MAX\fR (in limits.h).
.PP
See also close().
.SH "int QFile::putch ( int ch )\fC [virtual]\fR"
Writes the character \fIch\fR to the file.
.PP
Returns \fIch\fR, or -1 if some error occurred.
.PP
See also getch() and ungetch().
.PP
Reimplemented from QIODevice.
.SH "QByteArray QIODevice::readAll ()\fC [virtual]\fR"
This convenience function returns all of the remaining data in the device.
.SH "Q_LONG QFile::readLine ( char * p, Q_ULONG maxlen )\fC [virtual]\fR"
Reads a line of text.
.PP
Reads bytes from the file into the char* \fIp\fR, until end-of-line or \fImaxlen\fR bytes have been read, whichever occurs first. Returns the number of bytes read, or -1 if there was an error. Any terminating newline is not stripped.
.PP
This function is only efficient for buffered files. Avoid readLine() for files that have been opened with the IO_Raw flag.
.PP
See also readBlock() and QTextStream::readLine().
.PP
Reimplemented from QIODevice.
.SH "Q_LONG QFile::readLine ( QString & s, Q_ULONG maxlen )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads a line of text.
.PP
Reads bytes from the file into string \fIs\fR, until end-of-line or \fImaxlen\fR bytes have been read, whichever occurs first. Returns the number of bytes read, or -1 if there was an error, e.g. end of file. Any terminating newline is not stripped.
.PP
This function is only efficient for buffered files. Avoid using readLine() for files that have been opened with the IO_Raw flag.
.PP
Note that the string is read as plain Latin1 bytes, not Unicode.
.PP
See also readBlock() and QTextStream::readLine().
.SH "bool QFile::remove ()"
Removes the file specified by the file name currently set. Returns TRUE if successful; otherwise returns FALSE.
.PP
The file is closed before it is removed.
.SH "bool QFile::remove ( const QString & fileName )\fC [static]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Removes the file \fIfileName\fR. Returns TRUE if successful, otherwise FALSE.
.SH "void QFile::setDecodingFunction ( DecoderFn f )\fC [static]\fR"
\fBWarning:\fR This function is \fInot\fR reentrant.</p>
.PP
Sets the function for decoding 8-bit file names to \fIf\fR. The default uses the locale-specific 8-bit encoding.
.PP
See also encodeName() and decodeName().
.SH "void QFile::setEncodingFunction ( EncoderFn f )\fC [static]\fR"
\fBWarning:\fR This function is \fInot\fR reentrant.</p>
.PP
Sets the function for encoding Unicode file names to \fIf\fR. The default encodes in the locale-specific 8-bit encoding.
.PP
See also encodeName().
.SH "void QFile::setErrorString ( const QString & str )\fC [protected]\fR"
\fBWarning:\fR This function is \fInot\fR reentrant.</p>
.PP
Sets the error string returned by the errorString() function to \fIstr\fR.
.PP
See also errorString() and QIODevice::status().
.SH "void QFile::setName ( const QString & name )"
Sets the name of the file to \fIname\fR. The name can have no path, a relative path or an absolute absolute path.
.PP
Do not call this function if the file has already been opened.
.PP
If the file name has no path or a relative path, the path used will be whatever the application's current directory path is \fIat the time of the open()\fR call.
.PP
Example:
.PP
.nf
.br
        QFile file;
.br
        QDir::setCurrent( "/tmp" );
.br
        file.setName( "readme.txt" );
.br
        QDir::setCurrent( "/home" );
.br
        file.open( IO_ReadOnly );      // opens "/home/readme.txt" under Unix
.br
.fi
.PP
Note that the directory separator "/" works for all operating systems supported by Qt.
.PP
See also name(), QFileInfo, and QDir.
.SH "Offset QFile::size () const\fC [virtual]\fR"
Returns the file size.
.PP
See also at().
.PP
Example: table/statistics/statistics.cpp.
.PP
Reimplemented from QIODevice.
.SH "int QFile::ungetch ( int ch )\fC [virtual]\fR"
Puts the character \fIch\fR back into the file and decrements the index if it is not zero.
.PP
This function is normally called to "undo" a getch() operation.
.PP
Returns \fIch\fR, or -1 if an error occurred.
.PP
See also getch() and putch().
.PP
Reimplemented from QIODevice.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qfile.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qfile.3qt) and the Qt
version (3.3.8).
