'\" t
.TH QListView 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QListView \- Implements a list/tree view
.SH SYNOPSIS
\fC#include <qlistview.h>\fR
.PP
Inherits QScrollView.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQListView\fR ( QWidget * parent = 0, const char * name = 0, WFlags f = 0 )"
.br
.ti -1c
.BI "\fB~QListView\fR ()"
.br
.ti -1c
.BI "int \fBtreeStepSize\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetTreeStepSize\fR ( int )"
.br
.ti -1c
.BI "virtual void \fBinsertItem\fR ( QListViewItem * i )"
.br
.ti -1c
.BI "virtual void \fBtakeItem\fR ( QListViewItem * i )"
.br
.ti -1c
.BI "virtual void removeItem ( QListViewItem * item )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "QHeader * \fBheader\fR () const"
.br
.ti -1c
.BI "virtual int \fBaddColumn\fR ( const QString & label, int width = -1 )"
.br
.ti -1c
.BI "virtual int \fBaddColumn\fR ( const QIconSet & iconset, const QString & label, int width = -1 )"
.br
.ti -1c
.BI "virtual void \fBremoveColumn\fR ( int index )"
.br
.ti -1c
.BI "virtual void \fBsetColumnText\fR ( int column, const QString & label )"
.br
.ti -1c
.BI "virtual void \fBsetColumnText\fR ( int column, const QIconSet & iconset, const QString & label )"
.br
.ti -1c
.BI "QString \fBcolumnText\fR ( int c ) const"
.br
.ti -1c
.BI "virtual void \fBsetColumnWidth\fR ( int column, int w )"
.br
.ti -1c
.BI "int \fBcolumnWidth\fR ( int c ) const"
.br
.ti -1c
.BI "enum \fBWidthMode\fR { Manual, Maximum }"
.br
.ti -1c
.BI "virtual void \fBsetColumnWidthMode\fR ( int c, WidthMode mode )"
.br
.ti -1c
.BI "WidthMode \fBcolumnWidthMode\fR ( int c ) const"
.br
.ti -1c
.BI "int \fBcolumns\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetColumnAlignment\fR ( int column, int align )"
.br
.ti -1c
.BI "int \fBcolumnAlignment\fR ( int column ) const"
.br
.ti -1c
.BI "QListViewItem * \fBitemAt\fR ( const QPoint & viewPos ) const"
.br
.ti -1c
.BI "QRect \fBitemRect\fR ( const QListViewItem * i ) const"
.br
.ti -1c
.BI "int \fBitemPos\fR ( const QListViewItem * item )"
.br
.ti -1c
.BI "void \fBensureItemVisible\fR ( const QListViewItem * i )"
.br
.ti -1c
.BI "void \fBrepaintItem\fR ( const QListViewItem * item ) const"
.br
.ti -1c
.BI "virtual void setMultiSelection ( bool enable )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "bool isMultiSelection () const  \fI(obsolete)\fR"
.br
.ti -1c
.BI "enum \fBSelectionMode\fR { Single, Multi, Extended, NoSelection }"
.br
.ti -1c
.BI "void \fBsetSelectionMode\fR ( SelectionMode mode )"
.br
.ti -1c
.BI "SelectionMode \fBselectionMode\fR () const"
.br
.ti -1c
.BI "virtual void \fBclearSelection\fR ()"
.br
.ti -1c
.BI "virtual void \fBsetSelected\fR ( QListViewItem * item, bool selected )"
.br
.ti -1c
.BI "void \fBsetSelectionAnchor\fR ( QListViewItem * item )"
.br
.ti -1c
.BI "bool \fBisSelected\fR ( const QListViewItem * i ) const"
.br
.ti -1c
.BI "QListViewItem * \fBselectedItem\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetOpen\fR ( QListViewItem * item, bool open )"
.br
.ti -1c
.BI "bool \fBisOpen\fR ( const QListViewItem * item ) const"
.br
.ti -1c
.BI "virtual void \fBsetCurrentItem\fR ( QListViewItem * i )"
.br
.ti -1c
.BI "QListViewItem * \fBcurrentItem\fR () const"
.br
.ti -1c
.BI "QListViewItem * \fBfirstChild\fR () const"
.br
.ti -1c
.BI "QListViewItem * \fBlastItem\fR () const"
.br
.ti -1c
.BI "int \fBchildCount\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetAllColumnsShowFocus\fR ( bool )"
.br
.ti -1c
.BI "bool \fBallColumnsShowFocus\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetItemMargin\fR ( int )"
.br
.ti -1c
.BI "int \fBitemMargin\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetRootIsDecorated\fR ( bool )"
.br
.ti -1c
.BI "bool \fBrootIsDecorated\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetSorting\fR ( int column, bool ascending = TRUE )"
.br
.ti -1c
.BI "int \fBsortColumn\fR () const"
.br
.ti -1c
.BI "void \fBsetSortColumn\fR ( int column )"
.br
.ti -1c
.BI "SortOrder \fBsortOrder\fR () const"
.br
.ti -1c
.BI "void \fBsetSortOrder\fR ( SortOrder order )"
.br
.ti -1c
.BI "virtual void \fBsort\fR ()"
.br
.ti -1c
.BI "virtual bool \fBeventFilter\fR ( QObject * o, QEvent * e )"
.br
.ti -1c
.BI "virtual void \fBsetShowSortIndicator\fR ( bool show )"
.br
.ti -1c
.BI "bool \fBshowSortIndicator\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetShowToolTips\fR ( bool b )"
.br
.ti -1c
.BI "bool \fBshowToolTips\fR () const"
.br
.ti -1c
.BI "enum \fBResizeMode\fR { NoColumn, AllColumns, LastColumn }"
.br
.ti -1c
.BI "virtual void \fBsetResizeMode\fR ( ResizeMode m )"
.br
.ti -1c
.BI "ResizeMode \fBresizeMode\fR () const"
.br
.ti -1c
.BI "QListViewItem * \fBfindItem\fR ( const QString & text, int column, ComparisonFlags compare = ExactMatch | CaseSensitive ) const"
.br
.ti -1c
.BI "enum \fBRenameAction\fR { Accept, Reject }"
.br
.ti -1c
.BI "virtual void \fBsetDefaultRenameAction\fR ( RenameAction a )"
.br
.ti -1c
.BI "RenameAction \fBdefaultRenameAction\fR () const"
.br
.ti -1c
.BI "bool \fBisRenaming\fR () const"
.br
.ti -1c
.BI "void \fBhideColumn\fR ( int column )"
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "virtual void \fBclear\fR ()"
.br
.ti -1c
.BI "virtual void \fBinvertSelection\fR ()"
.br
.ti -1c
.BI "virtual void \fBselectAll\fR ( bool select )"
.br
.ti -1c
.BI "void \fBtriggerUpdate\fR ()"
.br
.ti -1c
.BI "void \fBadjustColumn\fR ( int col )"
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void \fBselectionChanged\fR ()"
.br
.ti -1c
.BI "void \fBselectionChanged\fR ( QListViewItem * )"
.br
.ti -1c
.BI "void \fBcurrentChanged\fR ( QListViewItem * )"
.br
.ti -1c
.BI "void \fBclicked\fR ( QListViewItem * item )"
.br
.ti -1c
.BI "void \fBclicked\fR ( QListViewItem * item, const QPoint & pnt, int c )"
.br
.ti -1c
.BI "void \fBpressed\fR ( QListViewItem * item )"
.br
.ti -1c
.BI "void \fBpressed\fR ( QListViewItem * item, const QPoint & pnt, int c )"
.br
.ti -1c
.BI "void doubleClicked ( QListViewItem * item )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "void \fBdoubleClicked\fR ( QListViewItem *, const QPoint &, int )"
.br
.ti -1c
.BI "void \fBreturnPressed\fR ( QListViewItem * )"
.br
.ti -1c
.BI "void \fBspacePressed\fR ( QListViewItem * )"
.br
.ti -1c
.BI "void \fBrightButtonClicked\fR ( QListViewItem *, const QPoint &, int )"
.br
.ti -1c
.BI "void \fBrightButtonPressed\fR ( QListViewItem *, const QPoint &, int )"
.br
.ti -1c
.BI "void \fBmouseButtonPressed\fR ( int button, QListViewItem * item, const QPoint & pos, int c )"
.br
.ti -1c
.BI "void \fBmouseButtonClicked\fR ( int button, QListViewItem * item, const QPoint & pos, int c )"
.br
.ti -1c
.BI "void \fBcontextMenuRequested\fR ( QListViewItem * item, const QPoint & pos, int col )"
.br
.ti -1c
.BI "void \fBonItem\fR ( QListViewItem * i )"
.br
.ti -1c
.BI "void \fBonViewport\fR ()"
.br
.ti -1c
.BI "void \fBexpanded\fR ( QListViewItem * item )"
.br
.ti -1c
.BI "void \fBcollapsed\fR ( QListViewItem * item )"
.br
.ti -1c
.BI "void \fBdropped\fR ( QDropEvent * e )"
.br
.ti -1c
.BI "void \fBitemRenamed\fR ( QListViewItem * item, int col, const QString & text )"
.br
.ti -1c
.BI "void \fBitemRenamed\fR ( QListViewItem * item, int col )"
.br
.in -1c
.SS "Properties"
.in +1c
.ti -1c
.BI "bool \fBallColumnsShowFocus\fR - whether items should show keyboard focus using all columns"
.br
.ti -1c
.BI "int \fBchildCount\fR - the number of parentless (top-level) QListViewItem objects in this QListView  \fI(read " "only" ")\fR"
.br
.ti -1c
.BI "int \fBcolumns\fR - the number of columns in this list view  \fI(read " "only" ")\fR"
.br
.ti -1c
.BI "RenameAction \fBdefaultRenameAction\fR - what action to perform when the editor loses focus during renaming"
.br
.ti -1c
.BI "int \fBitemMargin\fR - the advisory item margin that list items may use"
.br
.ti -1c
.BI "bool multiSelection - whether the list view is in multi-selection or extended-selection mode  \fI(obsolete)\fR"
.br
.ti -1c
.BI "ResizeMode \fBresizeMode\fR - whether " "all" ", none or the only the last column should be resized"
.br
.ti -1c
.BI "bool \fBrootIsDecorated\fR - whether the list view shows open/close signs on root items"
.br
.ti -1c
.BI "SelectionMode \fBselectionMode\fR - the list view's selection mode"
.br
.ti -1c
.BI "bool \fBshowSortIndicator\fR - whether the list view header should display a sort indicator"
.br
.ti -1c
.BI "bool \fBshowToolTips\fR - whether this list view should show tooltips for truncated column texts"
.br
.ti -1c
.BI "int \fBtreeStepSize\fR - the number of pixels a child is offset from its parent"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual void \fBcontentsMousePressEvent\fR ( QMouseEvent * e )"
.br
.ti -1c
.BI "virtual void \fBcontentsMouseReleaseEvent\fR ( QMouseEvent * e )"
.br
.ti -1c
.BI "virtual void \fBcontentsMouseMoveEvent\fR ( QMouseEvent * e )"
.br
.ti -1c
.BI "virtual void \fBcontentsMouseDoubleClickEvent\fR ( QMouseEvent * e )"
.br
.ti -1c
.BI "virtual QDragObject * \fBdragObject\fR ()"
.br
.ti -1c
.BI "virtual void \fBstartDrag\fR ()"
.br
.ti -1c
.BI "virtual void \fBresizeEvent\fR ( QResizeEvent * e )"
.br
.ti -1c
.BI "virtual void \fBdrawContentsOffset\fR ( QPainter * p, int ox, int oy, int cx, int cy, int cw, int ch )"
.br
.ti -1c
.BI "virtual void \fBpaintEmptyArea\fR ( QPainter * p, const QRect & rect )"
.br
.in -1c
.SS "Protected Slots"
.in +1c
.ti -1c
.BI "void \fBupdateContents\fR ()"
.br
.ti -1c
.BI "void \fBdoAutoScroll\fR ()"
.br
.in -1c
.SH DESCRIPTION
The QListView class implements a list/tree view.
.PP
It can display and control a hierarchy of multi-column items, and provides the ability to add new items at any time. The user may select one or many items (depending on the SelectionMode) and sort the list in increasing or decreasing order by any column.
.PP
The simplest pattern of use is to create a QListView, add some column headers using addColumn() and create one or more QListViewItem or QCheckListItem objects with the QListView as parent:
.PP
.nf
.br
        QListView * table;
.fi
.PP
.nf
.br
        table->addColumn( "Qualified name" );
.br
        table->addColumn( "Namespace" );
.fi
.PP
.nf
.br
            element = new QListViewItem( table, qName, namespaceURI );
.fi
.PP
Further nodes can be added to the list view object (the root of the tree) or as child nodes to QListViewItems:
.PP
.nf
.br
            for ( int i = 0 ; i < attributes.length(); i++ ) {
.br
                new QListViewItem( element, attributes.qName(i), attributes.uri(i) );
.br
            }
.fi
.PP
(From xml/tagreader-with-features/structureparser.cpp)
.PP
The main setup functions are: <center>.nf
.TS
l - l. Function Action addColumn() Adds a column with a text label and perhaps width. Columns are counted from the left starting with column 0. setColumnWidthMode() Sets the column to be resized automatically or not. setAllColumnsShowFocus() Sets whether items should show keyboard focus using all columns or just column 0. The default is to show focus just using column 0. setRootIsDecorated() Sets whether root items should show open/close decoration to their left. The default is FALSE. setTreeStepSize() Sets how many pixels an item's children are indented relative to their parent. The default is 20. This is mostly a matter of taste. setSorting()
.TE
.fi
</center>
.PP
To handle events such as mouse presses on the list view, derived classes can reimplement the QScrollView functions: contentsMousePressEvent, contentsMouseReleaseEvent, contentsMouseDoubleClickEvent, contentsMouseMoveEvent, contentsDragEnterEvent, contentsDragMoveEvent, contentsDragLeaveEvent, contentsDropEvent, and contentsWheelEvent.
.PP
There are also several functions for mapping between items and coordinates. itemAt() returns the item at a position on-screen, itemRect() returns the rectangle an item occupies on the screen, and itemPos() returns the position of any item (whether it is on-screen or not). firstChild() returns the list view's first item (not necessarily visible on-screen).
.PP
You can iterate over visible items using QListViewItem::itemBelow(); over a list view's top-level items using QListViewItem::firstChild() and QListViewItem::nextSibling(); or every item using a QListViewItemIterator. See the QListViewItem documentation for examples of traversal.
.PP
An item can be moved amongst its siblings using QListViewItem::moveItem(). To move an item in the hierarchy use takeItem() and insertItem(). Item's (and all their child items) are deleted with \fCdelete\fR; to delete all the list view's items use clear().
.PP
There are a variety of selection modes described in the QListView::SelectionMode documentation. The default is Single selection, which you can change using setSelectionMode().
.PP
Because QListView offers multiple selection it must display keyboard focus and selection state separately. Therefore there are functions both to set the selection state of an item (setSelected()) and to set which item displays keyboard focus (setCurrentItem()).
.PP
QListView emits two groups of signals; one group signals changes in selection/focus state and one indicates selection. The first group consists of selectionChanged() (applicable to all list views), selectionChanged(QListViewItem*) (applicable only to a Single selection list view), and currentChanged(QListViewItem*). The second group consists of doubleClicked(QListViewItem*), returnPressed(QListViewItem*), rightButtonClicked(QListViewItem*, const QPoint&, int), etc.
.PP
Note that changing the state of the list view in a slot connected to a list view signal may cause unexpected side effects. If you need to change the list view's state in response to a signal, use a single shot timer with a time out of 0, and connect this timer to a slot that modifies the list view's state.
.PP
In Motif style, QListView deviates fairly strongly from the look and feel of the Motif hierarchical tree view. This is done mostly to provide a usable keyboard interface and to make the list view look better with a white background.
.PP
If selectionMode() is Single (the default) the user can select one item at a time, e.g. by clicking an item with the mouse, see QListView::SelectionMode for details.
.PP
The list view can be navigated either using the mouse or the keyboard. Clicking a \fB-\fR icon closes an item (hides its children) and clicking a \fB+\fR icon opens an item (shows its children). The keyboard controls are these: <center>.nf
.TS
l - l. Keypress Action Home Make the first item current and visible. End Make the last item current and visible. Page Up Make the item above the top visible item current and visible. Page Down Make the item below the bottom visible item current and visible. Up Arrow Make the item above the current item current and visible. Down Arrow Make the item below the current item current and visible. Left Arrow If the current item is closed ( Right Arrow If the current item is closed (
.TE
.fi
</center>
.PP
If the user starts typing letters with the focus in the list view an incremental search will occur. For example if the user types 'd' the current item will change to the first item that begins with the letter 'd'; if they then type 'a', the current item will change to the first item that begins with 'da', and so on. If no item begins with the letters they type the current item doesn't change.
.PP
\fBWarning:\fR The list view assumes ownership of all list view items and will delete them when it does not need them any more.
.PP
.ce 1
.B "[Image Omitted]"
.PP

.ce 1
.B "[Image Omitted]"
.PP
See also QListViewItem, QCheckListItem, and Advanced Widgets.
.SS "Member Type Documentation"
.SH "QListView::RenameAction"
This enum describes whether a rename operation is accepted if the rename editor loses focus without the user pressing Enter.
.TP
\fCQListView::Accept\fR - Rename if Enter is pressed or focus is lost.
.TP
\fCQListView::Reject\fR - Discard the rename operation if focus is lost (and Enter has not been pressed).
.SH "QListView::ResizeMode"
This enum describes how the list view's header adjusts to resize events which affect the width of the list view.
.TP
\fCQListView::NoColumn\fR - The columns do not get resized in resize events.
.TP
\fCQListView::AllColumns\fR - All columns are resized equally to fit the width of the list view.
.TP
\fCQListView::LastColumn\fR - The last column is resized to fit the width of the list view.
.SH "QListView::SelectionMode"
This enumerated type is used by QListView to indicate how it reacts to selection by the user.
.TP
\fCQListView::Single\fR - When the user selects an item, any already-selected item becomes unselected. The user can unselect the selected item by clicking on some empty space within the view.
.TP
\fCQListView::Multi\fR - When the user selects an item in the usual way, the selection status of that item is toggled and the other items are left alone. Also, multiple items can be selected by dragging the mouse while the left mouse button stays pressed.
.TP
\fCQListView::Extended\fR - When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Ctrl key when clicking on an item, the clicked item gets toggled and all other items are left untouched. And if the user presses the Shift key while clicking on an item, all items between the current item and the clicked item get selected or unselected, depending on the state of the clicked item. Also, multiple items can be selected by dragging the mouse over them.
.TP
\fCQListView::NoSelection\fR - Items cannot be selected.
.PP
In other words, Single is a real single-selection list view, Multi a real multi-selection list view, Extended is a list view where users can select multiple items but usually want to select either just one or a range of contiguous items, and NoSelection is a list view where the user can look but not touch.
.SH "QListView::WidthMode"
This enum type describes how the width of a column in the view changes.
.TP
\fCQListView::Manual\fR - the column width does not change automatically.
.TP
\fCQListView::Maximum\fR - the column is automatically sized according to the widths of all items in the column. (Note: The column never shrinks in this case.) This means that the column is always resized to the width of the item with the largest width in the column.
.PP
See also setColumnWidth(), setColumnWidthMode(), and columnWidth().
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QListView::QListView ( QWidget * parent = 0, const char * name = 0, WFlags f = 0 )"
Constructs a new empty list view called \fIname\fR with parent \fIparent\fR.
.PP
Performance is boosted by modifying the widget flags \fIf\fR so that only part of the QListViewItem children is redrawn. This may be unsuitable for custom QListViewItem classes, in which case WStaticContents and WNoAutoErase should be cleared.
.PP
See also QWidget::clearWFlags() and Qt::WidgetFlags.
.SH "QListView::~QListView ()"
Destroys the list view, deleting all its items, and frees up all allocated resources.
.SH "int QListView::addColumn ( const QString & label, int width = -1 )\fC [virtual]\fR"
Adds a \fIwidth\fR pixels wide column with the column header \fIlabel\fR to the list view, and returns the index of the new column.
.PP
All columns apart from the first one are inserted to the right of the existing ones.
.PP
If \fIwidth\fR is negative, the new column's WidthMode is set to Maximum instead of Manual.
.PP
See also setColumnText(), setColumnWidth(), and setColumnWidthMode().
.PP
Examples:
.)l addressbook/centralwidget.cpp, checklists/checklists.cpp, dirview/main.cpp, fileiconview/mainwindow.cpp, listviews/listviews.cpp, and qdir/qdir.cpp.
.SH "int QListView::addColumn ( const QIconSet & iconset, const QString & label, int width = -1 )\fC [virtual]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Adds a \fIwidth\fR pixels wide new column with the header \fIlabel\fR and the \fIiconset\fR to the list view, and returns the index of the column.
.PP
If \fIwidth\fR is negative, the new column's WidthMode is set to Maximum, and to Manual otherwise.
.PP
See also setColumnText(), setColumnWidth(), and setColumnWidthMode().
.SH "void QListView::adjustColumn ( int col )\fC [slot]\fR"
Adjusts the column \fIcol\fR to its preferred width
.SH "bool QListView::allColumnsShowFocus () const"
Returns TRUE if items should show keyboard focus using all columns; otherwise returns FALSE. See the "allColumnsShowFocus" property for details.
.SH "int QListView::childCount () const"
Returns the number of parentless (top-level) QListViewItem objects in this QListView. See the "childCount" property for details.
.SH "void QListView::clear ()\fC [virtual slot]\fR"
Removes and deletes all the items in this list view and triggers an update.
.PP
Note that the currentChanged() signal is not emitted when this slot is invoked.
.PP
See also triggerUpdate().
.PP
Examples:
.)l addressbook/centralwidget.cpp, checklists/checklists.cpp, listviews/listviews.cpp, and qutlook/centralwidget.cpp.
.SH "void QListView::clearSelection ()\fC [virtual]\fR"
Sets all the items to be not selected, updates the list view as necessary, and emits the selectionChanged() signals. Note that for Multi selection list views this function needs to iterate over \fIall\fR items.
.PP
See also setSelected() and multiSelection.
.PP
Example: addressbook/centralwidget.cpp.
.SH "void QListView::clicked ( QListViewItem * item )\fC [signal]\fR"
This signal is emitted whenever the user clicks (mouse pressed \fIand\fR mouse released) in the list view. \fIitem\fR is the clicked list view item, or 0 if the user didn't click on an item.
.PP
\fBWarning:\fR Do not delete any QListViewItem objects in slots connected to this signal.
.PP
Example: addressbook/centralwidget.cpp.
.SH "void QListView::clicked ( QListViewItem * item, const QPoint & pnt, int c )\fC [signal]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
This signal is emitted whenever the user clicks (mouse pressed \fIand\fR mouse released) in the list view. \fIitem\fR is the clicked list view item, or 0 if the user didn't click on an item. \fIpnt\fR is the position where the user has clicked in global coordinates. If \fIitem\fR is not 0, \fIc\fR is the list view column into which the user pressed; if \fIitem\fR is 0 \fIc\fR's value is undefined.
.PP
\fBWarning:\fR Do not delete any QListViewItem objects in slots connected to this signal.
.SH "void QListView::collapsed ( QListViewItem * item )\fC [signal]\fR"
This signal is emitted when the \fIitem\fR has been collapsed, i.e. when the children of \fIitem\fR are hidden.
.PP
See also setOpen() and expanded().
.SH "int QListView::columnAlignment ( int column ) const"
Returns the alignment of column \fIcolumn\fR. The default is AlignAuto.
.PP
See also Qt::AlignmentFlags.
.SH "QString QListView::columnText ( int c ) const"
Returns the text of column \fIc\fR.
.PP
See also setColumnText().
.SH "int QListView::columnWidth ( int c ) const"
Returns the width of column \fIc\fR.
.PP
See also setColumnWidth().
.SH "WidthMode QListView::columnWidthMode ( int c ) const"
Returns the WidthMode for column \fIc\fR.
.PP
See also setColumnWidthMode().
.SH "int QListView::columns () const"
Returns the number of columns in this list view. See the "columns" property for details.
.SH "void QListView::contentsMouseDoubleClickEvent ( QMouseEvent * e )\fC [virtual protected]\fR"
Processes the mouse double-click event \fIe\fR on behalf of the viewed widget.
.PP
Reimplemented from QScrollView.
.SH "void QListView::contentsMouseMoveEvent ( QMouseEvent * e )\fC [virtual protected]\fR"
Processes the mouse move event \fIe\fR on behalf of the viewed widget.
.PP
Example: dirview/dirview.cpp.
.PP
Reimplemented from QScrollView.
.SH "void QListView::contentsMousePressEvent ( QMouseEvent * e )\fC [virtual protected]\fR"
Processes the mouse press event \fIe\fR on behalf of the viewed widget.
.PP
Example: dirview/dirview.cpp.
.PP
Reimplemented from QScrollView.
.SH "void QListView::contentsMouseReleaseEvent ( QMouseEvent * e )\fC [virtual protected]\fR"
Processes the mouse release event \fIe\fR on behalf of the viewed widget.
.PP
Example: dirview/dirview.cpp.
.PP
Reimplemented from QScrollView.
.SH "void QListView::contextMenuRequested ( QListViewItem * item, const QPoint & pos, int col )\fC [signal]\fR"
This signal is emitted when the user invokes a context menu with the right mouse button or with special system keys. If the keyboard was used \fIitem\fR is the current item; if the mouse was used, \fIitem\fR is the item under the mouse pointer or 0 if there is no item under the mouse pointer. If no item is clicked, the column index emitted is -1.
.PP
\fIpos\fR is the position for the context menu in the global coordinate system.
.PP
\fIcol\fR is the column on which the user pressed, or -1 if the signal was triggered by a key event.
.PP
Example: listviews/listviews.cpp.
.SH "void QListView::currentChanged ( QListViewItem * )\fC [signal]\fR"
This signal is emitted whenever the current item has changed (normally after the screen update). The current item is the item responsible for indicating keyboard focus.
.PP
The argument is the newly current item, or 0 if the change made no item current. This can happen, for example, if all items in the list view are deleted.
.PP
\fBWarning:\fR Do not delete any QListViewItem objects in slots connected to this signal.
.PP
See also setCurrentItem() and currentItem().
.PP
Example: listviews/listviews.cpp.
.SH "QListViewItem * QListView::currentItem () const"
Returns the current item, or 0 if there isn't one.
.PP
See also setCurrentItem().
.PP
Examples:
.)l addressbook/centralwidget.cpp, listviews/listviews.cpp, and qutlook/centralwidget.cpp.
.SH "RenameAction QListView::defaultRenameAction () const"
Returns what action to perform when the editor loses focus during renaming. See the "defaultRenameAction" property for details.
.SH "void QListView::doAutoScroll ()\fC [protected slot]\fR"
This slot handles auto-scrolling when the mouse button is pressed and the mouse is outside the widget.
.SH "void QListView::doubleClicked ( QListViewItem *, const QPoint &, int )\fC [signal]\fR"
This signal is emitted whenever an item is double-clicked. It's emitted on the second button press, not the second button release. The arguments are the relevant QListViewItem (may be 0), the point in global coordinates and the relevant column (or -1 if the click was outside the list).
.PP
\fBWarning:\fR Do not delete any QListViewItem objects in slots connected to this signal.
.SH "void QListView::doubleClicked ( QListViewItem * item )\fC [signal]\fR"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code. (use doubleClicked( QListViewItem *, const QPoint&, int ))
.PP
This signal is emitted whenever an item is double-clicked. It's emitted on the second button press, not the second button release. \fIitem\fR is the list view item on which the user did the double-click.
.SH "QDragObject * QListView::dragObject ()\fC [virtual protected]\fR"
If the user presses the mouse on an item and starts moving the mouse, and the item allow dragging (see QListViewItem::setDragEnabled()), this function is called to get a drag object and a drag is started unless dragObject() returns 0.
.PP
By default this function returns 0. You should reimplement it and create a QDragObject depending on the selected items.
.SH "void QListView::drawContentsOffset ( QPainter * p, int ox, int oy, int cx, int cy, int cw, int ch )\fC [virtual protected]\fR"
Calls QListViewItem::paintCell() and QListViewItem::paintBranches() as necessary for all list view items that require repainting in the \fIcw\fR pixels wide and \fIch\fR pixels high bounding rectangle starting at position \fIcx\fR, \fIcy\fR with offset \fIox\fR, \fIoy\fR. Uses the painter \fIp\fR.
.PP
Reimplemented from QScrollView.
.SH "void QListView::dropped ( QDropEvent * e )\fC [signal]\fR"
This signal is emitted, when a drop event occurred on the viewport (not onto an item).
.PP
\fIe\fR provides all the information about the drop.
.SH "void QListView::ensureItemVisible ( const QListViewItem * i )"
Ensures that item \fIi\fR is visible, scrolling the list view vertically if necessary and opening (expanding) any parent items if this is required to show the item.
.PP
See also itemRect() and QScrollView::ensureVisible().
.SH "bool QListView::eventFilter ( QObject * o, QEvent * e )\fC [virtual]\fR"
Redirects the event \fIe\fR relating to object \fIo\fR, for the viewport to mousePressEvent(), keyPressEvent() and friends.
.PP
Reimplemented from QScrollView.
.SH "void QListView::expanded ( QListViewItem * item )\fC [signal]\fR"
This signal is emitted when \fIitem\fR has been expanded, i.e. when the children of \fIitem\fR are shown.
.PP
See also setOpen() and collapsed().
.SH "QListViewItem * QListView::findItem ( const QString & text, int column, ComparisonFlags compare = ExactMatch | CaseSensitive ) const"
Finds the first list view item in column \fIcolumn\fR, that matches \fItext\fR and returns the item, or returns 0 of no such item could be found. The search starts from the current item if the current item exists, otherwise it starts from the first list view item. After reaching the last item the search continues from the first item. Pass OR-ed together Qt::StringComparisonMode values in the \fIcompare\fR flag, to control how the matching is performed. The default comparison mode is case-sensitive, exact match.
.SH "QListViewItem * QListView::firstChild () const"
Returns the first item in this QListView. Returns 0 if there is no first item.
.PP
A list view's items can be traversed using firstChild() and nextSibling() or using a QListViewItemIterator.
.PP
See also itemAt(), QListViewItem::itemBelow(), and QListViewItem::itemAbove().
.PP
Examples:
.)l addressbook/centralwidget.cpp and listviews/listviews.cpp.
.SH "QHeader * QListView::header () const"
Returns the QHeader object that manages this list view's columns. Please don't modify the header behind the list view's back.
.PP
You may safely call QHeader::setClickEnabled(), QHeader::setResizeEnabled(), QHeader::setMovingEnabled(), QHeader::hide() and all the const QHeader functions.
.PP
Examples:
.)l listviews/listviews.cpp and qdir/qdir.cpp.
.SH "void QListView::hideColumn ( int column )"
Hides the column specified at \fIcolumn\fR. This is a convenience function that calls setColumnWidth( \fIcolumn\fR, 0 ).
.PP
Note: The user may still be able to resize the hidden column using the header handles. To prevent this, call setResizeEnabled(FALSE, \fIcolumn\fR) on the list views header.
.PP
See also setColumnWidth().
.SH "void QListView::insertItem ( QListViewItem * i )\fC [virtual]\fR"
Inserts item \fIi\fR into the list view as a top-level item. You do not need to call this unless you've called takeItem(\fIi\fR) or QListViewItem::takeItem(\fIi\fR) and need to reinsert \fIi\fR elsewhere.
.PP
See also QListViewItem::takeItem() and takeItem().
.SH "void QListView::invertSelection ()\fC [virtual slot]\fR"
Inverts the selection. Only works in Multi and Extended selection modes.
.SH "bool QListView::isMultiSelection () const"
Returns TRUE if the list view is in multi-selection or extended-selection mode; otherwise returns FALSE. See the "multiSelection" property for details.
.SH "bool QListView::isOpen ( const QListViewItem * item ) const"
Identical to \fIitem\fR->isOpen(). Provided for completeness.
.PP
See also setOpen().
.SH "bool QListView::isRenaming () const"
Returns TRUE if an item is being renamed; otherwise returns FALSE.
.SH "bool QListView::isSelected ( const QListViewItem * i ) const"
Returns TRUE if the list view item \fIi\fR is selected; otherwise returns FALSE.
.PP
See also QListViewItem::isSelected().
.SH "QListViewItem * QListView::itemAt ( const QPoint & viewPos ) const"
Returns the list view item at \fIviewPos\fR. Note that \fIviewPos\fR is in the viewport()'s coordinate system, not in the list view's own, much larger, coordinate system.
.PP
itemAt() returns 0 if there is no such item.
.PP
Note that you also get the pointer to the item if \fIviewPos\fR points to the root decoration (see setRootIsDecorated()) of the item. To check whether or not \fIviewPos\fR is on the root decoration of the item, you can do something like this:
.PP
.nf
.br
    QListViewItem *i = itemAt( p );
.br
    if ( i ) {
.br
        if ( p.x() > header()->sectionPos( header()->mapToIndex( 0 ) ) +
.br
                treeStepSize() * ( i->depth() + ( rootIsDecorated() ? 1 : 0) ) + itemMargin() ||
.br
                p.x() < header()->sectionPos( header()->mapToIndex( 0 ) ) ) {
.br
            ; // p is not on root decoration
.br
        else
.br
            ; // p is on the root decoration
.br
    }
.br
.fi
.PP
This might be interesting if you use this function to find out where the user clicked and if you want to start a drag (which you do not want to do if the user clicked onto the root decoration of an item).
.PP
See also itemPos(), itemRect(), and viewportToContents().
.SH "int QListView::itemMargin () const"
Returns the advisory item margin that list items may use. See the "itemMargin" property for details.
.SH "int QListView::itemPos ( const QListViewItem * item )"
Returns the y-coordinate of \fIitem\fR in the list view's coordinate system. This function is normally much slower than itemAt() but it works for all items, whereas itemAt() normally works only for items on the screen.
.PP
This is a thin wrapper around QListViewItem::itemPos().
.PP
See also itemAt() and itemRect().
.SH "QRect QListView::itemRect ( const QListViewItem * i ) const"
Returns the rectangle on the screen that item \fIi\fR occupies in viewport()'s coordinates, or an invalid rectangle if \fIi\fR is 0 or is not currently visible.
.PP
The rectangle returned does not include any children of the rectangle (i.e. it uses QListViewItem::height(), rather than QListViewItem::totalHeight()). If you want the rectangle to include children you can use something like this:
.PP
.nf
.br
    QRect r( listView->itemRect( item ) );
.br
    r.setHeight( (QCOORD)(QMIN( item->totalHeight(),
.br
                                listView->viewport->height() - r.y() ) ) )
.br
.fi
.PP
Note the way it avoids too-high rectangles. totalHeight() can be much larger than the window system's coordinate system allows.
.PP
itemRect() is comparatively slow. It's best to call it only for items that are probably on-screen.
.SH "void QListView::itemRenamed ( QListViewItem * item, int col, const QString & text )\fC [signal]\fR"
This signal is emitted when \fIitem\fR has been renamed to \fItext\fR, e.g. by in in-place renaming, in column \fIcol\fR.
.PP
See also QListViewItem::setRenameEnabled().
.SH "void QListView::itemRenamed ( QListViewItem * item, int col )\fC [signal]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
This signal is emitted when \fIitem\fR has been renamed, e.g. by in-place renaming, in column \fIcol\fR.
.PP
See also QListViewItem::setRenameEnabled().
.SH "QListViewItem * QListView::lastItem () const"
Returns the last item in the list view tree. Returns 0 if there are no items in the QListView.
.PP
This function is slow because it traverses the entire tree to find the last item.
.SH "void QListView::mouseButtonClicked ( int button, QListViewItem * item, const QPoint & pos, int c )\fC [signal]\fR"
This signal is emitted whenever the user clicks (mouse pressed \fIand\fR mouse released) in the list view at position \fIpos\fR. \fIbutton\fR is the mouse button that the user pressed, \fIitem\fR is the clicked list view item or 0 if the user didn't click on an item. If \fIitem\fR is not 0, \fIc\fR is the list view column into which the user pressed; if \fIitem\fR is 0 \fIc\fR's value is undefined.
.PP
\fBWarning:\fR Do not delete any QListViewItem objects in slots connected to this signal.
.SH "void QListView::mouseButtonPressed ( int button, QListViewItem * item, const QPoint & pos, int c )\fC [signal]\fR"
This signal is emitted whenever the user pressed the mouse button in the list view at position \fIpos\fR. \fIbutton\fR is the mouse button which the user pressed, \fIitem\fR is the pressed list view item or 0 if the user didn't press on an item. If \fIitem\fR is not 0, \fIc\fR is the list view column into which the user pressed; if \fIitem\fR is 0 \fIc\fR's value is undefined.
.PP
\fBWarning:\fR Do not delete any QListViewItem objects in slots connected to this signal.
.SH "void QListView::onItem ( QListViewItem * i )\fC [signal]\fR"
This signal is emitted when the user moves the mouse cursor onto item \fIi\fR, similar to the QWidget::enterEvent() function.
.SH "void QListView::onViewport ()\fC [signal]\fR"
This signal is emitted when the user moves the mouse cursor from an item to an empty part of the list view.
.SH "void QListView::paintEmptyArea ( QPainter * p, const QRect & rect )\fC [virtual protected]\fR"
Paints \fIrect\fR so that it looks like empty background using painter \fIp\fR. \fIrect\fR is in widget coordinates, ready to be fed to \fIp\fR.
.PP
The default function fills \fIrect\fR with the viewport()->backgroundBrush().
.SH "void QListView::pressed ( QListViewItem * item )\fC [signal]\fR"
This signal is emitted whenever the user presses the mouse button in a list view. \fIitem\fR is the list view item on which the user pressed the mouse button, or 0 if the user didn't press the mouse on an item.
.PP
\fBWarning:\fR Do not delete any QListViewItem objects in slots connected to this signal.
.SH "void QListView::pressed ( QListViewItem * item, const QPoint & pnt, int c )\fC [signal]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
This signal is emitted whenever the user presses the mouse button in a list view. \fIitem\fR is the list view item on which the user pressed the mouse button, or 0 if the user didn't press the mouse on an item. \fIpnt\fR is the position of the mouse cursor in global coordinates, and \fIc\fR is the column where the mouse cursor was when the user pressed the mouse button.
.PP
\fBWarning:\fR Do not delete any QListViewItem objects in slots connected to this signal.
.SH "void QListView::removeColumn ( int index )\fC [virtual]\fR"
Removes the column at position \fIindex\fR.
.PP
If no columns remain after the column is removed, the list view will be cleared.
.PP
See also clear().
.SH "void QListView::removeItem ( QListViewItem * item )\fC [virtual]\fR"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
This function has been renamed takeItem().
.SH "void QListView::repaintItem ( const QListViewItem * item ) const"
Repaints \fIitem\fR on the screen if \fIitem\fR is currently visible. Takes care to avoid multiple repaints.
.SH "void QListView::resizeEvent ( QResizeEvent * e )\fC [virtual protected]\fR"
Ensures that the header is correctly sized and positioned when the resize event \fIe\fR occurs.
.SH "ResizeMode QListView::resizeMode () const"
Returns TRUE if all, none or the only the last column should be resized; otherwise returns FALSE. See the "resizeMode" property for details.
.SH "void QListView::returnPressed ( QListViewItem * )\fC [signal]\fR"
This signal is emitted when Enter or Return is pressed. The argument is the currentItem().
.SH "void QListView::rightButtonClicked ( QListViewItem *, const QPoint &, int )\fC [signal]\fR"
This signal is emitted when the right button is clicked (i.e. when it's released). The arguments are the relevant QListViewItem (may be 0), the point in global coordinates and the relevant column (or -1 if the click was outside the list).
.SH "void QListView::rightButtonPressed ( QListViewItem *, const QPoint &, int )\fC [signal]\fR"
This signal is emitted when the right button is pressed. The arguments are the relevant QListViewItem (may be 0), the point in global coordinates and the relevant column (or -1 if the click was outside the list).
.SH "bool QListView::rootIsDecorated () const"
Returns TRUE if the list view shows open/close signs on root items; otherwise returns FALSE. See the "rootIsDecorated" property for details.
.SH "void QListView::selectAll ( bool select )\fC [virtual slot]\fR"
If \fIselect\fR is TRUE, all the items get selected; otherwise all the items get unselected. This only works in the selection modes Multi and Extended. In Single and NoSelection mode the selection of the current item is just set to \fIselect\fR.
.SH "QListViewItem * QListView::selectedItem () const"
Returns the selected item if the list view is in Single selection mode and an item is selected.
.PP
If no items are selected or the list view is not in Single selection mode this function returns 0.
.PP
See also setSelected() and multiSelection.
.SH "void QListView::selectionChanged ()\fC [signal]\fR"
This signal is emitted whenever the set of selected items has changed (normally before the screen update). It is available in Single, Multi, and Extended selection modes, but is most useful in Multi selection mode.
.PP
\fBWarning:\fR Do not delete any QListViewItem objects in slots connected to this signal.
.PP
See also setSelected() and QListViewItem::setSelected().
.PP
Example: listviews/listviews.cpp.
.SH "void QListView::selectionChanged ( QListViewItem * )\fC [signal]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
This signal is emitted whenever the selected item has changed in Single selection mode (normally after the screen update). The argument is the newly selected item. If the selection is cleared (when, for example, the user clicks in the unused area of the list view) then this signal will not be emitted.
.PP
In Multi selection mode, use the no argument overload of this signal.
.PP
\fBWarning:\fR Do not delete any QListViewItem objects in slots connected to this signal.
.PP
See also setSelected(), QListViewItem::setSelected(), and currentChanged().
.SH "SelectionMode QListView::selectionMode () const"
Returns the list view's selection mode. See the "selectionMode" property for details.
.SH "void QListView::setAllColumnsShowFocus ( bool )\fC [virtual]\fR"
Sets whether items should show keyboard focus using all columns. See the "allColumnsShowFocus" property for details.
.SH "void QListView::setColumnAlignment ( int column, int align )\fC [virtual]\fR"
Sets column \fIcolumn\fR's alignment to \fIalign\fR. The alignment is ultimately passed to QListViewItem::paintCell() for each item in the list view. For horizontally aligned text with Qt::AlignLeft or Qt::AlignHCenter the ellipsis (...) will be to the right, for Qt::AlignRight the ellipsis will be to the left.
.PP
See also Qt::AlignmentFlags.
.PP
Example: listviews/listviews.cpp.
.SH "void QListView::setColumnText ( int column, const QString & label )\fC [virtual]\fR"
Sets the heading of column \fIcolumn\fR to \fIlabel\fR.
.PP
See also columnText().
.SH "void QListView::setColumnText ( int column, const QIconSet & iconset, const QString & label )\fC [virtual]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Sets the heading of column \fIcolumn\fR to \fIiconset\fR and \fIlabel\fR.
.PP
See also columnText().
.SH "void QListView::setColumnWidth ( int column, int w )\fC [virtual]\fR"
Sets the width of column \fIcolumn\fR to \fIw\fR pixels. Note that if the column has a WidthMode other than Manual, this width setting may be subsequently overridden.
.PP
See also columnWidth().
.SH "void QListView::setColumnWidthMode ( int c, WidthMode mode )\fC [virtual]\fR"
Sets column \fIc\fR's width mode to \fImode\fR. The default depends on the original width argument to addColumn().
.PP
See also QListViewItem::width().
.SH "void QListView::setCurrentItem ( QListViewItem * i )\fC [virtual]\fR"
Sets item \fIi\fR to be the current item and repaints appropriately (i.e. highlights the item). The current item is used for keyboard navigation and focus indication; it is independent of any selected items, although a selected item can also be the current item.
.PP
This function does not set the selection anchor. Use setSelectionAnchor() instead.
.PP
See also currentItem() and setSelected().
.PP
Example: listviews/listviews.cpp.
.SH "void QListView::setDefaultRenameAction ( RenameAction a )\fC [virtual]\fR"
Sets what action to perform when the editor loses focus during renaming to \fIa\fR. See the "defaultRenameAction" property for details.
.SH "void QListView::setItemMargin ( int )\fC [virtual]\fR"
Sets the advisory item margin that list items may use. See the "itemMargin" property for details.
.SH "void QListView::setMultiSelection ( bool enable )\fC [virtual]\fR"
Sets whether the list view is in multi-selection or extended-selection mode to \fIenable\fR. See the "multiSelection" property for details.
.SH "void QListView::setOpen ( QListViewItem * item, bool open )\fC [virtual]\fR"
Sets \fIitem\fR to be open if \fIopen\fR is TRUE and \fIitem\fR is expandable, and to be closed if \fIopen\fR is FALSE. Repaints accordingly.
.PP
See also QListViewItem::setOpen() and QListViewItem::setExpandable().
.SH "void QListView::setResizeMode ( ResizeMode m )\fC [virtual]\fR"
Sets whether all, none or the only the last column should be resized to \fIm\fR. See the "resizeMode" property for details.
.SH "void QListView::setRootIsDecorated ( bool )\fC [virtual]\fR"
Sets whether the list view shows open/close signs on root items. See the "rootIsDecorated" property for details.
.SH "void QListView::setSelected ( QListViewItem * item, bool selected )\fC [virtual]\fR"
If \fIselected\fR is TRUE the \fIitem\fR is selected; otherwise it is unselected.
.PP
If the list view is in Single selection mode and \fIselected\fR is TRUE, the currently selected item is unselected and \fIitem\fR is made current. Unlike QListViewItem::setSelected(), this function updates the list view as necessary and emits the selectionChanged() signals.
.PP
See also isSelected(), multiSelection, multiSelection, setCurrentItem(), and setSelectionAnchor().
.PP
Example: listviews/listviews.cpp.
.SH "void QListView::setSelectionAnchor ( QListViewItem * item )"
Sets the selection anchor to \fIitem\fR, if \fIitem\fR is selectable.
.PP
The selection anchor is the item that remains selected when Shift-selecting with either mouse or keyboard in Extended selection mode.
.PP
See also setSelected().
.SH "void QListView::setSelectionMode ( SelectionMode mode )"
Sets the list view's selection mode to \fImode\fR. See the "selectionMode" property for details.
.SH "void QListView::setShowSortIndicator ( bool show )\fC [virtual]\fR"
Sets whether the list view header should display a sort indicator to \fIshow\fR. See the "showSortIndicator" property for details.
.SH "void QListView::setShowToolTips ( bool b )\fC [virtual]\fR"
Sets whether this list view should show tooltips for truncated column texts to \fIb\fR. See the "showToolTips" property for details.
.SH "void QListView::setSortColumn ( int column )"
Sets the sorting column for the list view.
.PP
If \fIcolumn\fR is -1, sorting is disabled and the user cannot sort columns by clicking on the column headers. If \fIcolumn\fR is larger than the number of columns the user must click on a column header to sort the list view.
.PP
See also setSorting().
.SH "void QListView::setSortOrder ( SortOrder order )"
Sets the sort order for the items in the list view to \fIorder\fR.
.PP
See also setSorting().
.SH "void QListView::setSorting ( int column, bool ascending = TRUE )\fC [virtual]\fR"
Sets the list view to be sorted by column \fIcolumn\fR in ascending order if \fIascending\fR is TRUE or descending order if it is FALSE.
.PP
If \fIcolumn\fR is -1, sorting is disabled and the user cannot sort columns by clicking on the column headers. If \fIcolumn\fR is larger than the number of columns the user must click on a column header to sort the list view.
.SH "void QListView::setTreeStepSize ( int )\fC [virtual]\fR"
Sets the number of pixels a child is offset from its parent. See the "treeStepSize" property for details.
.SH "bool QListView::showSortIndicator () const"
Returns TRUE if the list view header should display a sort indicator; otherwise returns FALSE. See the "showSortIndicator" property for details.
.SH "bool QListView::showToolTips () const"
Returns TRUE if this list view should show tooltips for truncated column texts; otherwise returns FALSE. See the "showToolTips" property for details.
.SH "void QListView::sort ()\fC [virtual]\fR"
Sorts the list view using the last sorting configuration (sort column and ascending/descending).
.SH "int QListView::sortColumn () const"
Returns the column by which the list view is sorted, or -1 if sorting is disabled.
.PP
See also sortOrder().
.SH "SortOrder QListView::sortOrder () const"
Returns the sorting order of the list view items.
.PP
See also sortColumn().
.SH "void QListView::spacePressed ( QListViewItem * )\fC [signal]\fR"
This signal is emitted when Space is pressed. The argument is the currentItem().
.SH "void QListView::startDrag ()\fC [virtual protected]\fR"
Starts a drag.
.SH "void QListView::takeItem ( QListViewItem * i )\fC [virtual]\fR"
Removes item \fIi\fR from the list view; \fIi\fR must be a top-level item. The warnings regarding QListViewItem::takeItem() apply to this function, too.
.PP
See also insertItem().
.SH "int QListView::treeStepSize () const"
Returns the number of pixels a child is offset from its parent. See the "treeStepSize" property for details.
.SH "void QListView::triggerUpdate ()\fC [slot]\fR"
Triggers a size, geometry and content update during the next iteration of the event loop. Ensures that there'll be just one update to avoid flicker.
.SH "void QListView::updateContents ()\fC [protected slot]\fR"
Updates the sizes of the viewport, header, scroll bars and so on.
.PP
\fBWarning:\fR Don't call this directly; call triggerUpdate() instead.
.SS "Property Documentation"
.SH "bool allColumnsShowFocus"
This property holds whether items should show keyboard focus using all columns.
.PP
If this property is TRUE all columns will show focus and selection states, otherwise only column 0 will show focus.
.PP
The default is FALSE.
.PP
Setting this to TRUE if it's not necessary may cause noticeable flicker.
.PP
Set this property's value with setAllColumnsShowFocus() and get this property's value with allColumnsShowFocus().
.SH "int childCount"
This property holds the number of parentless (top-level) QListViewItem objects in this QListView.
.PP
Holds the current number of parentless (top-level) QListViewItem objects in this QListView.
.PP
See also QListViewItem::childCount().
.PP
Get this property's value with childCount().
.SH "int columns"
This property holds the number of columns in this list view.
.PP
Get this property's value with columns().
.PP
See also addColumn() and removeColumn().
.SH "RenameAction defaultRenameAction"
This property holds what action to perform when the editor loses focus during renaming.
.PP
If this property is Accept, and the user renames an item and the editor loses focus (without the user pressing Enter), the item will still be renamed. If the property's value is Reject, the item will not be renamed unless the user presses Enter. The default is Reject.
.PP
Set this property's value with setDefaultRenameAction() and get this property's value with defaultRenameAction().
.SH "int itemMargin"
This property holds the advisory item margin that list items may use.
.PP
The item margin defaults to one pixel and is the margin between the item's edges and the area where it draws its contents. QListViewItem::paintFocus() draws in the margin.
.PP
See also QListViewItem::paintCell().
.PP
Set this property's value with setItemMargin() and get this property's value with itemMargin().
.SH "bool multiSelection"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
This property holds whether the list view is in multi-selection or extended-selection mode.
.PP
If you enable multi-selection, Multi, mode, it is possible to specify whether or not this mode should be extended. Extended means that the user can select multiple items only when pressing the Shift or Ctrl key at the same time.
.PP
The default selection mode is Single.
.PP
See also selectionMode.
.PP
Set this property's value with setMultiSelection() and get this property's value with isMultiSelection().
.SH "ResizeMode resizeMode"
This property holds whether all, none or the only the last column should be resized.
.PP
Specifies whether all, none or only the last column should be resized to fit the full width of the list view. The values for this property can be one of: NoColumn (the default), AllColumns or LastColumn.
.PP
\fBWarning:\fR Setting the resize mode should be done after all necessary columns have been added to the list view, otherwise the behavior is undefined.
.PP
See also QHeader and header().
.PP
Set this property's value with setResizeMode() and get this property's value with resizeMode().
.SH "bool rootIsDecorated"
This property holds whether the list view shows open/close signs on root items.
.PP
Open/close signs are small \fB+\fR or \fB-\fR symbols in windows style, or arrows in Motif style. The default is FALSE.
.PP
Set this property's value with setRootIsDecorated() and get this property's value with rootIsDecorated().
.SH "SelectionMode selectionMode"
This property holds the list view's selection mode.
.PP
The mode can be Single (the default), Extended, Multi or NoSelection.
.PP
See also multiSelection.
.PP
Set this property's value with setSelectionMode() and get this property's value with selectionMode().
.SH "bool showSortIndicator"
This property holds whether the list view header should display a sort indicator.
.PP
If this property is TRUE, an arrow is drawn in the header of the list view to indicate the sort order of the list view contents. The arrow will be drawn in the correct column and will point up or down, depending on the current sort direction. The default is FALSE (don't show an indicator).
.PP
See also QHeader::setSortIndicator().
.PP
Set this property's value with setShowSortIndicator() and get this property's value with showSortIndicator().
.SH "bool showToolTips"
This property holds whether this list view should show tooltips for truncated column texts.
.PP
The default is TRUE.
.PP
Set this property's value with setShowToolTips() and get this property's value with showToolTips().
.SH "int treeStepSize"
This property holds the number of pixels a child is offset from its parent.
.PP
The default is 20 pixels.
.PP
Of course, this property is only meaningful for hierarchical list views.
.PP
Set this property's value with setTreeStepSize() and get this property's value with treeStepSize().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qlistview.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qlistview.3qt) and the Qt
version (3.3.8).
