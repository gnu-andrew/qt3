'\" t
.TH QSimpleRichText 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QSimpleRichText \- Small displayable piece of rich text
.SH SYNOPSIS
\fC#include <qsimplerichtext.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQSimpleRichText\fR ( const QString & text, const QFont & fnt, const QString & context = QString::null, const QStyleSheet * sheet = 0 )"
.br
.ti -1c
.BI "\fBQSimpleRichText\fR ( const QString & text, const QFont & fnt, const QString & context, const QStyleSheet * sheet, const QMimeSourceFactory * factory, int pageBreak = -1, const QColor & linkColor = Qt::blue, bool linkUnderline = TRUE )"
.br
.ti -1c
.BI "\fB~QSimpleRichText\fR ()"
.br
.ti -1c
.BI "void \fBsetWidth\fR ( int w )"
.br
.ti -1c
.BI "void \fBsetWidth\fR ( QPainter * p, int w )"
.br
.ti -1c
.BI "void \fBsetDefaultFont\fR ( const QFont & f )"
.br
.ti -1c
.BI "int \fBwidth\fR () const"
.br
.ti -1c
.BI "int \fBwidthUsed\fR () const"
.br
.ti -1c
.BI "int \fBheight\fR () const"
.br
.ti -1c
.BI "void \fBadjustSize\fR ()"
.br
.ti -1c
.BI "void \fBdraw\fR ( QPainter * p, int x, int y, const QRect & clipRect, const QColorGroup & cg, const QBrush * paper = 0 ) const"
.br
.ti -1c
.BI "void draw ( QPainter * p, int x, int y, const QRegion & clipRegion, const QColorGroup & cg, const QBrush * paper = 0 ) const  \fI(obsolete)\fR"
.br
.ti -1c
.BI "QString \fBcontext\fR () const"
.br
.ti -1c
.BI "QString \fBanchorAt\fR ( const QPoint & pos ) const"
.br
.ti -1c
.BI "bool \fBinText\fR ( const QPoint & pos ) const"
.br
.in -1c
.SH DESCRIPTION
The QSimpleRichText class provides a small displayable piece of rich text.
.PP
This class encapsulates simple rich text usage in which a string is interpreted as rich text and can be drawn. This is particularly useful if you want to display some rich text in a custom widget. A QStyleSheet is needed to interpret the tags and format the rich text. Qt provides a default HTML-like style sheet, but you may define custom style sheets.
.PP
Once created, the rich text object can be queried for its width(), height(), and the actual width used (see widthUsed()). Most importantly, it can be drawn on any given QPainter with draw(). QSimpleRichText can also be used to implement hypertext or active text facilities by using anchorAt(). A hit test through inText() makes it possible to use simple rich text for text objects in editable drawing canvases.
.PP
Once constructed from a string the contents cannot be changed, only resized. If the contents change, just throw the rich text object away and make a new one with the new contents.
.PP
For large documents use QTextEdit or QTextBrowser. For very small items of rich text you can use a QLabel.
.PP
If you are using QSimpleRichText to print in high resolution you should call setWidth(QPainter, int) so that the content will be laid out properly on the page.
.PP
See also Text Related Classes.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QSimpleRichText::QSimpleRichText ( const QString & text, const QFont & fnt, const QString & context = QString::null, const QStyleSheet * sheet = 0 )"
Constructs a QSimpleRichText from the rich text string \fItext\fR and the font \fIfnt\fR.
.PP
The font is used as a basis for the text rendering. When using rich text rendering on a widget \fIw\fR, you would normally specify the widget's font, for example:
.PP
.nf
.br
    QSimpleRichText myrichtext( contents, mywidget->font() );
.br
.fi
.PP
\fIcontext\fR is the optional context of the rich text object. This becomes important if \fItext\fR contains relative references, for example within image tags. QSimpleRichText always uses the default mime source factory (see QMimeSourceFactory::defaultFactory()) to resolve those references. The context will then be used to calculate the absolute path. See QMimeSourceFactory::makeAbsolute() for details.
.PP
The \fIsheet\fR is an optional style sheet. If it is 0, the default style sheet will be used (see QStyleSheet::defaultSheet()).
.SH "QSimpleRichText::QSimpleRichText ( const QString & text, const QFont & fnt, const QString & context, const QStyleSheet * sheet, const QMimeSourceFactory * factory, int pageBreak = -1, const QColor & linkColor = Qt::blue, bool linkUnderline = TRUE )"
Constructs a QSimpleRichText from the rich text string \fItext\fR and the font \fIfnt\fR.
.PP
This is a slightly more complex constructor for QSimpleRichText that takes an additional mime source factory \fIfactory\fR, a page break parameter \fIpageBreak\fR and a bool \fIlinkUnderline\fR. \fIlinkColor\fR is only provided for compatibility, but has no effect, as QColorGroup's QColorGroup::link() color is used now.
.PP
\fIcontext\fR is the optional context of the rich text object. This becomes important if \fItext\fR contains relative references, for example within image tags. QSimpleRichText always uses the default mime source factory (see QMimeSourceFactory::defaultFactory()) to resolve those references. The context will then be used to calculate the absolute path. See QMimeSourceFactory::makeAbsolute() for details.
.PP
The \fIsheet\fR is an optional style sheet. If it is 0, the default style sheet will be used (see QStyleSheet::defaultSheet()).
.PP
This constructor is useful for creating a QSimpleRichText object suitable for printing. Set \fIpageBreak\fR to be the height of the contents area of the pages.
.SH "QSimpleRichText::~QSimpleRichText ()"
Destroys the rich text object, freeing memory.
.SH "void QSimpleRichText::adjustSize ()"
Adjusts the richt text object to a reasonable size.
.PP
See also setWidth().
.SH "QString QSimpleRichText::anchorAt ( const QPoint & pos ) const"
Returns the anchor at the requested position, \fIpos\fR. An empty string is returned if no anchor is specified for this position.
.SH "QString QSimpleRichText::context () const"
Returns the context of the rich text object. If no context has been specified in the constructor, a null string is returned. The context is the path to use to look up relative links, such as image tags and anchor references.
.SH "void QSimpleRichText::draw ( QPainter * p, int x, int y, const QRect & clipRect, const QColorGroup & cg, const QBrush * paper = 0 ) const"
Draws the formatted text with painter \fIp\fR, at position (\fIx\fR, \fIy\fR), clipped to \fIclipRect\fR. The clipping rectangle is given in the rich text object's coordinates translated by (\fIx\fR, \fIy\fR). Passing an null rectangle results in no clipping. Colors from the color group \fIcg\fR are used as needed, and if not 0, \fI*paper\fR is used as the background brush.
.PP
Note that the display code is highly optimized to reduce flicker, so passing a brush for \fIpaper\fR is preferable to simply clearing the area to be painted and then calling this without a brush.
.PP
Examples:
.)l action/application.cpp, application/application.cpp, helpviewer/helpwindow.cpp, and mdi/application.cpp.
.SH "void QSimpleRichText::draw ( QPainter * p, int x, int y, const QRegion & clipRegion, const QColorGroup & cg, const QBrush * paper = 0 ) const"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
Use the version with clipRect instead. The region version has problems with larger documents on some platforms (on X11 regions internally are represented with 16bit coordinates).
.SH "int QSimpleRichText::height () const"
Returns the height of the rich text object in pixels.
.PP
See also setWidth().
.PP
Examples:
.)l action/application.cpp, application/application.cpp, helpviewer/helpwindow.cpp, and mdi/application.cpp.
.SH "bool QSimpleRichText::inText ( const QPoint & pos ) const"
Returns TRUE if \fIpos\fR is within a text line of the rich text object; otherwise returns FALSE.
.SH "void QSimpleRichText::setDefaultFont ( const QFont & f )"
Sets the default font for the rich text object to \fIf\fR
.SH "void QSimpleRichText::setWidth ( QPainter * p, int w )"
Sets the width of the rich text object to \fIw\fR pixels, recalculating the layout as if it were to be drawn with painter \fIp\fR.
.PP
Passing a painter is useful when you intend drawing on devices other than the screen, for example a QPrinter.
.PP
See also height() and adjustSize().
.PP
Examples:
.)l action/application.cpp, application/application.cpp, helpviewer/helpwindow.cpp, and mdi/application.cpp.
.SH "void QSimpleRichText::setWidth ( int w )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Sets the width of the rich text object to \fIw\fR pixels.
.PP
See also height() and adjustSize().
.SH "int QSimpleRichText::width () const"
Returns the set width of the rich text object in pixels.
.PP
See also widthUsed().
.SH "int QSimpleRichText::widthUsed () const"
Returns the width in pixels that is actually used by the rich text object. This can be smaller or wider than the set width.
.PP
It may be wider, for example, if the text contains images or non-breakable words that are already wider than the available space. It's smaller when the object only consists of lines that do not fill the width completely.
.PP
See also width().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qsimplerichtext.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qsimplerichtext.3qt) and the Qt
version (3.3.8).
