'\" t
.TH QSqlQuery 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QSqlQuery \- Means of executing and manipulating SQL statements
.SH SYNOPSIS
\fC#include <qsqlquery.h>\fR
.PP
Inherited by QSqlCursor.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQSqlQuery\fR ( QSqlResult * r )"
.br
.ti -1c
.BI "\fBQSqlQuery\fR ( const QString & query = QString::null, QSqlDatabase * db = 0 )"
.br
.ti -1c
.BI "explicit \fBQSqlQuery\fR ( QSqlDatabase * db )"
.br
.ti -1c
.BI "\fBQSqlQuery\fR ( const QSqlQuery & other )"
.br
.ti -1c
.BI "QSqlQuery & \fBoperator=\fR ( const QSqlQuery & other )"
.br
.ti -1c
.BI "virtual \fB~QSqlQuery\fR ()"
.br
.ti -1c
.BI "bool \fBisValid\fR () const"
.br
.ti -1c
.BI "bool \fBisActive\fR () const"
.br
.ti -1c
.BI "bool \fBisNull\fR ( int field ) const"
.br
.ti -1c
.BI "int \fBat\fR () const"
.br
.ti -1c
.BI "QString \fBlastQuery\fR () const"
.br
.ti -1c
.BI "int \fBnumRowsAffected\fR () const"
.br
.ti -1c
.BI "QSqlError \fBlastError\fR () const"
.br
.ti -1c
.BI "bool \fBisSelect\fR () const"
.br
.ti -1c
.BI "int \fBsize\fR () const"
.br
.ti -1c
.BI "const QSqlDriver * \fBdriver\fR () const"
.br
.ti -1c
.BI "const QSqlResult * \fBresult\fR () const"
.br
.ti -1c
.BI "bool \fBisForwardOnly\fR () const"
.br
.ti -1c
.BI "void \fBsetForwardOnly\fR ( bool forward )"
.br
.ti -1c
.BI "virtual bool \fBexec\fR ( const QString & query )"
.br
.ti -1c
.BI "virtual QVariant \fBvalue\fR ( int i ) const"
.br
.ti -1c
.BI "virtual bool \fBseek\fR ( int i, bool relative = FALSE )"
.br
.ti -1c
.BI "virtual bool \fBnext\fR ()"
.br
.ti -1c
.BI "virtual bool \fBprev\fR ()"
.br
.ti -1c
.BI "virtual bool \fBfirst\fR ()"
.br
.ti -1c
.BI "virtual bool \fBlast\fR ()"
.br
.ti -1c
.BI "bool \fBexec\fR ()"
.br
.ti -1c
.BI "bool \fBprepare\fR ( const QString & query )"
.br
.ti -1c
.BI "void \fBbindValue\fR ( const QString & placeholder, const QVariant & val )"
.br
.ti -1c
.BI "void \fBbindValue\fR ( int pos, const QVariant & val )"
.br
.ti -1c
.BI "void \fBaddBindValue\fR ( const QVariant & val )"
.br
.ti -1c
.BI "void \fBbindValue\fR ( const QString & placeholder, const QVariant & val, QSql::ParameterType type )"
.br
.ti -1c
.BI "void \fBbindValue\fR ( int pos, const QVariant & val, QSql::ParameterType type )"
.br
.ti -1c
.BI "void \fBaddBindValue\fR ( const QVariant & val, QSql::ParameterType type )"
.br
.ti -1c
.BI "QVariant \fBboundValue\fR ( const QString & placeholder ) const"
.br
.ti -1c
.BI "QVariant \fBboundValue\fR ( int pos ) const"
.br
.ti -1c
.BI "QMap<QString, QVariant> \fBboundValues\fR () const"
.br
.ti -1c
.BI "QString \fBexecutedQuery\fR () const"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual void \fBbeforeSeek\fR ()"
.br
.ti -1c
.BI "virtual void \fBafterSeek\fR ()"
.br
.in -1c
.SH DESCRIPTION
The QSqlQuery class provides a means of executing and manipulating SQL statements.
.PP
QSqlQuery encapsulates the functionality involved in creating, navigating and retrieving data from SQL queries which are executed on a QSqlDatabase. It can be used to execute DML (data manipulation language) statements, e.g. \fCSELECT\fR, \fCINSERT\fR, \fCUPDATE\fR and \fCDELETE\fR, and also DDL (data definition language) statements, e.g. \fCCREATE TABLE\fR. It can also be used to execute database-specific commands which are not standard SQL (e.g. \fCSET DATESTYLE=ISO\fR for PostgreSQL).
.PP
Successfully executed SQL statements set the query's state to active (isActive() returns TRUE); otherwise the query's state is set to inactive. In either case, when executing a new SQL statement, the query is positioned on an invalid record; an active query must be navigated to a valid record (so that isValid() returns TRUE) before values can be retrieved.
.PP
Navigating records is performed with the following functions:
.TP
next()
.TP
prev()
.TP
first()
.TP
last()
.TP
\fC\fRseek(int)
.PP
These functions allow the programmer to move forward, backward or arbitrarily through the records returned by the query. If you only need to move forward through the results, e.g. using next() or using seek() with a positive offset, you can use setForwardOnly() and save a significant amount of memory overhead. Once an active query is positioned on a valid record, data can be retrieved using value(). All data is transferred from the SQL backend using QVariants.
.PP
For example:
.PP
.nf
.br
    QSqlQuery query( "SELECT name FROM customer" );
.br
    while ( query.next() ) {
.br
        QString name = query.value(0).toString();
.br
        doSomething( name );
.br
    }
.br
.fi
.PP
To access the data returned by a query, use the value() method. Each field in the data returned by a SELECT statement is accessed by passing the field's position in the statement, starting from 0. Information about the fields can be obtained via QSqlDatabase::record(). For the sake of efficiency there are no functions to access a field by name. (The QSqlCursor class provides a higher-level interface with field access by name and automatic SQL generation.)
.PP
QSqlQuery supports prepared query execution and the binding of parameter values to placeholders. Some databases don't support these features, so for them Qt emulates the required functionality. For example, the Oracle and ODBC drivers have proper prepared query support, and Qt makes use of it; but for databases that don't have this support, Qt implements the feature itself, e.g. by replacing placeholders with actual values when a query is executed. The exception is positional binding using named placeholders, which requires that the database supports prepared queries.
.PP
Oracle databases identify placeholders by using a colon-name syntax, e.g \fC:name\fR. ODBC simply uses \fC?\fR characters. Qt supports both syntaxes (although you can't mix them in the same query).
.PP
Below we present the same example using each of the four different binding approaches.
.PP
\fBNamed binding using named placeholders\fR
.PP
.nf
.br
    QSqlQuery query;
.br
    query.prepare( "INSERT INTO atable (id, forename, surname) "
.br
                   "VALUES (:id, :forename, :surname)" );
.br
    query.bindValue( ":id", 1001 );
.br
    query.bindValue( ":forename", "Bart" );
.br
    query.bindValue( ":surname", "Simpson" );
.br
    query.exec();
.br
.fi
.PP
\fBPositional binding using named placeholders\fR
.PP
.nf
.br
    QSqlQuery query;
.br
    query.prepare( "INSERT INTO atable (id, forename, surname) "
.br
                   "VALUES (:id, :forename, :surname)" );
.br
    query.bindValue( 0, 1001 );
.br
    query.bindValue( 1, "Bart" );
.br
    query.bindValue( 2, "Simpson" );
.br
    query.exec();
.br
.fi
\fBNote:\fR Using positional binding with named placeholders will only work if the database supports prepared queries. This can be checked with QSqlDriver::hasFeature() using QSqlDriver::PreparedQueries as argument for driver feature.
.PP
\fBBinding values using positional placeholders #1\fR
.PP
.nf
.br
    QSqlQuery query;
.br
    query.prepare( "INSERT INTO atable (id, forename, surname) "
.br
                   "VALUES (?, ?, ?)" );
.br
    query.bindValue( 0, 1001 );
.br
    query.bindValue( 1, "Bart" );
.br
    query.bindValue( 2, "Simpson" );
.br
    query.exec();
.br
.fi
.PP
\fBBinding values using positional placeholders #2\fR
.PP
.nf
.br
    query.prepare( "INSERT INTO atable (id, forename, surname) "
.br
                   "VALUES (?, ?, ?)" );
.br
    query.addBindValue( 1001 );
.br
    query.addBindValue( "Bart" );
.br
    query.addBindValue( "Simpson" );
.br
    query.exec();
.br
.fi
.PP
\fBBinding values to a stored procedure\fR This code calls a stored procedure called \fCAsciiToInt()\fR, passing it a character through its in parameter, and taking its result in the out parameter.
.PP
.nf
.br
    QSqlQuery query;
.br
    query.prepare( "call AsciiToInt(?, ?)" );
.br
    query.bindValue( 0, "A" );
.br
    query.bindValue( 1, 0, QSql::Out );
.br
    query.exec();
.br
    int i = query.boundValue( 1 ).toInt(); // i is 65.
.br
.fi
.PP
See also QSqlDatabase, QSqlCursor, QVariant, and Database Classes.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QSqlQuery::QSqlQuery ( QSqlResult * r )"
Creates a QSqlQuery object which uses the QSqlResult \fIr\fR to communicate with a database.
.SH "QSqlQuery::QSqlQuery ( const QString & query = QString::null, QSqlDatabase * db = 0 )"
Creates a QSqlQuery object using the SQL \fIquery\fR and the database \fIdb\fR. If \fIdb\fR is 0, (the default), the application's default database is used. If \fIquery\fR is not a null string, it will be executed.
.PP
See also QSqlDatabase.
.SH "explicit QSqlQuery::QSqlQuery ( QSqlDatabase * db )"
Creates a QSqlQuery object using the database \fIdb\fR. If \fIdb\fR is 0, the application's default database is used.
.PP
See also QSqlDatabase.
.SH "QSqlQuery::QSqlQuery ( const QSqlQuery & other )"
Constructs a copy of \fIother\fR.
.SH "QSqlQuery::~QSqlQuery ()\fC [virtual]\fR"
Destroys the object and frees any allocated resources.
.SH "void QSqlQuery::addBindValue ( const QVariant & val, QSql::ParameterType type )"
Adds the value \fIval\fR to the list of values when using positional value binding. The order of the addBindValue() calls determines which placeholder a value will be bound to in the prepared query. If \fItype\fR is QSql::Out or QSql::InOut, the placeholder will be overwritten with data from the database after the exec() call.
.PP
See also bindValue(), prepare(), and exec().
.SH "void QSqlQuery::addBindValue ( const QVariant & val )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Binds the placeholder with type QSql::In.
.SH "void QSqlQuery::afterSeek ()\fC [virtual protected]\fR"
Protected virtual function called after the internal record pointer is moved to a new record. The default implementation does nothing.
.SH "int QSqlQuery::at () const"
Returns the current internal position of the query. The first record is at position zero. If the position is invalid, a QSql::Location will be returned indicating the invalid position.
.PP
See also prev(), next(), first(), last(), seek(), isActive(), and isValid().
.PP
Example: sql/overview/navigating/main.cpp.
.SH "void QSqlQuery::beforeSeek ()\fC [virtual protected]\fR"
Protected virtual function called before the internal record pointer is moved to a new record. The default implementation does nothing.
.SH "void QSqlQuery::bindValue ( const QString & placeholder, const QVariant & val, QSql::ParameterType type )"
Set the placeholder \fIplaceholder\fR to be bound to value \fIval\fR in the prepared statement. Note that the placeholder mark (e.g \fC:\fR) must be included when specifying the placeholder name. If \fItype\fR is QSql::Out or QSql::InOut, the placeholder will be overwritten with data from the database after the exec() call.
.PP
See also addBindValue(), prepare(), and exec().
.SH "void QSqlQuery::bindValue ( const QString & placeholder, const QVariant & val )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Binds the placeholder with type QSql::In.
.SH "void QSqlQuery::bindValue ( int pos, const QVariant & val )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Binds the placeholder at position \fIpos\fR with type QSql::In.
.SH "void QSqlQuery::bindValue ( int pos, const QVariant & val, QSql::ParameterType type )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Set the placeholder in position \fIpos\fR to be bound to value \fIval\fR in the prepared statement. Field numbering starts at 0. If \fItype\fR is QSql::Out or QSql::InOut, the placeholder will be overwritten with data from the database after the exec() call.
.PP
See also addBindValue(), prepare(), and exec().
.SH "QVariant QSqlQuery::boundValue ( const QString & placeholder ) const"
Returns the value for the \fIplaceholder\fR.
.SH "QVariant QSqlQuery::boundValue ( int pos ) const"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Returns the value for the placeholder at position \fIpos\fR.
.SH "QMap<QString, QVariant> QSqlQuery::boundValues () const"
Returns a map of the bound values.
.PP
The bound values can be examined in the following way:
.PP
.nf
.br
    QSqlQuery query;
.br
    ...
.br
    // Examine the bound values - bound using named binding
.br
    QMap<QString, QVariant>::ConstIterator it;
.br
    QMap<QString, QVariant> vals = query.boundValues();
.br
    for ( it = vals.begin(); it != vals.end(); ++it )
.br
        qWarning( "Placeholder: " + it.key() + ", Value: " + (*it).toString() );
.br
    ...
.br
.br
    // Examine the bound values - bound using positional binding
.br
    QValueList<QVariant>::ConstIterator it;
.br
    QValueList<QVariant> list = query.boundValues().values();
.br
    int i = 0;
.br
    for ( it = list.begin(); it != list.end(); ++it )
.br
        qWarning( "Placeholder pos: %d, Value: " + (*it).toString(), i++ );
.br
    ...
.br
.br
.fi
.SH "const QSqlDriver * QSqlQuery::driver () const"
Returns the database driver associated with the query.
.SH "bool QSqlQuery::exec ( const QString & query )\fC [virtual]\fR"
Executes the SQL in \fIquery\fR. Returns TRUE and sets the query state to active if the query was successful; otherwise returns FALSE and sets the query state to inactive. The \fIquery\fR string must use syntax appropriate for the SQL database being queried, for example, standard SQL.
.PP
After the query is executed, the query is positioned on an \fIinvalid\fR record, and must be navigated to a valid record before data values can be retrieved, e.g. using next().
.PP
Note that the last error for this query is reset when exec() is called.
.PP
See also isActive(), isValid(), next(), prev(), first(), last(), and seek().
.PP
Examples:
.)l sql/overview/basicbrowsing/main.cpp, sql/overview/basicbrowsing2/main.cpp, sql/overview/basicdatamanip/main.cpp, and sql/overview/connection.cpp.
.SH "bool QSqlQuery::exec ()"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Executes a previously prepared SQL query. Returns TRUE if the query executed successfully; otherwise returns FALSE.
.PP
See also prepare(), bindValue(), and addBindValue().
.SH "QString QSqlQuery::executedQuery () const"
Returns the last query that was executed.
.PP
In most cases this function returns the same as lastQuery(). If a prepared query with placeholders is executed on a DBMS that does not support it, the preparation of this query is emulated. The placeholders in the original query are replaced with their bound values to form a new query. This function returns the modified query. Useful for debugging purposes.
.PP
See also lastQuery().
.SH "bool QSqlQuery::first ()\fC [virtual]\fR"
Retrieves the first record in the result, if available, and positions the query on the retrieved record. Note that the result must be in an active state and isSelect() must return TRUE before calling this function or it will do nothing and return FALSE. Returns TRUE if successful. If unsuccessful the query position is set to an invalid position and FALSE is returned.
.PP
See also next(), prev(), last(), seek(), at(), isActive(), and isValid().
.PP
Example: sql/overview/navigating/main.cpp.
.SH "bool QSqlQuery::isActive () const"
Returns TRUE if the query is currently active; otherwise returns FALSE.
.PP
Examples:
.)l sql/overview/basicbrowsing/main.cpp, sql/overview/basicbrowsing2/main.cpp, sql/overview/basicdatamanip/main.cpp, sql/overview/navigating/main.cpp, and sql/overview/retrieve1/main.cpp.
.SH "bool QSqlQuery::isForwardOnly () const"
Returns TRUE if you can only scroll \fIforward\fR through a result set; otherwise returns FALSE.
.PP
See also setForwardOnly().
.SH "bool QSqlQuery::isNull ( int field ) const"
Returns TRUE if the query is active and positioned on a valid record and the \fIfield\fR is NULL; otherwise returns FALSE. Note that for some drivers isNull() will not return accurate information until after an attempt is made to retrieve data.
.PP
See also isActive(), isValid(), and value().
.SH "bool QSqlQuery::isSelect () const"
Returns TRUE if the current query is a \fCSELECT\fR statement; otherwise returns FALSE.
.SH "bool QSqlQuery::isValid () const"
Returns TRUE if the query is currently positioned on a valid record; otherwise returns FALSE.
.SH "bool QSqlQuery::last ()\fC [virtual]\fR"
Retrieves the last record in the result, if available, and positions the query on the retrieved record. Note that the result must be in an active state and isSelect() must return TRUE before calling this function or it will do nothing and return FALSE. Returns TRUE if successful. If unsuccessful the query position is set to an invalid position and FALSE is returned.
.PP
See also next(), prev(), first(), seek(), at(), isActive(), and isValid().
.PP
Example: sql/overview/navigating/main.cpp.
.SH "QSqlError QSqlQuery::lastError () const"
Returns error information about the last error (if any) that occurred.
.PP
See also QSqlError.
.SH "QString QSqlQuery::lastQuery () const"
Returns the text of the current query being used, or QString::null if there is no current query text.
.PP
See also executedQuery().
.SH "bool QSqlQuery::next ()\fC [virtual]\fR"
Retrieves the next record in the result, if available, and positions the query on the retrieved record. Note that the result must be in an active state and isSelect() must return TRUE before calling this function or it will do nothing and return FALSE.
.PP
The following rules apply:
.TP
If the result is currently located before the first record, e.g. immediately after a query is executed, an attempt is made to retrieve the first record.
.IP
.TP
If the result is currently located after the last record, there is no change and FALSE is returned.
.IP
.TP
If the result is located somewhere in the middle, an attempt is made to retrieve the next record.
.PP
If the record could not be retrieved, the result is positioned after the last record and FALSE is returned. If the record is successfully retrieved, TRUE is returned.
.PP
See also prev(), first(), last(), seek(), at(), isActive(), and isValid().
.PP
Examples:
.)l sql/overview/basicbrowsing/main.cpp, sql/overview/basicbrowsing2/main.cpp, sql/overview/delete/main.cpp, sql/overview/order1/main.cpp, sql/overview/retrieve1/main.cpp, sql/overview/subclass4/main.cpp, and sql/overview/subclass5/main.cpp.
.SH "int QSqlQuery::numRowsAffected () const"
Returns the number of rows affected by the result's SQL statement, or -1 if it cannot be determined. Note that for \fCSELECT\fR statements, the value is undefined; see size() instead. If the query is not active (isActive() returns FALSE), -1 is returned.
.PP
See also size() and QSqlDriver::hasFeature().
.PP
Examples:
.)l sql/overview/basicbrowsing2/main.cpp and sql/overview/basicdatamanip/main.cpp.
.SH "QSqlQuery & QSqlQuery::operator= ( const QSqlQuery & other )"
Assigns \fIother\fR to the query.
.SH "bool QSqlQuery::prepare ( const QString & query )"
Prepares the SQL query \fIquery\fR for execution. The query may contain placeholders for binding values. Both Oracle style colon-name (e.g. \fC:surname\fR), and ODBC style (e.g. \fC?\fR) placeholders are supported; but they cannot be mixed in the same query. See the Description for examples.
.PP
See also exec(), bindValue(), and addBindValue().
.SH "bool QSqlQuery::prev ()\fC [virtual]\fR"
Retrieves the previous record in the result, if available, and positions the query on the retrieved record. Note that the result must be in an active state and isSelect() must return TRUE before calling this function or it will do nothing and return FALSE.
.PP
The following rules apply:
.TP
If the result is currently located before the first record, there is no change and FALSE is returned.
.IP
.TP
If the result is currently located after the last record, an attempt is made to retrieve the last record.
.IP
.TP
If the result is somewhere in the middle, an attempt is made to retrieve the previous record.
.PP
If the record could not be retrieved, the result is positioned before the first record and FALSE is returned. If the record is successfully retrieved, TRUE is returned.
.PP
See also next(), first(), last(), seek(), at(), isActive(), and isValid().
.SH "const QSqlResult * QSqlQuery::result () const"
Returns the result associated with the query.
.SH "bool QSqlQuery::seek ( int i, bool relative = FALSE )\fC [virtual]\fR"
Retrieves the record at position (offset) \fIi\fR, if available, and positions the query on the retrieved record. The first record is at position 0. Note that the query must be in an active state and isSelect() must return TRUE before calling this function.
.PP
If \fIrelative\fR is FALSE (the default), the following rules apply:
.TP
If \fIi\fR is negative, the result is positioned before the first record and FALSE is returned.
.TP
Otherwise, an attempt is made to move to the record at position \fIi\fR. If the record at position \fIi\fR could not be retrieved, the result is positioned after the last record and FALSE is returned. If the record is successfully retrieved, TRUE is returned.
.PP
If \fIrelative\fR is TRUE, the following rules apply:
.TP
If the result is currently positioned before the first record or on the first record, and \fIi\fR is negative, there is no change, and FALSE is returned.
.TP
If the result is currently located after the last record, and \fIi\fR is positive, there is no change, and FALSE is returned.
.TP
If the result is currently located somewhere in the middle, and the relative offset \fIi\fR moves the result below zero, the result is positioned before the first record and FALSE is returned.
.TP
Otherwise, an attempt is made to move to the record \fIi\fR records ahead of the current record (or \fIi\fR records behind the current record if \fIi\fR is negative). If the record at offset \fIi\fR could not be retrieved, the result is positioned after the last record if \fIi\fR >= 0, (or before the first record if \fIi\fR is negative), and FALSE is returned. If the record is successfully retrieved, TRUE is returned.
.PP
See also next(), prev(), first(), last(), at(), isActive(), and isValid().
.PP
Example: sql/overview/navigating/main.cpp.
.SH "void QSqlQuery::setForwardOnly ( bool forward )"
Sets forward only mode to \fIforward\fR. If forward is TRUE only next(), and seek() with positive values, are allowed for navigating the results. Forward only mode needs far less memory since results do not need to be cached.
.PP
Forward only mode is off by default.
.PP
Forward only mode cannot be used with data aware widgets like QDataTable, since they must to be able to scroll backward as well as forward.
.PP
See also isForwardOnly(), next(), and seek().
.SH "int QSqlQuery::size () const"
Returns the size of the result, (number of rows returned), or -1 if the size cannot be determined or if the database does not support reporting information about query sizes. Note that for non-\fCSELECT\fR statements (isSelect() returns FALSE), size() will return -1. If the query is not active (isActive() returns FALSE), -1 is returned.
.PP
To determine the number of rows affected by a non-SELECT statement, use numRowsAffected().
.PP
See also isActive(), numRowsAffected(), and QSqlDriver::hasFeature().
.PP
Example: sql/overview/navigating/main.cpp.
.SH "QVariant QSqlQuery::value ( int i ) const\fC [virtual]\fR"
Returns the value of the \fIi\fR-th field in the query (zero based).
.PP
The fields are numbered from left to right using the text of the \fCSELECT\fR statement, e.g. in \fCSELECT forename, surname FROM people\fR, field 0 is \fCforename\fR and field 1 is \fCsurname\fR. Using \fCSELECT *\fR is not recommended because the order of the fields in the query is undefined.
.PP
An invalid QVariant is returned if field \fIi\fR does not exist, if the query is inactive, or if the query is positioned on an invalid record.
.PP
See also prev(), next(), first(), last(), seek(), isActive(), and isValid().
.PP
Examples:
.)l sql/overview/basicbrowsing/main.cpp, sql/overview/basicbrowsing2/main.cpp, sql/overview/retrieve1/main.cpp, sql/overview/subclass3/main.cpp, sql/overview/subclass4/main.cpp, sql/overview/subclass5/main.cpp, and sql/overview/table4/main.cpp.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qsqlquery.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qsqlquery.3qt) and the Qt
version (3.3.8).
