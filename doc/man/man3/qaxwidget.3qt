'\" t
.TH QAxWidget 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QAxWidget \- QWidget that wraps an ActiveX control
.SH SYNOPSIS
This class is part of the \fBQt ActiveQt Extension\fR.
.PP
\fC#include <qaxwidget.h>\fR
.PP
Inherits QWidget and QAxBase.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQAxWidget\fR ( QWidget * parent = 0, const char * name = 0, WFlags f = 0 )"
.br
.ti -1c
.BI "\fBQAxWidget\fR ( const QString & c, QWidget * parent = 0, const char * name = 0, WFlags f = 0 )"
.br
.ti -1c
.BI "\fBQAxWidget\fR ( IUnknown * iface, QWidget * parent = 0, const char * name = 0, WFlags f = 0 )"
.br
.ti -1c
.BI "\fB~QAxWidget\fR ()"
.br
.in -1c
.SS "Important Inherited Members"
.in +1c
.ti -1c
.BI "QVariant \fBdynamicCall\fR ( const QCString & function, const QVariant & var1 = QVariant ( ), const QVariant & var2 = QVariant ( ), const QVariant & var3 = QVariant ( ), const QVariant & var4 = QVariant ( ), const QVariant & var5 = QVariant ( ), const QVariant & var6 = QVariant ( ), const QVariant & var7 = QVariant ( ), const QVariant & var8 = QVariant ( ) )"
.br
.ti -1c
.BI "QVariant \fBdynamicCall\fR ( const QCString & function, QValueList<QVariant> & vars )"
.br
.ti -1c
.BI "QAxObject * \fBquerySubObject\fR ( const QCString & name, const QVariant & var1 = QVariant ( ), const QVariant & var2 = QVariant ( ), const QVariant & var3 = QVariant ( ), const QVariant & var4 = QVariant ( ), const QVariant & var5 = QVariant ( ), const QVariant & var6 = QVariant ( ), const QVariant & var7 = QVariant ( ), const QVariant & var8 = QVariant ( ) )"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual bool \fBcreateHostWindow\fR ( bool initialized )"
.br
.ti -1c
.BI "virtual bool \fBtranslateKeyEvent\fR ( int message, int keycode ) const"
.br
.in -1c
.SH DESCRIPTION
This class is defined in the \fBQt ActiveQt Extension\fR, which can be found in the \fCqt/extensions\fR directory. It is not included in the main Qt API.
.PP
The QAxWidget class is a QWidget that wraps an ActiveX control.
.PP
A QAxWidget can be instantiated as an empty object, with the name of the ActiveX control it should wrap, or with an existing interface pointer to the ActiveX control. The ActiveX control's properties, methods and events which only use supported data types, become available as Qt properties, slots and signals. The base class QAxBase provides an API to access the ActiveX directly through the IUnknown pointer.
.PP
QAxWidget is a QWidget and can be used as such, e.g. it can be organized in a widget hierarchy, receive events or act as an event filter. Standard widget properties, e.g. enabled are supported, but it depends on the ActiveX control to implement support for ambient properties like e.g. palette or font. QAxWidget tries to provide the necessary hints.
.PP
\fBWarning:\fR You can subclass QAxWidget, but you cannot use the Q_OBJECT macro in the subclass (the generated moc-file will not compile), so you cannot add further signals, slots or properties. This limitation is due to the metaobject information generated in runtime. To work around this problem, aggregate the QAxWidget as a member of the QObject subclass.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QAxWidget::QAxWidget ( QWidget * parent = 0, const char * name = 0, WFlags f = 0 )"
Creates an empty QAxWidget widget and propagates \fIparent\fR, \fIname\fR and \fIf\fR to the QWidget constructor. To initialize a control, call setControl.
.SH "QAxWidget::QAxWidget ( const QString & c, QWidget * parent = 0, const char * name = 0, WFlags f = 0 )"
Creates an QAxWidget widget and initializes the ActiveX control \fIc\fR. \fIparent\fR, \fIname\fR and \fIf\fR are propagated to the QWidget contructor.
.PP
See also control.
.SH "QAxWidget::QAxWidget ( IUnknown * iface, QWidget * parent = 0, const char * name = 0, WFlags f = 0 )"
Creates a QAxWidget that wraps the COM object referenced by \fIiface\fR. \fIparent\fR, \fIname\fR and \fIf\fR are propagated to the QWidget contructor.
.SH "QAxWidget::~QAxWidget ()"
Shuts down the ActiveX control and destroys the QAxWidget widget, cleaning up all allocated resources.
.PP
See also clear().
.SH "bool QAxWidget::createHostWindow ( bool initialized )\fC [virtual protected]\fR"
Creates the client site for the ActiveX control, and returns TRUE if the control could be embedded successfully, otherwise returns FALSE. If \fIinitialized\fR is TRUE the control has already been initialized.
.PP
This function is called by initialize(). If you reimplement initialize to customize the actual control instantiation, call this function in your reimplementation to have the control embedded by the default client side. Creates the client site for the ActiveX control, and returns TRUE if the control could be embedded successfully, otherwise returns FALSE.
.SH "QVariant QAxBase::dynamicCall ( const QCString & function, const QVariant & var1 = QVariant ( ), const QVariant & var2 = QVariant ( ), const QVariant & var3 = QVariant ( ), const QVariant & var4 = QVariant ( ), const QVariant & var5 = QVariant ( ), const QVariant & var6 = QVariant ( ), const QVariant & var7 = QVariant ( ), const QVariant & var8 = QVariant ( ) )"
Calls the COM object's method \fIfunction\fR, passing the parameters \fIvar1\fR, \fIvar1\fR, \fIvar2\fR, \fIvar3\fR, \fIvar4\fR, \fIvar5\fR, \fIvar6\fR, \fIvar7\fR and \fIvar8\fR, and returns the value returned by the method, or an invalid QVariant if the method does not return a value or when the function call failed.
.PP
If \fIfunction\fR is a method of the object the string must be provided as the full prototype, for example as it would be written in a QObject::connect() call.
.PP
.nf
.br
    activeX->dynamicCall( "Navigate(const QString&)", "www.trolltech.com" );
.br
.fi
.PP
Alternatively a function can be called passing the parameters embedded in the string, e.g. above function can also be invoked using
.PP
.nf
.br
    activeX->dynamicCall("Navigate(\\"www.trolltech.com\\");
.br
.fi
All parameters are passed as strings; it depends on the control whether they are interpreted correctly, and is slower than using the prototype with correctly typed parameters.
.PP
If \fIfunction\fR is a property the string has to be the name of the property. The property setter is called when \fIvar1\fR is a valid QVariant, otherwise the getter is called.
.PP
.nf
.br
    activeX->dynamicCall( "Value", 5 );
.br
    QString text = activeX->dynamicCall( "Text" ).toString();
.br
.fi
Note that it is faster to get and set properties using QObject::property() and QObject::setProperty().
.PP
It is only possible to call functions through dynamicCall() that have parameters or return values of datatypes supported by QVariant. See the QAxBase class documentation for a list of supported and unsupported datatypes. If you want to call functions that have unsupported datatypes in the parameter list, use queryInterface() to retrieve the appropriate COM interface, and use the function directly.
.PP
.nf
.br
    IWebBrowser2 *webBrowser = 0;
.br
    activeX->queryInterface( IID_IWebBrowser2, (void**)&webBrowser );
.br
    if ( webBrowser ) {
.br
        webBrowser->Navigate2( pvarURL );
.br
        webBrowser->Release();
.br
    }
.br
.fi
.PP
This is also more efficient.
.PP
Example: qutlook/centralwidget.cpp.
.SH "QVariant QAxBase::dynamicCall ( const QCString & function, QValueList<QVariant> & vars )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Calls the COM object's method \fIfunction\fR, passing the parameters in \fIvars\fR, and returns the value returned by the method. If the method does not return a value or when the function call failed this function returns an invalid QVariant object.
.PP
The QVariant objects in \fIvars\fR are updated when the method has out-parameters.
.SH "QAxObject * QAxBase::querySubObject ( const QCString & name, const QVariant & var1 = QVariant ( ), const QVariant & var2 = QVariant ( ), const QVariant & var3 = QVariant ( ), const QVariant & var4 = QVariant ( ), const QVariant & var5 = QVariant ( ), const QVariant & var6 = QVariant ( ), const QVariant & var7 = QVariant ( ), const QVariant & var8 = QVariant ( ) )"
Returns a pointer to a QAxObject wrapping the COM object provided by the method or property \fIname\fR, passing passing the parameters \fIvar1\fR, \fIvar1\fR, \fIvar2\fR, \fIvar3\fR, \fIvar4\fR, \fIvar5\fR, \fIvar6\fR, \fIvar7\fR and \fIvar8\fR.
.PP
If \fIname\fR is provided by a method the string must include the full function prototype.
.PP
If \fIname\fR is a property the string must be the name of the property, and \fIvar1\fR, ... \fIvar8\fR are ignored.
.PP
The returned QAxObject is a child of this object (which is either of type QAxObject or QAxWidget), and is deleted when this object is deleted. It is however safe to delete the returned object yourself, and you should do so when you iterate over lists of subobjects.
.PP
COM enabled applications usually have an object model publishing certain elements of the application as dispatch interfaces. Use this method to navigate the hierarchy of the object model, e.g.
.PP
.nf
.br
    QAxWidget outlook( "Outlook.Application" );
.br
    QAxObject *session = outlook.querySubObject( "Session" );
.br
    if ( session ) {
.br
        QAxObject *defFolder = session->querySubObject(
.br
                                "GetDefaultFolder(OlDefaultFolders)",
.br
                                "olFolderContacts" );
.br
        //...
.br
    }
.br
.fi
.PP
Example: qutlook/centralwidget.cpp.
.SH "bool QAxWidget::translateKeyEvent ( int message, int keycode ) const\fC [virtual protected]\fR"
Reimplement this function to pass certain key events to the ActiveX control. \fImessage\fR is the Window message identifier specifying the message type (ie. WM_KEYDOWN), and \fIkeycode\fR is the virtual keycode (ie. VK_TAB).
.PP
If the function returns TRUE the key event is passed on to the ActiveX control, which then either processes the event or passes the event on to Qt.
.PP
If the function returns FALSE the processing of the key event is ignored by ActiveQt, ie. the ActiveX control might handle it or not.
.PP
The default implementation returns TRUE for the following cases:
.PP
<center>.nf
.TS
l - l. WM_SYSKEYDOWN WM_SYSKEYUP WM_KEYDOWN All keycodes VK_MENU
.TE
.fi
</center>
.PP
This table is the result of experimenting with popular ActiveX controls,
ie. Internet Explorer and Microsoft Office applications, but for some
controls it might require modification.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qaxwidget.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qaxwidget.3qt) and the Qt
version (3.3.8).
