'\" t
.TH QTextStream 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QTextStream \- Basic functions for reading and writing text using a QIODevice
.SH SYNOPSIS
All the functions in this class are reentrant when Qt is built with thread support.</p>
.PP
\fC#include <qtextstream.h>\fR
.PP
Inherited by QTextIStream and QTextOStream.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "enum \fBEncoding\fR { Locale, Latin1, Unicode, UnicodeNetworkOrder, UnicodeReverse, RawUnicode, UnicodeUTF8 }"
.br
.ti -1c
.BI "void \fBsetEncoding\fR ( Encoding e )"
.br
.ti -1c
.BI "void \fBsetCodec\fR ( QTextCodec * codec )"
.br
.ti -1c
.BI "QTextCodec * \fBcodec\fR ()"
.br
.ti -1c
.BI "\fBQTextStream\fR ()"
.br
.ti -1c
.BI "\fBQTextStream\fR ( QIODevice * iod )"
.br
.ti -1c
.BI "\fBQTextStream\fR ( QString * str, int filemode )"
.br
.ti -1c
.BI "QTextStream ( QString & str, int filemode )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "\fBQTextStream\fR ( QByteArray a, int mode )"
.br
.ti -1c
.BI "\fBQTextStream\fR ( FILE * fh, int mode )"
.br
.ti -1c
.BI "virtual \fB~QTextStream\fR ()"
.br
.ti -1c
.BI "QIODevice * \fBdevice\fR () const"
.br
.ti -1c
.BI "void \fBsetDevice\fR ( QIODevice * iod )"
.br
.ti -1c
.BI "void \fBunsetDevice\fR ()"
.br
.ti -1c
.BI "bool \fBatEnd\fR () const"
.br
.ti -1c
.BI "bool eof () const  \fI(obsolete)\fR"
.br
.ti -1c
.BI "QTextStream & \fBoperator>>\fR ( QChar & c )"
.br
.ti -1c
.BI "QTextStream & \fBoperator>>\fR ( char & c )"
.br
.ti -1c
.BI "QTextStream & \fBoperator>>\fR ( signed short & i )"
.br
.ti -1c
.BI "QTextStream & \fBoperator>>\fR ( unsigned short & i )"
.br
.ti -1c
.BI "QTextStream & \fBoperator>>\fR ( signed int & i )"
.br
.ti -1c
.BI "QTextStream & \fBoperator>>\fR ( unsigned int & i )"
.br
.ti -1c
.BI "QTextStream & \fBoperator>>\fR ( signed long & i )"
.br
.ti -1c
.BI "QTextStream & \fBoperator>>\fR ( unsigned long & i )"
.br
.ti -1c
.BI "QTextStream & \fBoperator>>\fR ( float & f )"
.br
.ti -1c
.BI "QTextStream & \fBoperator>>\fR ( double & f )"
.br
.ti -1c
.BI "QTextStream & \fBoperator>>\fR ( char * s )"
.br
.ti -1c
.BI "QTextStream & \fBoperator>>\fR ( QString & str )"
.br
.ti -1c
.BI "QTextStream & \fBoperator>>\fR ( QCString & str )"
.br
.ti -1c
.BI "QTextStream & \fBoperator<<\fR ( QChar c )"
.br
.ti -1c
.BI "QTextStream & \fBoperator<<\fR ( char c )"
.br
.ti -1c
.BI "QTextStream & \fBoperator<<\fR ( signed short i )"
.br
.ti -1c
.BI "QTextStream & \fBoperator<<\fR ( unsigned short i )"
.br
.ti -1c
.BI "QTextStream & \fBoperator<<\fR ( signed int i )"
.br
.ti -1c
.BI "QTextStream & \fBoperator<<\fR ( unsigned int i )"
.br
.ti -1c
.BI "QTextStream & \fBoperator<<\fR ( signed long i )"
.br
.ti -1c
.BI "QTextStream & \fBoperator<<\fR ( unsigned long i )"
.br
.ti -1c
.BI "QTextStream & \fBoperator<<\fR ( float f )"
.br
.ti -1c
.BI "QTextStream & \fBoperator<<\fR ( double f )"
.br
.ti -1c
.BI "QTextStream & \fBoperator<<\fR ( const char * s )"
.br
.ti -1c
.BI "QTextStream & \fBoperator<<\fR ( const QString & s )"
.br
.ti -1c
.BI "QTextStream & \fBoperator<<\fR ( const QCString & s )"
.br
.ti -1c
.BI "QTextStream & \fBoperator<<\fR ( void * ptr )"
.br
.ti -1c
.BI "QTextStream & \fBreadRawBytes\fR ( char * s, uint len )"
.br
.ti -1c
.BI "QTextStream & \fBwriteRawBytes\fR ( const char * s, uint len )"
.br
.ti -1c
.BI "QString \fBreadLine\fR ()"
.br
.ti -1c
.BI "QString \fBread\fR ()"
.br
.ti -1c
.BI "void \fBskipWhiteSpace\fR ()"
.br
.ti -1c
.BI "int \fBflags\fR () const"
.br
.ti -1c
.BI "int \fBflags\fR ( int f )"
.br
.ti -1c
.BI "int \fBsetf\fR ( int bits )"
.br
.ti -1c
.BI "int \fBsetf\fR ( int bits, int mask )"
.br
.ti -1c
.BI "int \fBunsetf\fR ( int bits )"
.br
.ti -1c
.BI "void \fBreset\fR ()"
.br
.ti -1c
.BI "int \fBwidth\fR () const"
.br
.ti -1c
.BI "int \fBwidth\fR ( int w )"
.br
.ti -1c
.BI "int \fBfill\fR () const"
.br
.ti -1c
.BI "int \fBfill\fR ( int f )"
.br
.ti -1c
.BI "int \fBprecision\fR () const"
.br
.ti -1c
.BI "int \fBprecision\fR ( int p )"
.br
.in -1c
.SH DESCRIPTION
The QTextStream class provides basic functions for reading and writing text using a QIODevice.
.PP
The text stream class has a functional interface that is very similar to that of the standard C++ iostream class.
.PP
Qt provides several global functions similar to the ones in iostream: <center>.nf
.TS
l - l. Function Meaning bin sets the QTextStream to read/write binary numbers oct sets the QTextStream to read/write octal numbers dec sets the QTextStream to read/write decimal numbers hex sets the QTextStream to read/write hexadecimal numbers endl forces a line break flush forces the QIODevice to flush any buffered data ws eats any available whitespace (on input) reset resets the QTextStream to its default mode (see reset()) qSetW(int) sets the field width to the given argument qSetFill(int) sets the fill character to the given argument qSetPrecision(int)
.TE
.fi
</center>
.PP
\fBWarning:\fR By default QTextStream will automatically detect whether integers in the stream are in decimal, octal, hexadecimal or binary format when reading from the stream. In particular, a leading '0' signifies octal, i.e. the sequence "0100" will be interpreted as 64.
.PP
The QTextStream class reads and writes text; it is not appropriate for dealing with binary data (but QDataStream is).
.PP
By default, output of Unicode text (i.e. QString) is done using the local 8-bit encoding. This can be changed using the setEncoding() method. For input, the QTextStream will auto-detect standard Unicode "byte order marked" text files; otherwise the local 8-bit encoding is used.
.PP
The QIODevice is set in the constructor, or later using setDevice(). If the end of the input is reached atEnd() returns TRUE. Data can be read into variables of the appropriate type using the operator>>() overloads, or read in its entirety into a single string using read(), or read a line at a time using readLine(). Whitespace can be skipped over using skipWhiteSpace(). You can set flags for the stream using flags() or setf(). The stream also supports width(), precision() and fill(); use reset() to reset the defaults.
.PP
See also QDataStream, Input/Output and Networking, and Text Related Classes.
.SS "Member Type Documentation"
.SH "QTextStream::Encoding"
.TP
\fCQTextStream::Locale\fR
.TP
\fCQTextStream::Latin1\fR
.TP
\fCQTextStream::Unicode\fR
.TP
\fCQTextStream::UnicodeNetworkOrder\fR
.TP
\fCQTextStream::UnicodeReverse\fR
.TP
\fCQTextStream::RawUnicode\fR
.TP
\fCQTextStream::UnicodeUTF8\fR
.PP
See setEncoding() for an explanation of the encodings.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QTextStream::QTextStream ()"
Constructs a data stream that has no IO device.
.SH "QTextStream::QTextStream ( QIODevice * iod )"
Constructs a text stream that uses the IO device \fIiod\fR.
.SH "QTextStream::QTextStream ( QString * str, int filemode )"
Constructs a text stream that operates on the Unicode QString, \fIstr\fR, through an internal device. The \fIfilemode\fR argument is passed to the device's open() function; see QIODevice::mode().
.PP
If you set an encoding or codec with setEncoding() or setCodec(), this setting is ignored for text streams that operate on QString.
.PP
Example:
.PP
.nf
.br
    QString str;
.br
    QTextStream ts( &str, IO_WriteOnly );
.br
    ts << "pi = " << 3.14; // str == "pi = 3.14"
.br
.fi
.PP
Writing data to the text stream will modify the contents of the string. The string will be expanded when data is written beyond the end of the string. Note that the string will not be truncated:
.PP
.nf
.br
    QString str = "pi = 3.14";
.br
    QTextStream ts( &str, IO_WriteOnly );
.br
    ts <<  "2+2 = " << 2+2; // str == "2+2 = 414"
.br
.fi
.PP
Note that because QString is Unicode, you should not use readRawBytes() or writeRawBytes() on such a stream.
.SH "QTextStream::QTextStream ( QString & str, int filemode )"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
This constructor is equivalent to the constructor taking a QString* parameter.
.SH "QTextStream::QTextStream ( QByteArray a, int mode )"
Constructs a text stream that operates on the byte array, \fIa\fR, through an internal QBuffer device. The \fImode\fR argument is passed to the device's open() function; see QIODevice::mode().
.PP
Example:
.PP
.nf
.br
    QByteArray array;
.br
    QTextStream ts( array, IO_WriteOnly );
.br
    ts << "pi = " << 3.14 << '\\0'; // array == "pi = 3.14"
.br
.fi
.PP
Writing data to the text stream will modify the contents of the array. The array will be expanded when data is written beyond the end of the string.
.PP
Same example, using a QBuffer:
.PP
.nf
.br
    QByteArray array;
.br
    QBuffer buf( array );
.br
    buf.open( IO_WriteOnly );
.br
    QTextStream ts( &buf );
.br
    ts << "pi = " << 3.14 << '\\0'; // array == "pi = 3.14"
.br
    buf.close();
.br
.fi
.SH "QTextStream::QTextStream ( FILE * fh, int mode )"
Constructs a text stream that operates on an existing file handle \fIfh\fR through an internal QFile device. The \fImode\fR argument is passed to the device's open() function; see QIODevice::mode().
.PP
Note that if you create a QTextStream \fCcout\fR or another name that is also used for another variable of a different type, some linkers may confuse the two variables, which will often cause crashes.
.SH "QTextStream::~QTextStream ()\fC [virtual]\fR"
Destroys the text stream.
.PP
The destructor does not affect the current IO device.
.SH "bool QTextStream::atEnd () const"
Returns TRUE if the IO device has reached the end position (end of the stream or file) or if there is no IO device set; otherwise returns FALSE.
.PP
See also QIODevice::atEnd().
.PP
Examples:
.)l addressbook/centralwidget.cpp and grapher/grapher.cpp.
.SH "QTextCodec * QTextStream::codec ()"
Returns the codec actually used for this stream.
.PP
If Unicode is automatically detected in input, a codec with name() "ISO-10646-UCS-2" is returned.
.PP
See also setCodec().
.SH "QIODevice * QTextStream::device () const"
Returns the IO device currently set.
.PP
See also setDevice() and unsetDevice().
.SH "bool QTextStream::eof () const"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
This function has been renamed to atEnd().
.PP
See also QIODevice::atEnd().
.PP
Example: chart/chartform_files.cpp.
.SH "int QTextStream::fill () const"
Returns the fill character. The default value is ' ' (space).
.SH "int QTextStream::fill ( int f )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Sets the fill character to \fIf\fR. Returns the previous fill character.
.SH "int QTextStream::flags () const"
Returns the current stream flags. The default value is 0.
.PP
<center>.nf
.TS
l
-
l.
Flag	Meaning
	Not currently used; whitespace always skipped
	Numeric fields are left-aligned
	Not currently used (by default, numerics are right-aligned)
	Puts any padding spaces between +/- and value
	Output \fIand\fR input only in binary
	Output \fIand\fR input only in octal
	Output \fIand\fR input only in decimal
	Output \fIand\fR input only in hexadecimal
	Annotates numeric outputs with 0b, 0, or 0x if in
	Not currently used
	Uses 0B and 0X rather than 0b and 0x
	Shows + for positive numeric values
	Uses scientific notation for floating point values

.TE
.fi
</center>
.PP
Note that unless \fCbin\fR, \fCoct\fR, \fCdec\fR, or \fChex\fR is set, the input base is octal if the value starts with 0, hexadecimal if it starts with 0x, binary if it starts with 0b, and decimal otherwise.
.PP
See also setf() and unsetf().
.SH "int QTextStream::flags ( int f )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Sets the stream flags to \fIf\fR. Returns the previous stream flags.
.PP
See also setf() and unsetf().
.SH "QTextStream & QTextStream::operator<< ( QChar c )"
Writes character \fCchar\fR to the stream and returns a reference to the stream.
.PP
The character \fIc\fR is assumed to be Latin1 encoded independent of the Encoding set for the QTextStream.
.SH "QTextStream & QTextStream::operator<< ( char c )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes character \fIc\fR to the stream and returns a reference to the stream.
.SH "QTextStream & QTextStream::operator<< ( signed short i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes a \fCshort\fR integer \fIi\fR to the stream and returns a reference to the stream.
.SH "QTextStream & QTextStream::operator<< ( unsigned short i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes an \fCunsigned\fR \fCshort\fR integer \fIi\fR to the stream and returns a reference to the stream.
.SH "QTextStream & QTextStream::operator<< ( signed int i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes an \fCint\fR \fIi\fR to the stream and returns a reference to the stream.
.SH "QTextStream & QTextStream::operator<< ( unsigned int i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes an \fCunsigned\fR \fCint\fR \fIi\fR to the stream and returns a reference to the stream.
.SH "QTextStream & QTextStream::operator<< ( signed long i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes a \fClong\fR \fCint\fR \fIi\fR to the stream and returns a reference to the stream.
.SH "QTextStream & QTextStream::operator<< ( unsigned long i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes an \fCunsigned\fR \fClong\fR \fCint\fR \fIi\fR to the stream and returns a reference to the stream.
.SH "QTextStream & QTextStream::operator<< ( float f )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes a \fCfloat\fR \fIf\fR to the stream and returns a reference to the stream.
.SH "QTextStream & QTextStream::operator<< ( double f )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes a \fCdouble\fR \fIf\fR to the stream and returns a reference to the stream.
.SH "QTextStream & QTextStream::operator<< ( const char * s )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes a string to the stream and returns a reference to the stream.
.PP
The string \fIs\fR is assumed to be Latin1 encoded independent of the Encoding set for the QTextStream.
.SH "QTextStream & QTextStream::operator<< ( const QString & s )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes \fIs\fR to the stream and returns a reference to the stream.
.SH "QTextStream & QTextStream::operator<< ( const QCString & s )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes \fIs\fR to the stream and returns a reference to the stream.
.PP
The string \fIs\fR is assumed to be Latin1 encoded independent of the Encoding set for the QTextStream.
.SH "QTextStream & QTextStream::operator<< ( void * ptr )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes a pointer to the stream and returns a reference to the stream.
.PP
The \fIptr\fR is output as an unsigned long hexadecimal integer.
.SH "QTextStream & QTextStream::operator>> ( QChar & c )"
Reads a char \fIc\fR from the stream and returns a reference to the stream. Note that whitespace is \fInot\fR skipped.
.SH "QTextStream & QTextStream::operator>> ( char & c )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads a char \fIc\fR from the stream and returns a reference to the stream. Note that whitespace is skipped.
.SH "QTextStream & QTextStream::operator>> ( signed short & i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads a signed \fCshort\fR integer \fIi\fR from the stream and returns a reference to the stream. See flags() for an explanation of the expected input format.
.SH "QTextStream & QTextStream::operator>> ( unsigned short & i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads an unsigned \fCshort\fR integer \fIi\fR from the stream and returns a reference to the stream. See flags() for an explanation of the expected input format.
.SH "QTextStream & QTextStream::operator>> ( signed int & i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads a signed \fCint\fR \fIi\fR from the stream and returns a reference to the stream. See flags() for an explanation of the expected input format.
.SH "QTextStream & QTextStream::operator>> ( unsigned int & i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads an unsigned \fCint\fR \fIi\fR from the stream and returns a reference to the stream. See flags() for an explanation of the expected input format.
.SH "QTextStream & QTextStream::operator>> ( signed long & i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads a signed \fClong\fR int \fIi\fR from the stream and returns a reference to the stream. See flags() for an explanation of the expected input format.
.SH "QTextStream & QTextStream::operator>> ( unsigned long & i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads an unsigned \fClong\fR int \fIi\fR from the stream and returns a reference to the stream. See flags() for an explanation of the expected input format.
.SH "QTextStream & QTextStream::operator>> ( float & f )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads a \fCfloat\fR \fIf\fR from the stream and returns a reference to the stream. See flags() for an explanation of the expected input format.
.SH "QTextStream & QTextStream::operator>> ( double & f )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads a \fCdouble\fR \fIf\fR from the stream and returns a reference to the stream. See flags() for an explanation of the expected input format.
.SH "QTextStream & QTextStream::operator>> ( char * s )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads a "word" from the stream into \fIs\fR and returns a reference to the stream.
.PP
A word consists of characters for which isspace() returns FALSE.
.SH "QTextStream & QTextStream::operator>> ( QString & str )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads a "word" from the stream into \fIstr\fR and returns a reference to the stream.
.PP
A word consists of characters for which isspace() returns FALSE.
.SH "QTextStream & QTextStream::operator>> ( QCString & str )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads a "word" from the stream into \fIstr\fR and returns a reference to the stream.
.PP
A word consists of characters for which isspace() returns FALSE.
.SH "int QTextStream::precision () const"
Returns the precision. The default value is 6.
.SH "int QTextStream::precision ( int p )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Sets the precision to \fIp\fR. Returns the previous precision setting.
.SH "QString QTextStream::read ()"
Reads the entire stream from the current position, and returns a string containing the text.
.PP
See also QIODevice::readLine().
.PP
Examples:
.)l action/application.cpp, application/application.cpp, mdi/application.cpp, qdir/qdir.cpp, and qwerty/qwerty.cpp.
.SH "QString QTextStream::readLine ()"
Reads a line from the stream and returns a string containing the text.
.PP
The returned string does not contain any trailing newline or carriage return. Note that this is different from QIODevice::readLine(), which does not strip the newline at the end of the line.
.PP
On EOF you will get a QString that is null. On reading an empty line the returned QString is empty but not null.
.PP
See also QIODevice::readLine().
.PP
Examples:
.)l addressbook/centralwidget.cpp, chart/element.cpp, and network/clientserver/server/server.cpp.
.SH "QTextStream & QTextStream::readRawBytes ( char * s, uint len )"
Reads \fIlen\fR bytes from the stream into \fIs\fR and returns a reference to the stream.
.PP
The buffer \fIs\fR must be preallocated.
.PP
Note that no encoding is done by this function.
.PP
\fBWarning:\fR The behavior of this function is undefined unless the stream's encoding is set to Unicode or Latin1.
.PP
See also QIODevice::readBlock().
.SH "void QTextStream::reset ()"
Resets the text stream.
.TP
All flags are set to 0.
.TP
The field width is set to 0.
.TP
The fill character is set to ' ' (Space).
.TP
The precision is set to 6.
.PP
See also setf(), width(), fill(), and precision().
.SH "void QTextStream::setCodec ( QTextCodec * codec )"
Sets the codec for this stream to \fIcodec\fR. Will not try to autodetect Unicode.
.PP
Note that this function should be called before any data is read to/written from the stream.
.PP
See also setEncoding() and codec().
.PP
Example: qwerty/qwerty.cpp.
.SH "void QTextStream::setDevice ( QIODevice * iod )"
Sets the IO device to \fIiod\fR.
.PP
See also device() and unsetDevice().
.SH "void QTextStream::setEncoding ( Encoding e )"
Sets the encoding of this stream to \fIe\fR, where \fIe\fR is one of the following values: <center>.nf
.TS
l - l. Encoding Meaning Locale Uses local file format (Latin1 if locale is not set), but autodetecting Unicode(utf16) on input. Unicode Uses Unicode(utf16) for input and output. Output will be written in the order most efficient for the current platform (i.e. the order used internally in QString). UnicodeUTF8 Using Unicode(utf8) for input and output. If you use it for input it will autodetect utf16 and use it instead of utf8. Latin1 ISO-8859-1. Will not autodetect utf16. UnicodeNetworkOrder Uses network order Unicode(utf16) for input and output. Useful when reading Unicode data that does not start with the byte order marker. UnicodeReverse Uses reverse network order Unicode(utf16) for input and output. Useful when reading Unicode data that does not start with the byte order marker or when writing data that should be read by buggy Windows applications. RawUnicode
.TE
.fi
</center>
.PP
Locale and all Unicode encodings, except RawUnicode, will look at the first two bytes in an input stream to determine the byte order. The initial byte order marker will be stripped off before data is read.
.PP
Note that this function should be called before any data is read to or written from the stream.
.PP
See also setCodec().
.PP
Examples:
.)l addressbook/centralwidget.cpp, network/httpd/httpd.cpp, and qwerty/qwerty.cpp.
.SH "int QTextStream::setf ( int bits )"
Sets the stream flag bits \fIbits\fR. Returns the previous stream flags.
.PP
Equivalent to \fCflags( flags() | bits )\fR.
.PP
See also unsetf().
.SH "int QTextStream::setf ( int bits, int mask )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Sets the stream flag bits \fIbits\fR with a bit mask \fImask\fR. Returns the previous stream flags.
.PP
Equivalent to \fCflags( (flags() & ~mask) | (bits & mask) )\fR.
.PP
See also unsetf().
.SH "void QTextStream::skipWhiteSpace ()"
Positions the read pointer at the first non-whitespace character.
.SH "void QTextStream::unsetDevice ()"
Unsets the IO device. Equivalent to setDevice( 0 ).
.PP
See also device() and setDevice().
.SH "int QTextStream::unsetf ( int bits )"
Clears the stream flag bits \fIbits\fR. Returns the previous stream flags.
.PP
Equivalent to \fCflags( flags() & ~mask )\fR.
.PP
See also setf().
.SH "int QTextStream::width () const"
Returns the field width. The default value is 0.
.SH "int QTextStream::width ( int w )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Sets the field width to \fIw\fR. Returns the previous field width.
.SH "QTextStream & QTextStream::writeRawBytes ( const char * s, uint len )"
Writes the \fIlen\fR bytes from \fIs\fR to the stream and returns a reference to the stream.
.PP
Note that no encoding is done by this function.
.PP
See also QIODevice::writeBlock().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qtextstream.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qtextstream.3qt) and the Qt
version (3.3.8).
