'\" t
.TH QMainWindow 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QMainWindow \- Main application window, with a menu bar, dock windows (e.g. for toolbars), and a status bar
.SH SYNOPSIS
\fC#include <qmainwindow.h>\fR
.PP
Inherits QWidget.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQMainWindow\fR ( QWidget * parent = 0, const char * name = 0, WFlags f = WType_TopLevel )"
.br
.ti -1c
.BI "\fB~QMainWindow\fR ()"
.br
.ti -1c
.BI "QMenuBar * \fBmenuBar\fR () const"
.br
.ti -1c
.BI "QStatusBar * \fBstatusBar\fR () const"
.br
.ti -1c
.BI "QToolTipGroup * \fBtoolTipGroup\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetCentralWidget\fR ( QWidget * w )"
.br
.ti -1c
.BI "QWidget * \fBcentralWidget\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetDockEnabled\fR ( Dock dock, bool enable )"
.br
.ti -1c
.BI "bool \fBisDockEnabled\fR ( Dock dock ) const"
.br
.ti -1c
.BI "bool \fBisDockEnabled\fR ( QDockArea * area ) const"
.br
.ti -1c
.BI "virtual void \fBsetDockEnabled\fR ( QDockWindow * dw, Dock dock, bool enable )"
.br
.ti -1c
.BI "bool \fBisDockEnabled\fR ( QDockWindow * tb, Dock dock ) const"
.br
.ti -1c
.BI "bool \fBisDockEnabled\fR ( QDockWindow * dw, QDockArea * area ) const"
.br
.ti -1c
.BI "virtual void \fBaddDockWindow\fR ( QDockWindow * dockWindow, Dock edge = DockTop, bool newLine = FALSE )"
.br
.ti -1c
.BI "virtual void \fBaddDockWindow\fR ( QDockWindow * dockWindow, const QString & label, Dock edge = DockTop, bool newLine = FALSE )"
.br
.ti -1c
.BI "virtual void \fBmoveDockWindow\fR ( QDockWindow * dockWindow, Dock edge = DockTop )"
.br
.ti -1c
.BI "virtual void \fBmoveDockWindow\fR ( QDockWindow * dockWindow, Dock edge, bool nl, int index, int extraOffset = -1 )"
.br
.ti -1c
.BI "virtual void \fBremoveDockWindow\fR ( QDockWindow * dockWindow )"
.br
.ti -1c
.BI "bool rightJustification () const  \fI(obsolete)\fR"
.br
.ti -1c
.BI "bool \fBusesBigPixmaps\fR () const"
.br
.ti -1c
.BI "bool \fBusesTextLabel\fR () const"
.br
.ti -1c
.BI "bool \fBdockWindowsMovable\fR () const"
.br
.ti -1c
.BI "bool \fBopaqueMoving\fR () const"
.br
.ti -1c
.BI "bool \fBgetLocation\fR ( QDockWindow * dw, Dock & dock, int & index, bool & nl, int & extraOffset ) const"
.br
.ti -1c
.BI "QPtrList<QDockWindow> \fBdockWindows\fR ( Dock dock ) const"
.br
.ti -1c
.BI "QPtrList<QDockWindow> \fBdockWindows\fR () const"
.br
.ti -1c
.BI "void \fBlineUpDockWindows\fR ( bool keepNewLines = FALSE )"
.br
.ti -1c
.BI "bool \fBisDockMenuEnabled\fR () const"
.br
.ti -1c
.BI "bool \fBhasDockWindow\fR ( QDockWindow * dw )"
.br
.ti -1c
.BI "void addToolBar ( QDockWindow *, Dock = DockTop, bool newLine = FALSE )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "void addToolBar ( QDockWindow *, const QString & label, Dock = DockTop, bool newLine = FALSE )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "void moveToolBar ( QDockWindow *, Dock = DockTop )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "void moveToolBar ( QDockWindow *, Dock, bool nl, int index, int extraOffset = -1 )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "void removeToolBar ( QDockWindow * )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "bool toolBarsMovable () const  \fI(obsolete)\fR"
.br
.ti -1c
.BI "QPtrList<QToolBar> \fBtoolBars\fR ( Dock dock ) const"
.br
.ti -1c
.BI "void lineUpToolBars ( bool keepNewLines = FALSE )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "QDockArea * \fBleftDock\fR () const"
.br
.ti -1c
.BI "QDockArea * \fBrightDock\fR () const"
.br
.ti -1c
.BI "QDockArea * \fBtopDock\fR () const"
.br
.ti -1c
.BI "QDockArea * \fBbottomDock\fR () const"
.br
.ti -1c
.BI "virtual bool \fBisCustomizable\fR () const"
.br
.ti -1c
.BI "bool \fBappropriate\fR ( QDockWindow * dw ) const"
.br
.ti -1c
.BI "enum \fBDockWindows\fR { OnlyToolBars, NoToolBars, AllDockWindows }"
.br
.ti -1c
.BI "QPopupMenu * \fBcreateDockWindowMenu\fR ( DockWindows dockWindows = AllDockWindows ) const"
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "virtual void setRightJustification ( bool )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "virtual void \fBsetUsesBigPixmaps\fR ( bool )"
.br
.ti -1c
.BI "virtual void \fBsetUsesTextLabel\fR ( bool )"
.br
.ti -1c
.BI "virtual void \fBsetDockWindowsMovable\fR ( bool )"
.br
.ti -1c
.BI "virtual void \fBsetOpaqueMoving\fR ( bool )"
.br
.ti -1c
.BI "virtual void \fBsetDockMenuEnabled\fR ( bool b )"
.br
.ti -1c
.BI "virtual void \fBwhatsThis\fR ()"
.br
.ti -1c
.BI "virtual void \fBsetAppropriate\fR ( QDockWindow * dw, bool a )"
.br
.ti -1c
.BI "virtual void \fBcustomize\fR ()"
.br
.ti -1c
.BI "void setToolBarsMovable ( bool )  \fI(obsolete)\fR"
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void \fBpixmapSizeChanged\fR ( bool )"
.br
.ti -1c
.BI "void \fBusesTextLabelChanged\fR ( bool )"
.br
.ti -1c
.BI "void \fBdockWindowPositionChanged\fR ( QDockWindow * dockWindow )"
.br
.ti -1c
.BI "void toolBarPositionChanged ( QToolBar * )  \fI(obsolete)\fR"
.br
.in -1c
.SS "Properties"
.in +1c
.ti -1c
.BI "bool \fBdockWindowsMovable\fR - whether the dock windows are movable"
.br
.ti -1c
.BI "bool \fBopaqueMoving\fR - whether dock windows are moved opaquely"
.br
.ti -1c
.BI "bool rightJustification - whether the main window right-justifies its dock windows  \fI(obsolete)\fR"
.br
.ti -1c
.BI "bool \fBusesBigPixmaps\fR - whether big pixmaps are enabled"
.br
.ti -1c
.BI "bool \fBusesTextLabel\fR - whether text labels for toolbar buttons are enabled"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual void \fBchildEvent\fR ( QChildEvent * e )"
.br
.in -1c
.SS "Protected Slots"
.in +1c
.ti -1c
.BI "virtual void \fBsetUpLayout\fR ()"
.br
.ti -1c
.BI "virtual bool \fBshowDockMenu\fR ( const QPoint & globalPos )"
.br
.ti -1c
.BI "void \fBmenuAboutToShow\fR ()"
.br
.in -1c
.SH RELATED FUNCTION DOCUMENTATION
.in +1c
.ti -1c
.BI "QTextStream & \fBoperator<<\fR ( QTextStream & ts, const QMainWindow & mainWindow )"
.br
.ti -1c
.BI "QTextStream & \fBoperator>>\fR ( QTextStream & ts, QMainWindow & mainWindow )"
.br
.in -1c
.SH DESCRIPTION
The QMainWindow class provides a main application window, with a menu bar, dock windows (e.g. for toolbars), and a status bar.
.PP
Main windows are most often used to provide menus, toolbars and a status bar around a large central widget, such as a text edit, drawing canvas or QWorkspace (for MDI applications). QMainWindow is usually subclassed since this makes it easier to encapsulate the central widget, menus and toolbars as well as the window's state. Subclassing makes it possible to create the slots that are called when the user clicks menu items or toolbar buttons. You can also create main windows using Qt Designer. We'll briefly review adding menu items and toolbar buttons then describe the facilities of QMainWindow itself.
.PP
.nf
.br
    QMainWindow *mw = new QMainWindow;
.br
    QTextEdit *edit = new QTextEdit( mw, "editor" );
.br
    edit->setFocus();
.br
    mw->setCaption( "Main Window" );
.br
    mw->setCentralWidget( edit );
.br
    mw->show();
.br
.fi
.PP
QMainWindows may be created in their own right as shown above. The central widget is set with setCentralWidget(). Popup menus can be added to the default menu bar, widgets can be added to the status bar, toolbars and dock windows can be added to any of the dock areas.
.PP
.nf
.br
        ApplicationWindow *mw = new ApplicationWindow();
.br
        mw->setCaption( "Qt Example - Application" );
.br
        mw->show();
.fi
.PP
In the extract above ApplicationWindow is a subclass of QMainWindow that we must write for ourselves; this is the usual approach to using QMainWindow. (The source for the extracts in this description are taken from application/main.cpp, application/application.cpp, action/main.cpp, and action/application.cpp )
.PP
When subclassing we add the menu items and toolbars in the subclass's constructor. If we've created a QMainWindow instance directly we can add menu items and toolbars just as easily by passing the QMainWindow instance as the parent instead of the \fIthis\fR pointer.
.PP
.nf
.br
        QPopupMenu * help = new QPopupMenu( this );
.br
        menuBar()->insertItem( "&Help", help );
.br
.br
        help->insertItem( "&About", this, SLOT(about()), Key_F1 );
.fi
.PP
Here we've added a new menu with one menu item. The menu has been inserted into the menu bar that QMainWindow provides by default and which is accessible through the menuBar() function. The slot will be called when the menu item is clicked.
.PP
.nf
.br
        QToolBar * fileTools = new QToolBar( this, "file operations" );
.br
        fileTools->setLabel( "File Operations" );
.fi
.PP
.nf
.br
        QToolButton * fileOpen
.br
            = new QToolButton( openIcon, "Open File", QString::null,
.br
                               this, SLOT(choose()), fileTools, "open file" );
.fi
.PP
This extract shows the creation of a toolbar with one toolbar button. QMainWindow supplies four dock areas for toolbars. When a toolbar is created as a child of a QMainWindow (or derived class) instance it will be placed in a dock area (the Top dock area by default). The slot will be called when the toolbar button is clicked. Any dock window can be added to a dock area either using addDockWindow(), or by creating a dock window with the QMainWindow as the parent.
.PP
.nf
.br
        e = new QTextEdit( this, "editor" );
.br
        e->setFocus();
.br
        setCentralWidget( e );
.br
        statusBar()->message( "Ready", 2000 );
.fi
.PP
Having created the menus and toolbar we create an instance of the large central widget, give it the focus and set it as the main window's central widget. In the example we've also set the status bar, accessed via the statusBar() function, to an initial message which will be displayed for two seconds. Note that you can add additional widgets to the status bar, for example labels, to show further status information. See the QStatusBar documentation for details, particularly the addWidget() function.
.PP
Often we want to synchronize a toolbar button with a menu item. For example, if the user clicks a 'bold' toolbar button we want the 'bold' menu item to be checked. This synchronization can be achieved automatically by creating actions and adding the actions to the toolbar and menu.
.PP
.nf
.br
        QAction * fileOpenAction;
.fi
.PP
.nf
.br
        fileOpenAction = new QAction( QPixmap( fileopen ), "&Open...",
.br
                                      CTRL+Key_O, this, "open" );
.br
        connect( fileOpenAction, SIGNAL( activated() ) , this, SLOT( choose() ) );
.fi
.PP
Here we create an action with an icon which will be used in any menu and toolbar that the action is added to. We've also given the action a menu name, '&Open', and a keyboard shortcut. The connection that we have made will be used when the user clicks either the menu item \fIor\fR the toolbar button.
.PP
.nf
.br
        QPopupMenu * file = new QPopupMenu( this );
.br
        menuBar()->insertItem( "&File", file );
.fi
.PP
.nf
.br
        fileOpenAction->addTo( file );
.fi
.PP
The extract above shows the creation of a popup menu. We add the menu to the QMainWindow's menu bar and add our action.
.PP
.nf
.br
        QToolBar * fileTools = new QToolBar( this, "file operations" );
.br
        fileTools->setLabel( "File Operations" );
.br
        fileOpenAction->addTo( fileTools );
.fi
.PP
Here we create a new toolbar as a child of the QMainWindow and add our action to the toolbar.
.PP
We'll now explore the functionality offered by QMainWindow.
.PP
The main window will take care of the dock areas, and the geometry of the central widget, but all other aspects of the central widget are left to you. QMainWindow automatically detects the creation of a menu bar or status bar if you specify the QMainWindow as parent, or you can use the provided menuBar() and statusBar() functions. The functions menuBar() and statusBar() create a suitable widget if one doesn't exist, and update the window's layout to make space.
.PP
QMainWindow provides a QToolTipGroup connected to the status bar. The function toolTipGroup() provides access to the default QToolTipGroup. It isn't possible to set a different tool tip group.
.PP
New dock windows and toolbars can be added to a QMainWindow using addDockWindow(). Dock windows can be moved using moveDockWindow() and removed with removeDockWindow(). QMainWindow allows default dock window (toolbar) docking in all its dock areas (Top, Left, Right, Bottom). You can use setDockEnabled() to enable and disable docking areas for dock windows. When adding or moving dock windows you can specify their 'edge' (dock area). The currently available edges are: Top, Left, Right, Bottom, Minimized (effectively a 'hidden' dock area) and TornOff (floating). See Qt::Dock for an explanation of these areas. Note that the *ToolBar functions are included for backward compatibility; all new code should use the *DockWindow functions. QToolbar is a subclass of QDockWindow so all functions that work with dock windows work on toolbars in the same way.
.PP
If the user clicks the close button, then the dock window is hidden. A dock window can be hidden or unhidden by the user by right clicking a dock area and clicking the name of the relevant dock window on the pop up dock window menu. This menu lists the names of every dock window; visible dock windows have a tick beside their names. The dock window menu is created automatically as required by createDockWindowMenu(). Since it may not always be appropriate for a dock window to appear on this menu the setAppropriate() function is used to inform the main window whether or not the dock window menu should include a particular dock window. Double clicking a dock window handle (usually on the left-hand side of the dock window) undocks (floats) the dock window. Double clicking a floating dock window's titlebar will dock the floating dock window. (See also QMainWindow::DockWindows.)
.PP
Some functions change the appearance of a QMainWindow globally:
.TP
QDockWindow::setHorizontalStretchable() and QDockWindow::setVerticalStretchable() are used to make specific dock windows or toolbars stretchable.
.TP
setUsesBigPixmaps() is used to set whether tool buttons should draw small or large pixmaps (see QIconSet for more information).
.TP
setUsesTextLabel() is used to set whether tool buttons should display a textual label in addition to pixmaps (see QToolButton for more information).
.PP
The user can drag dock windows into any enabled docking area. Dock windows can also be dragged \fIwithin\fR a docking area, for example to rearrange the order of some toolbars. Dock windows can also be dragged outside any docking area (undocked or 'floated'). Being able to drag dock windows can be enabled (the default) and disabled using setDockWindowsMovable().
.PP
The Minimized edge is a hidden dock area. If this dock area is enabled the user can hide (minimize) a dock window or show (restore) a minimized dock window by clicking the dock window handle. If the user hovers the mouse cursor over one of the handles, the caption of the dock window is displayed in a tool tip (see QDockWindow::caption() or QToolBar::label()), so if you enable the Minimized dock area, it is best to specify a meaningful caption or label for each dock window. To minimize a dock window programmatically use moveDockWindow() with an edge of Minimized.
.PP
Dock windows are moved transparently by default, i.e. during the drag an outline rectangle is drawn on the screen representing the position of the dock window as it moves. If you want the dock window to be shown normally whilst it is moved use setOpaqueMoving().
.PP
The location of a dock window, i.e. its dock area and position within the dock area, can be determined by calling getLocation(). Movable dock windows can be lined up to minimize wasted space with lineUpDockWindows(). Pointers to the dock areas are available from topDock(), leftDock(), rightDock() and bottomDock(). A customize menu item is added to the pop up dock window menu if isCustomizable() returns TRUE; it returns FALSE by default. Reimplement isCustomizable() and customize() if you want to offer this extra menu item, for example, to allow the user to change settings relating to the main window and its toolbars and dock windows.
.PP
The main window's menu bar is fixed (at the top) by default. If you want a movable menu bar, create a QMenuBar as a stretchable widget inside its own movable dock window and restrict this dock window to only live within the Top or Bottom dock:
.PP
.nf
.br
    QToolBar *tb = new QToolBar( this );
.br
    addDockWindow( tb, tr( "Menubar" ), Top, FALSE );
.br
    QMenuBar *mb = new QMenuBar( tb );
.br
    mb->setFrameStyle( QFrame::NoFrame );
.br
    tb->setStretchableWidget( mb );
.br
    setDockEnabled( tb, Left, FALSE );
.br
    setDockEnabled( tb, Right, FALSE );
.br
.fi
.PP
An application with multiple dock windows can choose to save the current dock window layout in order to restore it later, e.g. in the next session. You can do this by using the streaming operators for QMainWindow.
.PP
To save the layout and positions of all the dock windows do this:
.PP
.nf
.br
    QFile file( filename );
.br
    if ( file.open( IO_WriteOnly ) ) {
.br
        QTextStream stream( &file );
.br
        stream << *mainWindow;
.br
        file.close();
.br
    }
.br
.fi
.PP
To restore the dock window positions and sizes (normally when the application is next started), do following:
.PP
.nf
.br
    QFile file( filename );
.br
    if ( file.open( IO_ReadOnly ) ) {
.br
        QTextStream stream( &file );
.br
        stream >> *mainWindow;
.br
        file.close();
.br
    }
.br
.fi
.PP
The QSettings class can be used in conjunction with the streaming operators to store the application's settings.
.PP
QMainWindow's management of dock windows and toolbars is done transparently behind-the-scenes by QDockArea.
.PP
For multi-document interfaces (MDI), use a QWorkspace as the central widget.
.PP
Adding dock windows, e.g. toolbars, to QMainWindow's dock areas is straightforward. If the supplied dock areas are not sufficient for your application we suggest that you create a QWidget subclass and add your own dock areas (see QDockArea) to the subclass since QMainWindow provides functionality specific to the standard dock areas it provides.
.PP
.ce 1
.B "[Image Omitted]"
.PP

.ce 1
.B "[Image Omitted]"
.PP
See also QToolBar, QDockWindow, QStatusBar, QAction, QMenuBar, QPopupMenu, QToolTipGroup, QDialog, and Main Window and Related Classes.
.SS "Member Type Documentation"
.SH "QMainWindow::DockWindows"
Right-clicking a dock area will pop-up the dock window menu (createDockWindowMenu() is called automatically). When called in code you can specify what items should appear on the menu with this enum.
.TP
\fCQMainWindow::OnlyToolBars\fR - The menu will list all the toolbars, but not any other dock windows.
.TP
\fCQMainWindow::NoToolBars\fR - The menu will list dock windows but not toolbars.
.TP
\fCQMainWindow::AllDockWindows\fR - The menu will list all toolbars and other dock windows. (This is the default.)
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QMainWindow::QMainWindow ( QWidget * parent = 0, const char * name = 0, WFlags f = WType_TopLevel )"
Constructs an empty main window. The \fIparent\fR, \fIname\fR and widget flags \fIf\fR, are passed on to the QWidget constructor.
.PP
By default, the widget flags are set to WType_TopLevel rather than 0 as they are with QWidget. If you don't want your QMainWindow to be a top level widget then you will need to set \fIf\fR to 0.
.SH "QMainWindow::~QMainWindow ()"
Destroys the object and frees any allocated resources.
.SH "void QMainWindow::addDockWindow ( QDockWindow * dockWindow, Dock edge = DockTop, bool newLine = FALSE )\fC [virtual]\fR"
Adds \fIdockWindow\fR to the \fIedge\fR dock area.
.PP
If \fInewLine\fR is FALSE (the default) then the \fIdockWindow\fR is added at the end of the \fIedge\fR. For vertical edges the end is at the bottom, for horizontal edges (including Minimized) the end is at the right. If \fInewLine\fR is TRUE a new line of dock windows is started with \fIdockWindow\fR as the first (left-most and top-most) dock window.
.PP
If \fIdockWindow\fR is managed by another main window, it is first removed from that window.
.SH "void QMainWindow::addDockWindow ( QDockWindow * dockWindow, const QString & label, Dock edge = DockTop, bool newLine = FALSE )\fC [virtual]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Adds \fIdockWindow\fR to the dock area with label \fIlabel\fR.
.PP
If \fInewLine\fR is FALSE (the default) the \fIdockWindow\fR is added at the end of the \fIedge\fR. For vertical edges the end is at the bottom, for horizontal edges (including Minimized) the end is at the right. If \fInewLine\fR is TRUE a new line of dock windows is started with \fIdockWindow\fR as the first (left-most and top-most) dock window.
.PP
If \fIdockWindow\fR is managed by another main window, it is first removed from that window.
.SH "void QMainWindow::addToolBar ( QDockWindow *, Dock = DockTop, bool newLine = FALSE )"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.SH "void QMainWindow::addToolBar ( QDockWindow *, const QString & label, Dock = DockTop, bool newLine = FALSE )"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.SH "bool QMainWindow::appropriate ( QDockWindow * dw ) const"
Returns TRUE if it is appropriate to include a menu item for the \fIdw\fR dock window in the dock window menu; otherwise returns FALSE.
.PP
The user is able to change the state (show or hide) a dock window that has a menu item by clicking the item.
.PP
Call setAppropriate() to indicate whether or not a particular dock window should appear on the popup menu.
.PP
See also setAppropriate().
.SH "QDockArea * QMainWindow::bottomDock () const"
Returns a pointer the Bottom dock area
.PP
See also topDock(), leftDock(), and rightDock().
.SH "QWidget * QMainWindow::centralWidget () const"
Returns a pointer to the main window's central widget.
.PP
The central widget is surrounded by the left, top, right and bottom dock areas. The menu bar is above the top dock area.
.PP
See also setCentralWidget().
.PP
Example: qfd/qfd.cpp.
.SH "void QMainWindow::childEvent ( QChildEvent * e )\fC [virtual protected]\fR"
Monitors events, recieved in \fIe\fR, to ensure the layout is updated.
.PP
Reimplemented from QObject.
.SH "QPopupMenu * QMainWindow::createDockWindowMenu ( DockWindows dockWindows = AllDockWindows ) const"
Creates the dock window menu which contains all toolbars (if \fIdockWindows\fR is OnlyToolBars ), all dock windows (if \fIdockWindows\fR is NoToolBars) or all toolbars and dock windows (if \fIdockWindows\fR is AllDockWindows - the default).
.PP
This function is called internally when necessary, e.g. when the user right clicks a dock area (providing isDockMenuEnabled() returns TRUE).
.PP
The menu items representing the toolbars and dock windows are checkable. The visible dock windows are checked and the hidden dock windows are unchecked. The user can click a menu item to change its state (show or hide the dock window).
.PP
The list and the state are always kept up-to-date.
.PP
Toolbars and dock windows which are not appropriate in the current context (see setAppropriate()) are not listed in the menu.
.PP
The menu also has a menu item for lining up the dock windows.
.PP
If isCustomizable() returns TRUE, a Customize menu item is added to the menu, which if clicked will call customize(). The isCustomizable() function we provide returns FALSE and customize() does nothing, so they must be reimplemented in a subclass to be useful.
.SH "void QMainWindow::customize ()\fC [virtual slot]\fR"
This function is called when the user clicks the Customize menu item on the dock window menu.
.PP
The customize menu item will only appear if isCustomizable() returns TRUE (it returns FALSE by default).
.PP
The function is intended, for example, to provide the user with a means of telling the application that they wish to customize the main window, dock windows or dock areas.
.PP
The default implementation does nothing and the Customize menu item is not shown on the right-click menu by default. If you want the item to appear then reimplement isCustomizable() to return TRUE, and reimplement this function to do whatever you want.
.PP
See also isCustomizable().
.SH "void QMainWindow::dockWindowPositionChanged ( QDockWindow * dockWindow )\fC [signal]\fR"
This signal is emitted when the \fIdockWindow\fR has changed its position. A change in position occurs when a dock window is moved within its dock area or moved to another dock area (including the Minimized and \fCTearOff\fR dock areas).
.PP
See also getLocation().
.SH "QPtrList<QDockWindow> QMainWindow::dockWindows ( Dock dock ) const"
Returns a list of all the dock windows which are in the \fIdock\fR dock area, regardless of their state.
.PP
For example, the DockTornOff dock area may contain closed dock windows but these are returned along with the visible dock windows.
.SH "QPtrList<QDockWindow> QMainWindow::dockWindows () const"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Returns the list of dock windows which belong to this main window, regardless of which dock area they are in or what their state is, (e.g. irrespective of whether they are visible or not).
.SH "bool QMainWindow::dockWindowsMovable () const"
Returns TRUE if the dock windows are movable; otherwise returns FALSE. See the "dockWindowsMovable" property for details.
.SH "bool QMainWindow::getLocation ( QDockWindow * dw, Dock & dock, int & index, bool & nl, int & extraOffset ) const"
Finds the location of the dock window \fIdw\fR.
.PP
If the \fIdw\fR dock window is found in the main window the function returns TRUE and populates the \fIdock\fR variable with the dw's dock area and the \fIindex\fR with the dw's position within the dock area. It also sets \fInl\fR to TRUE if the \fIdw\fR begins a new line (otherwise FALSE), and \fIextraOffset\fR with the dock window's offset.
.PP
If the \fIdw\fR dock window is not found then the function returns FALSE and the state of \fIdock\fR, \fIindex\fR, \fInl\fR and \fIextraOffset\fR is undefined.
.PP
If you want to save and restore dock window positions then use operator>>() and operator<<().
.PP
See also operator>>() and operator<<().
.SH "bool QMainWindow::hasDockWindow ( QDockWindow * dw )"
Returns TRUE if \fIdw\fR is a dock window known to the main window; otherwise returns FALSE.
.SH "bool QMainWindow::isCustomizable () const\fC [virtual]\fR"
Returns TRUE if the dock area dock window menu includes the Customize menu item (which calls customize() when clicked). Returns FALSE by default, i.e. the popup menu will not contain a Customize menu item. You will need to reimplement this function and set it to return TRUE if you wish the user to be able to see the dock window menu.
.PP
See also customize().
.SH "bool QMainWindow::isDockEnabled ( Dock dock ) const"
Returns TRUE if the \fIdock\fR dock area is enabled, i.e. it can accept user dragged dock windows; otherwise returns FALSE.
.PP
See also setDockEnabled().
.SH "bool QMainWindow::isDockEnabled ( QDockArea * area ) const"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Returns TRUE if dock area \fIarea\fR is enabled, i.e. it can accept user dragged dock windows; otherwise returns FALSE.
.PP
See also setDockEnabled().
.SH "bool QMainWindow::isDockEnabled ( QDockWindow * tb, Dock dock ) const"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Returns TRUE if dock area \fIdock\fR is enabled for the dock window \fItb\fR; otherwise returns FALSE.
.PP
See also setDockEnabled().
.SH "bool QMainWindow::isDockEnabled ( QDockWindow * dw, QDockArea * area ) const"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Returns TRUE if dock area \fIarea\fR is enabled for the dock window \fIdw\fR; otherwise returns FALSE.
.PP
See also setDockEnabled().
.SH "bool QMainWindow::isDockMenuEnabled () const"
Returns TRUE, if the dock window menu is enabled; otherwise returns FALSE.
.PP
The menu lists the (appropriate()) dock windows (which may be shown or hidden), and has a "Line Up Dock Windows" menu item. It will also have a "Customize" menu item if isCustomizable() returns TRUE.
.PP
See also setDockEnabled(), lineUpDockWindows(), appropriate(), and setAppropriate().
.SH "QDockArea * QMainWindow::leftDock () const"
Returns the Left dock area
.PP
See also rightDock(), topDock(), and bottomDock().
.SH "void QMainWindow::lineUpDockWindows ( bool keepNewLines = FALSE )"
This function will line up dock windows within the visible dock areas (Top, Left, Right and Bottom) as compactly as possible.
.PP
If \fIkeepNewLines\fR is TRUE, all dock windows stay on their original lines. If \fIkeepNewLines\fR is FALSE then newlines may be removed to achieve the most compact layout possible.
.PP
The method only works if dockWindowsMovable() returns TRUE.
.SH "void QMainWindow::lineUpToolBars ( bool keepNewLines = FALSE )"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.SH "void QMainWindow::menuAboutToShow ()\fC [protected slot]\fR"
This slot is called from the aboutToShow() signal of the default dock menu of the mainwindow. The default implementation initializes the menu with all dock windows and toolbars in this slot.
.SH "QMenuBar * QMainWindow::menuBar () const"
Returns the menu bar for this window.
.PP
If there isn't one, then menuBar() creates an empty menu bar.
.PP
See also statusBar().
.SH "void QMainWindow::moveDockWindow ( QDockWindow * dockWindow, Dock edge = DockTop )\fC [virtual]\fR"
Moves \fIdockWindow\fR to the end of the \fIedge\fR.
.PP
For vertical edges the end is at the bottom, for horizontal edges (including Minimized) the end is at the right.
.PP
If \fIdockWindow\fR is managed by another main window, it is first removed from that window.
.SH "void QMainWindow::moveDockWindow ( QDockWindow * dockWindow, Dock edge, bool nl, int index, int extraOffset = -1 )\fC [virtual]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Moves \fIdockWindow\fR to position \fIindex\fR within the \fIedge\fR dock area.
.PP
Any dock windows with positions \fIindex\fR or higher have their position number incremented and any of these on the same line are moved right (down for vertical dock areas) to make room.
.PP
If \fInl\fR is TRUE, a new dock window line is created below the line in which the moved dock window appears and the moved dock window, with any others with higher positions on the same line, is moved to this new line.
.PP
The \fIextraOffset\fR is the space to put between the left side of the dock area (top side for vertical dock areas) and the dock window. (This is mostly used for restoring dock windows to the positions the user has dragged them to.)
.PP
If \fIdockWindow\fR is managed by another main window, it is first removed from that window.
.SH "void QMainWindow::moveToolBar ( QDockWindow *, Dock = DockTop )"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.SH "void QMainWindow::moveToolBar ( QDockWindow *, Dock, bool nl, int index, int extraOffset = -1 )"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.SH "bool QMainWindow::opaqueMoving () const"
Returns TRUE if dock windows are moved opaquely; otherwise returns FALSE. See the "opaqueMoving" property for details.
.SH "void QMainWindow::pixmapSizeChanged ( bool )\fC [signal]\fR"
This signal is emitted whenever the setUsesBigPixmaps() is called with a value different to the current setting. All widgets that should respond to such changes, e.g. toolbar buttons, must connect to this signal.
.SH "void QMainWindow::removeDockWindow ( QDockWindow * dockWindow )\fC [virtual]\fR"
Removes \fIdockWindow\fR from the main window's docking area, provided \fIdockWindow\fR is non-null and managed by this main window.
.SH "void QMainWindow::removeToolBar ( QDockWindow * )"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.SH "QDockArea * QMainWindow::rightDock () const"
Returns the Right dock area
.PP
See also leftDock(), topDock(), and bottomDock().
.SH "bool QMainWindow::rightJustification () const"
Returns TRUE if the main window right-justifies its dock windows; otherwise returns FALSE. See the "rightJustification" property for details.
.SH "void QMainWindow::setAppropriate ( QDockWindow * dw, bool a )\fC [virtual slot]\fR"
Use this function to control whether or not the \fIdw\fR dock window's caption should appear as a menu item on the dock window menu that lists the dock windows.
.PP
If \fIa\fR is TRUE then the \fIdw\fR will appear as a menu item on the dock window menu. The user is able to change the state (show or hide) a dock window that has a menu item by clicking the item; depending on the state of your application, this may or may not be appropriate. If \fIa\fR is FALSE the \fIdw\fR will not appear on the popup menu.
.PP
See also showDockMenu(), isCustomizable(), and customize().
.SH "void QMainWindow::setCentralWidget ( QWidget * w )\fC [virtual]\fR"
Sets the central widget for this main window to \fIw\fR.
.PP
The central widget is surrounded by the left, top, right and bottom dock areas. The menu bar is above the top dock area.
.PP
See also centralWidget().
.SH "void QMainWindow::setDockEnabled ( Dock dock, bool enable )\fC [virtual]\fR"
If \fIenable\fR is TRUE then users can dock windows in the \fIdock\fR area. If \fIenable\fR is FALSE users cannot dock windows in the \fIdock\fR dock area.
.PP
Users can dock (drag) dock windows into any enabled dock area.
.SH "void QMainWindow::setDockEnabled ( QDockWindow * dw, Dock dock, bool enable )\fC [virtual]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
If \fIenable\fR is TRUE then users can dock the \fIdw\fR dock window in the \fIdock\fR area. If \fIenable\fR is FALSE users cannot dock the \fIdw\fR dock window in the \fIdock\fR area.
.PP
In general users can dock (drag) dock windows into any enabled dock area. Using this function particular dock areas can be enabled (or disabled) as docking points for particular dock windows.
.SH "void QMainWindow::setDockMenuEnabled ( bool b )\fC [virtual slot]\fR"
If \fIb\fR is TRUE, then right clicking on a dock window or dock area will pop up the dock window menu. If \fIb\fR is FALSE, right clicking a dock window or dock area will not pop up the menu.
.PP
The menu lists the (appropriate()) dock windows (which may be shown or hidden), and has a "Line Up Dock Windows" item. It will also have a "Customize" menu item if isCustomizable() returns TRUE.
.PP
See also lineUpDockWindows() and isDockMenuEnabled().
.SH "void QMainWindow::setDockWindowsMovable ( bool )\fC [virtual slot]\fR"
Sets whether the dock windows are movable. See the "dockWindowsMovable" property for details.
.SH "void QMainWindow::setOpaqueMoving ( bool )\fC [virtual slot]\fR"
Sets whether dock windows are moved opaquely. See the "opaqueMoving" property for details.
.SH "void QMainWindow::setRightJustification ( bool )\fC [virtual slot]\fR"
Sets whether the main window right-justifies its dock windows. See the "rightJustification" property for details.
.SH "void QMainWindow::setToolBarsMovable ( bool )\fC [slot]\fR"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.SH "void QMainWindow::setUpLayout ()\fC [virtual protected slot]\fR"
Sets up the geometry management of the window. It is called automatically when needed, so you shouldn't need to call it.
.SH "void QMainWindow::setUsesBigPixmaps ( bool )\fC [virtual slot]\fR"
Sets whether big pixmaps are enabled. See the "usesBigPixmaps" property for details.
.SH "void QMainWindow::setUsesTextLabel ( bool )\fC [virtual slot]\fR"
Sets whether text labels for toolbar buttons are enabled. See the "usesTextLabel" property for details.
.SH "bool QMainWindow::showDockMenu ( const QPoint & globalPos )\fC [virtual protected slot]\fR"
Shows the dock menu at the position \fIglobalPos\fR. The menu lists the dock windows so that they can be shown (or hidden), lined up, and possibly customized. Returns TRUE if the menu is shown; otherwise returns FALSE.
.PP
If you want a custom menu, reimplement this function. You can create the menu from scratch or call createDockWindowMenu() and modify the result.
.SH "QStatusBar * QMainWindow::statusBar () const"
Returns this main window's status bar. If there isn't one, statusBar() creates an empty status bar, and if necessary a tool tip group too.
.PP
See also menuBar() and toolTipGroup().
.PP
Example: qfd/qfd.cpp.
.SH "void QMainWindow::toolBarPositionChanged ( QToolBar * )\fC [signal]\fR"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.SH "QPtrList<QToolBar> QMainWindow::toolBars ( Dock dock ) const"
Returns a list of all the toolbars which are in the \fIdock\fR dock area, regardless of their state.
.PP
For example, the TornOff dock area may contain closed toolbars but these are returned along with the visible toolbars.
.PP
See also dockWindows().
.SH "bool QMainWindow::toolBarsMovable () const"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.SH "QToolTipGroup * QMainWindow::toolTipGroup () const"
Returns this main window's tool tip group. If there isn't one, toolTipGroup() creates an empty tool tip group.
.PP
See also menuBar() and statusBar().
.SH "QDockArea * QMainWindow::topDock () const"
Returns the Top dock area
.PP
See also bottomDock(), leftDock(), and rightDock().
.SH "bool QMainWindow::usesBigPixmaps () const"
Returns TRUE if big pixmaps are enabled; otherwise returns FALSE. See the "usesBigPixmaps" property for details.
.SH "bool QMainWindow::usesTextLabel () const"
Returns TRUE if text labels for toolbar buttons are enabled; otherwise returns FALSE. See the "usesTextLabel" property for details.
.SH "void QMainWindow::usesTextLabelChanged ( bool )\fC [signal]\fR"
This signal is emitted whenever the setUsesTextLabel() is called with a value different to the current setting. All widgets that should respond to such changes, e.g. toolbar buttons, must connect to this signal.
.SH "void QMainWindow::whatsThis ()\fC [virtual slot]\fR"
Enters 'What's This?' mode and returns immediately.
.PP
This is the same as QWhatsThis::enterWhatsThisMode(), but implemented as a main window object's slot. This way it can easily be used for popup menus, for example:
.PP
.nf
.br
    QPopupMenu * help = new QPopupMenu( this );
.br
    help->insertItem( "What's &This", this , SLOT(whatsThis()), SHIFT+Key_F1);
.br
.fi
.PP
See also QWhatsThis::enterWhatsThisMode().
.SS "Property Documentation"
.SH "bool dockWindowsMovable"
This property holds whether the dock windows are movable.
.PP
If TRUE (the default), the user will be able to move movable dock windows from one QMainWindow dock area to another, including the \fCTearOff\fR area (i.e. where the dock window floats freely as a window in its own right), and the Minimized area (where only the dock window's handle is shown below the menu bar). Moveable dock windows can also be moved within QMainWindow dock areas, i.e. to rearrange them within a dock area.
.PP
If FALSE the user will not be able to move any dock windows.
.PP
By default dock windows are moved transparently (i.e. only an outline rectangle is shown during the drag), but this setting can be changed with setOpaqueMoving().
.PP
See also setDockEnabled() and opaqueMoving.
.PP
Set this property's value with setDockWindowsMovable() and get this property's value with dockWindowsMovable().
.SH "bool opaqueMoving"
This property holds whether dock windows are moved opaquely.
.PP
If TRUE the dock windows of the main window are shown opaquely (i.e. it shows the toolbar as it looks when docked) whilst it is being moved. If FALSE (the default) they are shown transparently, (i.e. as an outline rectangle).
.PP
\fBWarning:\fR Opaque moving of toolbars and dockwindows is known to have several problems. We recommend avoiding the use of this feature for the time being. We intend fixing the problems in a future release.
.PP
Set this property's value with setOpaqueMoving() and get this property's value with opaqueMoving().
.SH "bool rightJustification"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
This property holds whether the main window right-justifies its dock windows.
.PP
If disabled (the default), stretchable dock windows are expanded, and non-stretchable dock windows are given the minimum space they need. Since most dock windows are not stretchable, this usually results in an unjustified right edge (or unjustified bottom edge for a vertical dock area). If enabled, the main window will right-justify its dock windows.
.PP
See also QDockWindow::setVerticalStretchable() and QDockWindow::setHorizontalStretchable().
.PP
Set this property's value with setRightJustification() and get this property's value with rightJustification().
.SH "bool usesBigPixmaps"
This property holds whether big pixmaps are enabled.
.PP
If FALSE (the default), the tool buttons will use small pixmaps; otherwise big pixmaps will be used.
.PP
Tool buttons and other widgets that wish to respond to this setting are responsible for reading the correct state on startup, and for connecting to the main window's widget's pixmapSizeChanged() signal.
.PP
Set this property's value with setUsesBigPixmaps() and get this property's value with usesBigPixmaps().
.SH "bool usesTextLabel"
This property holds whether text labels for toolbar buttons are enabled.
.PP
If disabled (the default), the tool buttons will not use text labels. If enabled, text labels will be used.
.PP
Tool buttons and other widgets that wish to respond to this setting are responsible for reading the correct state on startup, and for connecting to the main window's widget's usesTextLabelChanged() signal.
.PP
See also QToolButton::usesTextLabel.
.PP
Set this property's value with setUsesTextLabel() and get this property's value with usesTextLabel().
.SH RELATED FUNCTION DOCUMENTATION
.SH "QTextStream & operator<< ( QTextStream & ts, const QMainWindow & mainWindow )"
Writes the layout (sizes and positions) of the dock windows in the dock areas of the QMainWindow \fImainWindow\fR, including Minimized and TornOff dock windows, to the text stream \fIts\fR.
.PP
This can be used, for example, in conjunction with QSettings to save the user's layout when the \\mainWindow receives a closeEvent.
.PP
See also operator>>() and closeEvent().
.SH "QTextStream & operator>> ( QTextStream & ts, QMainWindow & mainWindow )"
Reads the layout (sizes and positions) of the dock windows in the dock areas of the QMainWindow \fImainWindow\fR from the text stream, \fIts\fR, including Minimized and TornOff dock windows. Restores the dock windows and dock areas to these sizes and positions. The layout information must be in the format produced by operator<<().
.PP
This can be used, for example, in conjunction with QSettings to restore the user's layout.
.PP
See also operator<<().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qmainwindow.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qmainwindow.3qt) and the Qt
version (3.3.8).
