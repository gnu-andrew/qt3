'\" t
.TH QDataStream 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QDataStream \- Serialization of binary data to a QIODevice
.SH SYNOPSIS
All the functions in this class are reentrant when Qt is built with thread support.</p>
.PP
\fC#include <qdatastream.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQDataStream\fR ()"
.br
.ti -1c
.BI "\fBQDataStream\fR ( QIODevice * d )"
.br
.ti -1c
.BI "\fBQDataStream\fR ( QByteArray a, int mode )"
.br
.ti -1c
.BI "virtual \fB~QDataStream\fR ()"
.br
.ti -1c
.BI "QIODevice * \fBdevice\fR () const"
.br
.ti -1c
.BI "void \fBsetDevice\fR ( QIODevice * d )"
.br
.ti -1c
.BI "void \fBunsetDevice\fR ()"
.br
.ti -1c
.BI "bool \fBatEnd\fR () const"
.br
.ti -1c
.BI "bool eof () const  \fI(obsolete)\fR"
.br
.ti -1c
.BI "enum \fBByteOrder\fR { BigEndian, LittleEndian }"
.br
.ti -1c
.BI "int \fBbyteOrder\fR () const"
.br
.ti -1c
.BI "void \fBsetByteOrder\fR ( int bo )"
.br
.ti -1c
.BI "bool \fBisPrintableData\fR () const"
.br
.ti -1c
.BI "void \fBsetPrintableData\fR ( bool enable )"
.br
.ti -1c
.BI "int \fBversion\fR () const"
.br
.ti -1c
.BI "void \fBsetVersion\fR ( int v )"
.br
.ti -1c
.BI "QDataStream & \fBoperator>>\fR ( Q_INT8 & i )"
.br
.ti -1c
.BI "QDataStream & \fBoperator>>\fR ( Q_UINT8 & i )"
.br
.ti -1c
.BI "QDataStream & \fBoperator>>\fR ( Q_INT16 & i )"
.br
.ti -1c
.BI "QDataStream & \fBoperator>>\fR ( Q_UINT16 & i )"
.br
.ti -1c
.BI "QDataStream & \fBoperator>>\fR ( Q_INT32 & i )"
.br
.ti -1c
.BI "QDataStream & \fBoperator>>\fR ( Q_UINT32 & i )"
.br
.ti -1c
.BI "QDataStream & \fBoperator>>\fR ( Q_INT64 & i )"
.br
.ti -1c
.BI "QDataStream & \fBoperator>>\fR ( Q_UINT64 & i )"
.br
.ti -1c
.BI "QDataStream & \fBoperator>>\fR ( Q_LONG & i )"
.br
.ti -1c
.BI "QDataStream & \fBoperator>>\fR ( Q_ULONG & i )"
.br
.ti -1c
.BI "QDataStream & \fBoperator>>\fR ( float & f )"
.br
.ti -1c
.BI "QDataStream & \fBoperator>>\fR ( double & f )"
.br
.ti -1c
.BI "QDataStream & \fBoperator>>\fR ( char *& s )"
.br
.ti -1c
.BI "QDataStream & \fBoperator<<\fR ( Q_INT8 i )"
.br
.ti -1c
.BI "QDataStream & \fBoperator<<\fR ( Q_UINT8 i )"
.br
.ti -1c
.BI "QDataStream & \fBoperator<<\fR ( Q_INT16 i )"
.br
.ti -1c
.BI "QDataStream & \fBoperator<<\fR ( Q_UINT16 i )"
.br
.ti -1c
.BI "QDataStream & \fBoperator<<\fR ( Q_INT32 i )"
.br
.ti -1c
.BI "QDataStream & \fBoperator<<\fR ( Q_UINT32 i )"
.br
.ti -1c
.BI "QDataStream & \fBoperator<<\fR ( Q_INT64 i )"
.br
.ti -1c
.BI "QDataStream & \fBoperator<<\fR ( Q_UINT64 i )"
.br
.ti -1c
.BI "QDataStream & \fBoperator<<\fR ( Q_LONG i )"
.br
.ti -1c
.BI "QDataStream & \fBoperator<<\fR ( Q_ULONG i )"
.br
.ti -1c
.BI "QDataStream & \fBoperator<<\fR ( float f )"
.br
.ti -1c
.BI "QDataStream & \fBoperator<<\fR ( double f )"
.br
.ti -1c
.BI "QDataStream & \fBoperator<<\fR ( const char * s )"
.br
.ti -1c
.BI "QDataStream & \fBreadBytes\fR ( char *& s, uint & l )"
.br
.ti -1c
.BI "QDataStream & \fBreadRawBytes\fR ( char * s, uint len )"
.br
.ti -1c
.BI "QDataStream & \fBwriteBytes\fR ( const char * s, uint len )"
.br
.ti -1c
.BI "QDataStream & \fBwriteRawBytes\fR ( const char * s, uint len )"
.br
.in -1c
.SH DESCRIPTION
The QDataStream class provides serialization of binary data to a QIODevice.
.PP
A data stream is a binary stream of encoded information which is 100% independent of the host computer's operating system, CPU or byte order. For example, a data stream that is written by a PC under Windows can be read by a Sun SPARC running Solaris.
.PP
You can also use a data stream to read/write raw unencoded binary data. If you want a "parsing" input stream, see QTextStream.
.PP
The QDataStream class implements the serialization of C++'s basic data types, like \fCchar\fR, \fCshort\fR, \fCint\fR, \fCchar*\fR, etc. Serialization of more complex data is accomplished by breaking up the data into primitive units.
.PP
A data stream cooperates closely with a QIODevice. A QIODevice represents an input/output medium one can read data from and write data to. The QFile class is an example of an IO device.
.PP
Example (write binary data to a stream):
.PP
.nf
.br
    QFile file( "file.dat" );
.br
    file.open( IO_WriteOnly );
.br
    QDataStream stream( &file ); // we will serialize the data into the file
.br
    stream << "the answer is";   // serialize a string
.br
    stream << (Q_INT32)42;       // serialize an integer
.br
.fi
.PP
Example (read binary data from a stream):
.PP
.nf
.br
    QFile file( "file.dat" );
.br
    file.open( IO_ReadOnly );
.br
    QDataStream stream( &file );  // read the data serialized from the file
.br
    QString str;
.br
    Q_INT32 a;
.br
    stream >> str >> a;           // extract "the answer is" and 42
.br
.fi
.PP
Each item written to the stream is written in a predefined binary format that varies depending on the item's type. Supported Qt types include QBrush, QColor, QDateTime, QFont, QPixmap, QString, QVariant and many others. For the complete list of all Qt types supporting data streaming see the Format of the QDataStream operators.
.PP
For integers it is best to always cast to a Qt integer type for writing, and to read back into the same Qt integer type. This ensures that you get integers of the size you want and insulates you from compiler and platform differences.
.PP
To take one example, a \fCchar*\fR string is written as a 32-bit integer equal to the length of the string including the NUL byte ('&#92;0'), followed by all the characters of the string including the NUL byte. When reading a \fCchar*\fR string, 4 bytes are read to create the 32-bit length value, then that many characters for the \fCchar*\fR string including the NUL are read.
.PP
The initial IODevice is usually set in the constructor, but can be changed with setDevice(). If you've reached the end of the data (or if there is no IODevice set) atEnd() will return TRUE.
.PP
If you want the data to be compatible with an earlier version of Qt use setVersion().
.PP
If you want the data to be human-readable, e.g. for debugging, you can set the data stream into printable data mode with setPrintableData(). The data is then written slower, in a bloated but human readable format.
.PP
If you are producing a new binary data format, such as a file format for documents created by your application, you could use a QDataStream to write the data in a portable format. Typically, you would write a brief header containing a magic string and a version number to give yourself room for future expansion. For example:
.PP
.nf
.br
    QFile file( "file.xxx" );
.br
    file.open( IO_WriteOnly );
.br
    QDataStream stream( &file );
.br
.br
    // Write a header with a "magic number" and a version
.br
    stream << (Q_UINT32)0xA0B0C0D0;
.br
    stream << (Q_INT32)123;
.br
.br
    // Write the data
.br
    stream << [lots of interesting data]
.br
.fi
.PP
Then read it in with:
.PP
.nf
.br
    QFile file( "file.xxx" );
.br
    file.open( IO_ReadOnly );
.br
    QDataStream stream( &file );
.br
.br
    // Read and check the header
.br
    Q_UINT32 magic;
.br
    stream >> magic;
.br
    if ( magic != 0xA0B0C0D0 )
.br
        return XXX_BAD_FILE_FORMAT;
.br
.br
    // Read the version
.br
    Q_INT32 version;
.br
    stream >> version;
.br
    if ( version < 100 )
.br
        return XXX_BAD_FILE_TOO_OLD;
.br
    if ( version > 123 )
.br
        return XXX_BAD_FILE_TOO_NEW;
.br
    if ( version <= 110 )
.br
        stream.setVersion(1);
.br
.br
    // Read the data
.br
    stream >> [lots of interesting data];
.br
    if ( version > 120 )
.br
        stream >> [data new in XXX version 1.2];
.br
    stream >> [other interesting data];
.br
.fi
.PP
You can select which byte order to use when serializing data. The default setting is big endian (MSB first). Changing it to little endian breaks the portability (unless the reader also changes to little endian). We recommend keeping this setting unless you have special requirements.
.SH "Reading and writing raw binary data"
You may wish to read/write your own raw binary data to/from the data stream directly. Data may be read from the stream into a preallocated char* using readRawBytes(). Similarly data can be written to the stream using writeRawBytes(). Notice that any encoding/decoding of the data must be done by you.
.PP
A similar pair of functions is readBytes() and writeBytes(). These differ from their \fIraw\fR counterparts as follows: readBytes() reads a Q_UINT32 which is taken to be the length of the data to be read, then that number of bytes is read into the preallocated char*; writeBytes() writes a Q_UINT32 containing the length of the data, followed by the data. Notice that any encoding/decoding of the data (apart from the length Q_UINT32) must be done by you.
.PP
See also QTextStream, QVariant, and Input/Output and Networking.
.SS "Member Type Documentation"
.SH "QDataStream::ByteOrder"
The byte order used for reading/writing the data.
.TP
\fCQDataStream::BigEndian\fR - the default
.TP
\fCQDataStream::LittleEndian\fR
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QDataStream::QDataStream ()"
Constructs a data stream that has no IO device.
.PP
See also setDevice().
.SH "QDataStream::QDataStream ( QIODevice * d )"
Constructs a data stream that uses the IO device \fId\fR.
.PP
\fBWarning:\fR If you use QSocket or QSocketDevice as the IO device \fId\fR for reading data, you must make sure that enough data is available on the socket for the operation to successfully proceed; QDataStream does not have any means to handle or recover from short-reads.
.PP
See also setDevice() and device().
.SH "QDataStream::QDataStream ( QByteArray a, int mode )"
Constructs a data stream that operates on a byte array, \fIa\fR, through an internal QBuffer device. The \fImode\fR is a QIODevice::mode(), usually either IO_ReadOnly or IO_WriteOnly.
.PP
Example:
.PP
.nf
.br
    static char bindata[] = { 231, 1, 44, ... };
.br
    QByteArray a;
.br
    a.setRawData( bindata, sizeof(bindata) );   // a points to bindata
.br
    QDataStream stream( a, IO_ReadOnly );       // open on a's data
.br
    stream >> [something];                      // read raw bindata
.br
    a.resetRawData( bindata, sizeof(bindata) ); // finished
.br
.fi
.PP
The QByteArray::setRawData() function is not for the inexperienced.
.SH "QDataStream::~QDataStream ()\fC [virtual]\fR"
Destroys the data stream.
.PP
The destructor will not affect the current IO device, unless it is an internal IO device processing a QByteArray passed in the \fIconstructor\fR, in which case the internal IO device is destroyed.
.SH "bool QDataStream::atEnd () const"
Returns TRUE if the IO device has reached the end position (end of the stream or file) or if there is no IO device set; otherwise returns FALSE, i.e. if the current position of the IO device is before the end position.
.PP
See also QIODevice::atEnd().
.SH "int QDataStream::byteOrder () const"
Returns the current byte order setting -- either BigEndian or LittleEndian.
.PP
See also setByteOrder().
.SH "QIODevice * QDataStream::device () const"
Returns the IO device currently set.
.PP
See also setDevice() and unsetDevice().
.SH "bool QDataStream::eof () const"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
Returns TRUE if the IO device has reached the end position (end of stream or file) or if there is no IO device set.
.PP
Returns FALSE if the current position of the read/write head of the IO device is somewhere before the end position.
.PP
See also QIODevice::atEnd().
.SH "bool QDataStream::isPrintableData () const"
Returns TRUE if the printable data flag has been set; otherwise returns FALSE.
.PP
See also setPrintableData().
.SH "QDataStream & QDataStream::operator<< ( Q_INT8 i )"
Writes a signed byte, \fIi\fR, to the stream and returns a reference to the stream.
.SH "QDataStream & QDataStream::operator<< ( Q_UINT8 i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes an unsigned byte, \fIi\fR, to the stream and returns a reference to the stream.
.SH "QDataStream & QDataStream::operator<< ( Q_INT16 i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes a signed 16-bit integer, \fIi\fR, to the stream and returns a reference to the stream.
.SH "QDataStream & QDataStream::operator<< ( Q_UINT16 i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes an unsigned 16-bit integer, \fIi\fR, to the stream and returns a reference to the stream.
.SH "QDataStream & QDataStream::operator<< ( Q_INT32 i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes a signed 32-bit integer, \fIi\fR, to the stream and returns a reference to the stream.
.SH "QDataStream & QDataStream::operator<< ( Q_UINT32 i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes an unsigned integer, \fIi\fR, to the stream as a 32-bit unsigned integer (Q_UINT32). Returns a reference to the stream.
.SH "QDataStream & QDataStream::operator<< ( Q_INT64 i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes a signed 64-bit integer, \fIi\fR, to the stream and returns a reference to the stream.
.SH "QDataStream & QDataStream::operator<< ( Q_UINT64 i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes an unsigned 64-bit integer, \fIi\fR, to the stream and returns a reference to the stream.
.SH "QDataStream & QDataStream::operator<< ( Q_LONG i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes a signed integer \fIi\fR, of the system's word length, to the stream and returns a reference to the stream.
.SH "QDataStream & QDataStream::operator<< ( Q_ULONG i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes an unsigned integer \fIi\fR, of the system's word length, to the stream and returns a reference to the stream.
.SH "QDataStream & QDataStream::operator<< ( float f )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes a 32-bit floating point number, \fIf\fR, to the stream using the standard IEEE754 format. Returns a reference to the stream.
.SH "QDataStream & QDataStream::operator<< ( double f )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes a 64-bit floating point number, \fIf\fR, to the stream using the standard IEEE754 format. Returns a reference to the stream.
.SH "QDataStream & QDataStream::operator<< ( const char * s )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Writes the '&#92;0'-terminated string \fIs\fR to the stream and returns a reference to the stream.
.PP
The string is serialized using writeBytes().
.SH "QDataStream & QDataStream::operator>> ( Q_INT8 & i )"
Reads a signed byte from the stream into \fIi\fR, and returns a reference to the stream.
.SH "QDataStream & QDataStream::operator>> ( Q_UINT8 & i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads an unsigned byte from the stream into \fIi\fR, and returns a reference to the stream.
.SH "QDataStream & QDataStream::operator>> ( Q_INT16 & i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads a signed 16-bit integer from the stream into \fIi\fR, and returns a reference to the stream.
.SH "QDataStream & QDataStream::operator>> ( Q_UINT16 & i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads an unsigned 16-bit integer from the stream into \fIi\fR, and returns a reference to the stream.
.SH "QDataStream & QDataStream::operator>> ( Q_INT32 & i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads a signed 32-bit integer from the stream into \fIi\fR, and returns a reference to the stream.
.SH "QDataStream & QDataStream::operator>> ( Q_UINT32 & i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads an unsigned 32-bit integer from the stream into \fIi\fR, and returns a reference to the stream.
.SH "QDataStream & QDataStream::operator>> ( Q_INT64 & i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads a signed 64-bit integer from the stream into \fIi\fR, and returns a reference to the stream.
.SH "QDataStream & QDataStream::operator>> ( Q_UINT64 & i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads an unsigned 64-bit integer from the stream, into \fIi\fR, and returns a reference to the stream.
.SH "QDataStream & QDataStream::operator>> ( Q_LONG & i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads a signed integer of the system's word length from the stream into \fIi\fR, and returns a reference to the stream.
.SH "QDataStream & QDataStream::operator>> ( Q_ULONG & i )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads an unsigned integer of the system's word length from the stream, into \fIi\fR, and returns a reference to the stream.
.SH "QDataStream & QDataStream::operator>> ( float & f )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads a 32-bit floating point number from the stream into \fIf\fR, using the standard IEEE754 format. Returns a reference to the stream.
.SH "QDataStream & QDataStream::operator>> ( double & f )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads a 64-bit floating point number from the stream into \fIf\fR, using the standard IEEE754 format. Returns a reference to the stream.
.SH "QDataStream & QDataStream::operator>> ( char *& s )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Reads the '&#92;0'-terminated string \fIs\fR from the stream and returns a reference to the stream.
.PP
Space for the string is allocated using \fCnew\fR -- the caller must destroy it with delete[].
.SH "QDataStream & QDataStream::readBytes ( char *& s, uint & l )"
Reads the buffer \fIs\fR from the stream and returns a reference to the stream.
.PP
The buffer \fIs\fR is allocated using \fCnew\fR. Destroy it with the \fCdelete[]\fR operator. If the length is zero or \fIs\fR cannot be allocated, \fIs\fR is set to 0.
.PP
The \fIl\fR parameter will be set to the length of the buffer.
.PP
The serialization format is a Q_UINT32 length specifier first, then \fIl\fR bytes of data. Note that the data is \fInot\fR encoded.
.PP
See also readRawBytes() and writeBytes().
.SH "QDataStream & QDataStream::readRawBytes ( char * s, uint len )"
Reads \fIlen\fR bytes from the stream into \fIs\fR and returns a reference to the stream.
.PP
The buffer \fIs\fR must be preallocated. The data is \fInot\fR encoded.
.PP
See also readBytes(), QIODevice::readBlock(), and writeRawBytes().
.SH "void QDataStream::setByteOrder ( int bo )"
Sets the serialization byte order to \fIbo\fR.
.PP
The \fIbo\fR parameter can be QDataStream::BigEndian or QDataStream::LittleEndian.
.PP
The default setting is big endian. We recommend leaving this setting unless you have special requirements.
.PP
See also byteOrder().
.SH "void QDataStream::setDevice ( QIODevice * d )"
void QDataStream::setDevice(QIODevice *d )
.PP
Sets the IO device to \fId\fR.
.PP
See also device() and unsetDevice().
.SH "void QDataStream::setPrintableData ( bool enable )"
If \fIenable\fR is TRUE, data will be output in a human readable format. If \fIenable\fR is FALSE, data will be output in a binary format.
.PP
If \fIenable\fR is TRUE, the write functions will generate output that consists of printable characters (7 bit ASCII). This output will typically be a lot larger than the default binary output, and consequently slower to write.
.PP
We recommend only enabling printable data for debugging purposes.
.SH "void QDataStream::setVersion ( int v )"
Sets the version number of the data serialization format to \fIv\fR.
.PP
You don't need to set a version if you are using the current version of Qt.
.PP
In order to accommodate new functionality, the datastream serialization format of some Qt classes has changed in some versions of Qt. If you want to read data that was created by an earlier version of Qt, or write data that can be read by a program that was compiled with an earlier version of Qt, use this function to modify the serialization format of QDataStream.
.PP
<center>.nf
.TS
l - l. Qt Version QDataStream Version Qt 3.3 6 Qt 3.2 5 Qt 3.1 5 Qt 3.0 4 Qt 2.1.x and Qt 2.2.x 3 Qt 2.0.x 2 Qt 1.x
.TE
.fi
</center>
.PP
See also version().
.SH "void QDataStream::unsetDevice ()"
Unsets the IO device. This is the same as calling setDevice( 0 ).
.PP
See also device() and setDevice().
.SH "int QDataStream::version () const"
Returns the version number of the data serialization format. In Qt 3.1, this number is 5.
.PP
See also setVersion().
.SH "QDataStream & QDataStream::writeBytes ( const char * s, uint len )"
Writes the length specifier \fIlen\fR and the buffer \fIs\fR to the stream and returns a reference to the stream.
.PP
The \fIlen\fR is serialized as a Q_UINT32, followed by \fIlen\fR bytes from \fIs\fR. Note that the data is \fInot\fR encoded.
.PP
See also writeRawBytes() and readBytes().
.SH "QDataStream & QDataStream::writeRawBytes ( const char * s, uint len )"
Writes \fIlen\fR bytes from \fIs\fR to the stream and returns a reference to the stream. The data is \fInot\fR encoded.
.PP
See also writeBytes(), QIODevice::writeBlock(), and readRawBytes().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qdatastream.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qdatastream.3qt) and the Qt
version (3.3.8).
