'\" t
.TH QMutex 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QMutex \- Access serialization between threads
.SH SYNOPSIS
All the functions in this class are thread-safe when Qt is built with thread support.</p>
.PP
\fC#include <qmutex.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQMutex\fR ( bool recursive = FALSE )"
.br
.ti -1c
.BI "virtual \fB~QMutex\fR ()"
.br
.ti -1c
.BI "void \fBlock\fR ()"
.br
.ti -1c
.BI "void \fBunlock\fR ()"
.br
.ti -1c
.BI "bool \fBlocked\fR ()"
.br
.ti -1c
.BI "bool \fBtryLock\fR ()"
.br
.in -1c
.SH DESCRIPTION
The QMutex class provides access serialization between threads.
.PP
The purpose of a QMutex is to protect an object, data structure or section of code so that only one thread can access it at a time (This is similar to the Java \fCsynchronized\fR keyword). For example, say there is a method which prints a message to the user on two lines:
.PP
.nf
.br
    int number = 6;
.br
.br
    void method1()
.br
    {
.br
        number *= 5;
.br
        number /= 4;
.br
    }
.br
.br
    void method2()
.br
    {
.br
        number *= 3;
.br
        number /= 2;
.br
    }
.br
.fi
.PP
If these two methods are called in succession, the following happens:
.PP
.nf
.br
    // method1()
.br
    number *= 5;        // number is now 30
.br
    number /= 4;        // number is now 7
.br
.br
    // method2()
.br
    number *= 3;        // nubmer is now 21
.br
    number /= 2;        // number is now 10
.br
.fi
.PP
If these two methods are called simultaneously from two threads then the following sequence could result:
.PP
.nf
.br
    // Thread 1 calls method1()
.br
    number *= 5;        // number is now 30
.br
.br
    // Thread 2 calls method2().
.br
    //
.br
    // Most likely Thread 1 has been put to sleep by the operating
.br
    // system to allow Thread 2 to run.
.br
    number *= 3;        // number is now 90
.br
    number /= 2;        // number is now 45
.br
.br
    // Thread 1 finishes executing.
.br
    number /= 4;        // number is now 11, instead of 10
.br
.fi
.PP
If we add a mutex, we should get the result we want:
.PP
.nf
.br
    QMutex mutex;
.br
    int number = 6;
.br
.br
    void method1()
.br
    {
.br
        mutex.lock();
.br
        number *= 5;
.br
        number /= 4;
.br
        mutex.unlock();
.br
    }
.br
.br
    void method2()
.br
    {
.br
        mutex.lock();
.br
        number *= 3;
.br
        number /= 2;
.br
        mutex.unlock();
.br
    }
.br
.fi
.PP
Then only one thread can modify \fCnumber\fR at any given time and the result is correct. This is a trivial example, of course, but applies to any other case where things need to happen in a particular sequence.
.PP
When you call lock() in a thread, other threads that try to call lock() in the same place will block until the thread that got the lock calls unlock(). A non-blocking alternative to lock() is tryLock().
.PP
See also Environment Classes and Threading.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QMutex::QMutex ( bool recursive = FALSE )"
Constructs a new mutex. The mutex is created in an unlocked state. A recursive mutex is created if \fIrecursive\fR is TRUE; a normal mutex is created if \fIrecursive\fR is FALSE (the default). With a recursive mutex, a thread can lock the same mutex multiple times and it will not be unlocked until a corresponding number of unlock() calls have been made.
.SH "QMutex::~QMutex ()\fC [virtual]\fR"
Destroys the mutex.
.PP
\fBWarning:\fR If you destroy a mutex that still holds a lock the resultant behavior is undefined.
.SH "void QMutex::lock ()"
Attempt to lock the mutex. If another thread has locked the mutex then this call will \fIblock\fR until that thread has unlocked it.
.PP
See also unlock() and locked().
.SH "bool QMutex::locked ()"
Returns TRUE if the mutex is locked by another thread; otherwise returns FALSE.
.PP
\fBWarning:\fR Due to differing implementations of recursive mutexes on various platforms, calling this function from the same thread that previously locked the mutex will return undefined results.
.PP
See also lock() and unlock().
.SH "bool QMutex::tryLock ()"
Attempt to lock the mutex. If the lock was obtained, this function returns TRUE. If another thread has locked the mutex, this function returns FALSE, instead of waiting for the mutex to become available, i.e. it does not block.
.PP
If the lock was obtained, the mutex must be unlocked with unlock() before another thread can successfully lock it.
.PP
See also lock(), unlock(), and locked().
.SH "void QMutex::unlock ()"
Unlocks the mutex. Attempting to unlock a mutex in a different thread to the one that locked it results in an error. Unlocking a mutex that is not locked results in undefined behaviour (varies between different Operating Systems' thread implementations).
.PP
See also lock() and locked().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qmutex.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qmutex.3qt) and the Qt
version (3.3.8).
