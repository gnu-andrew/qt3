'\" t
.TH QDropEvent 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QDropEvent \- Event which is sent when a drag and drop is completed
.SH SYNOPSIS
\fC#include <qevent.h>\fR
.PP
Inherits QEvent and QMimeSource.
.PP
Inherited by QDragMoveEvent.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQDropEvent\fR ( const QPoint & pos, Type typ = Drop )"
.br
.ti -1c
.BI "const QPoint & \fBpos\fR () const"
.br
.ti -1c
.BI "bool \fBisAccepted\fR () const"
.br
.ti -1c
.BI "void \fBaccept\fR ( bool y = TRUE )"
.br
.ti -1c
.BI "void \fBignore\fR ()"
.br
.ti -1c
.BI "bool \fBisActionAccepted\fR () const"
.br
.ti -1c
.BI "void \fBacceptAction\fR ( bool y = TRUE )"
.br
.ti -1c
.BI "enum \fBAction\fR { Copy, Link, Move, Private, UserAction = 100 }"
.br
.ti -1c
.BI "void \fBsetAction\fR ( Action a )"
.br
.ti -1c
.BI "Action \fBaction\fR () const"
.br
.ti -1c
.BI "QWidget * \fBsource\fR () const"
.br
.ti -1c
.BI "virtual const char * \fBformat\fR ( int n = 0 ) const"
.br
.ti -1c
.BI "virtual QByteArray \fBencodedData\fR ( const char * format ) const"
.br
.ti -1c
.BI "virtual bool \fBprovides\fR ( const char * mimeType ) const"
.br
.ti -1c
.BI "QByteArray data ( const char * f ) const  \fI(obsolete)\fR"
.br
.ti -1c
.BI "void \fBsetPoint\fR ( const QPoint & np )"
.br
.in -1c
.SH DESCRIPTION
The QDropEvent class provides an event which is sent when a drag and drop is completed.
.PP
When a widget accepts drop events, it will receive this event if it has accepted the most recent QDragEnterEvent or QDragMoveEvent sent to it.
.PP
The widget should use data() to extract the data in an appropriate format.
.PP
See also Drag And Drop Classes and Event Classes.
.SS "Member Type Documentation"
.SH "QDropEvent::Action"
This enum describes the action which a source requests that a target perform with dropped data.
.TP
\fCQDropEvent::Copy\fR - The default action. The source simply uses the data provided in the operation.
.TP
\fCQDropEvent::Link\fR - The source should somehow create a link to the location specified by the data.
.TP
\fCQDropEvent::Move\fR - The source should somehow move the object from the location specified by the data to a new location.
.TP
\fCQDropEvent::Private\fR - The target has special knowledge of the MIME type, which the source should respond to in a similar way to a Copy.
.TP
\fCQDropEvent::UserAction\fR - The source and target can co-operate using special actions. This feature is not currently supported.
.PP
The Link and Move actions only makes sense if the data is a reference, for example, text/uri-list file lists (see QUriDrag).
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QDropEvent::QDropEvent ( const QPoint & pos, Type typ = Drop )"
Constructs a drop event that drops a drop of type \fItyp\fR on point \fIpos\fR.
.SH "void QDropEvent::accept ( bool y = TRUE )"
Call this function to indicate whether the event provided data which your widget processed. Set \fIy\fR to TRUE (the default) if your widget could process the data, otherwise set \fIy\fR to FALSE. To get the data, use encodedData(), or preferably, the decode() methods of existing QDragObject subclasses, such as QTextDrag::decode(), or your own subclasses.
.PP
See also acceptAction().
.PP
Example: iconview/simple_dd/main.cpp.
.SH "void QDropEvent::acceptAction ( bool y = TRUE )"
Call this to indicate that the action described by action() is accepted (i.e. if \fIy\fR is TRUE, which is the default), not merely the default copy action. If you call acceptAction(TRUE), there is no need to also call accept(TRUE).
.PP
Examples:
.)l dirview/dirview.cpp and fileiconview/qfileiconview.cpp.
.SH "Action QDropEvent::action () const"
Returns the Action which the target is requesting to be performed with the data. If your application understands the action and can process the supplied data, call acceptAction(); if your application can process the supplied data but can only perform the Copy action, call accept().
.PP
Examples:
.)l dirview/dirview.cpp and fileiconview/qfileiconview.cpp.
.SH "QByteArray QDropEvent::data ( const char * f ) const"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
Use QDropEvent::encodedData().
.SH "QByteArray QDropEvent::encodedData ( const char * format ) const\fC [virtual]\fR"
Returns a byte array containing the drag's data, in \fIformat\fR.
.PP
data() normally needs to get the data from the drag source, which is potentially very slow, so it's advisable to call this function only if you're sure that you will need the data in \fIformat\fR.
.PP
The resulting data will have a size of 0 if the format was not available.
.PP
See also format() and QByteArray::size().
.PP
Reimplemented from QMimeSource.
.SH "const char * QDropEvent::format ( int n = 0 ) const\fC [virtual]\fR"
Returns a string describing one of the available data types for this drag. Common examples are "text/plain" and "image/gif". If \fIn\fR is less than zero or greater than the number of available data types, format() returns 0.
.PP
This function is provided mainly for debugging. Most drop targets will use provides().
.PP
See also data() and provides().
.PP
Example: iconview/main.cpp.
.PP
Reimplemented from QMimeSource.
.SH "void QDropEvent::ignore ()"
The opposite of accept(), i.e. you have ignored the drop event.
.PP
Example: fileiconview/qfileiconview.cpp.
.SH "bool QDropEvent::isAccepted () const"
Returns TRUE if the drop target accepts the event; otherwise returns FALSE.
.SH "bool QDropEvent::isActionAccepted () const"
Returns TRUE if the drop action was accepted by the drop site; otherwise returns FALSE.
.SH "const QPoint & QDropEvent::pos () const"
Returns the position where the drop was made.
.PP
Example: dirview/dirview.cpp.
.SH "bool QDropEvent::provides ( const char * mimeType ) const\fC [virtual]\fR"
Returns TRUE if this event provides format \fImimeType\fR; otherwise returns FALSE.
.PP
See also data().
.PP
Example: fileiconview/qfileiconview.cpp.
.PP
Reimplemented from QMimeSource.
.SH "void QDropEvent::setAction ( Action a )"
Sets the action to \fIa\fR. This is used internally, you should not need to call this in your code: the \fIsource\fR decides the action, not the target.
.SH "void QDropEvent::setPoint ( const QPoint & np )"
Sets the drop to happen at point \fInp\fR. You do not normally need to use this as it will be set internally before your widget receives the drop event.
.SH "QWidget * QDropEvent::source () const"
If the source of the drag operation is a widget in this application, this function returns that source, otherwise it returns 0. The source of the operation is the first parameter to drag object subclasses.
.PP
This is useful if your widget needs special behavior when dragging to itself, etc.
.PP
See QDragObject::QDragObject() and subclasses.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qdropevent.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qdropevent.3qt) and the Qt
version (3.3.8).
