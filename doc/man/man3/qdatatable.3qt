'\" t
.TH QDataTable 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QDataTable \- Flexible SQL table widget that supports browsing and editing
.SH SYNOPSIS
\fC#include <qdatatable.h>\fR
.PP
Inherits QTable.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQDataTable\fR ( QWidget * parent = 0, const char * name = 0 )"
.br
.ti -1c
.BI "\fBQDataTable\fR ( QSqlCursor * cursor, bool autoPopulate = FALSE, QWidget * parent = 0, const char * name = 0 )"
.br
.ti -1c
.BI "\fB~QDataTable\fR ()"
.br
.ti -1c
.BI "virtual void \fBaddColumn\fR ( const QString & fieldName, const QString & label = QString::null, int width = -1, const QIconSet & iconset = QIconSet ( ) )"
.br
.ti -1c
.BI "virtual void \fBremoveColumn\fR ( uint col )"
.br
.ti -1c
.BI "virtual void \fBsetColumn\fR ( uint col, const QString & fieldName, const QString & label = QString::null, int width = -1, const QIconSet & iconset = QIconSet ( ) )"
.br
.ti -1c
.BI "QString \fBnullText\fR () const"
.br
.ti -1c
.BI "QString \fBtrueText\fR () const"
.br
.ti -1c
.BI "QString \fBfalseText\fR () const"
.br
.ti -1c
.BI "DateFormat \fBdateFormat\fR () const"
.br
.ti -1c
.BI "bool \fBconfirmEdits\fR () const"
.br
.ti -1c
.BI "bool \fBconfirmInsert\fR () const"
.br
.ti -1c
.BI "bool \fBconfirmUpdate\fR () const"
.br
.ti -1c
.BI "bool \fBconfirmDelete\fR () const"
.br
.ti -1c
.BI "bool \fBconfirmCancels\fR () const"
.br
.ti -1c
.BI "bool \fBautoDelete\fR () const"
.br
.ti -1c
.BI "bool \fBautoEdit\fR () const"
.br
.ti -1c
.BI "QString \fBfilter\fR () const"
.br
.ti -1c
.BI "QStringList \fBsort\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetSqlCursor\fR ( QSqlCursor * cursor = 0, bool autoPopulate = FALSE, bool autoDelete = FALSE )"
.br
.ti -1c
.BI "QSqlCursor * \fBsqlCursor\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetNullText\fR ( const QString & nullText )"
.br
.ti -1c
.BI "virtual void \fBsetTrueText\fR ( const QString & trueText )"
.br
.ti -1c
.BI "virtual void \fBsetFalseText\fR ( const QString & falseText )"
.br
.ti -1c
.BI "virtual void \fBsetDateFormat\fR ( const DateFormat f )"
.br
.ti -1c
.BI "virtual void \fBsetConfirmEdits\fR ( bool confirm )"
.br
.ti -1c
.BI "virtual void \fBsetConfirmInsert\fR ( bool confirm )"
.br
.ti -1c
.BI "virtual void \fBsetConfirmUpdate\fR ( bool confirm )"
.br
.ti -1c
.BI "virtual void \fBsetConfirmDelete\fR ( bool confirm )"
.br
.ti -1c
.BI "virtual void \fBsetConfirmCancels\fR ( bool confirm )"
.br
.ti -1c
.BI "virtual void \fBsetAutoDelete\fR ( bool enable )"
.br
.ti -1c
.BI "virtual void \fBsetAutoEdit\fR ( bool autoEdit )"
.br
.ti -1c
.BI "virtual void \fBsetFilter\fR ( const QString & filter )"
.br
.ti -1c
.BI "virtual void \fBsetSort\fR ( const QStringList & sort )"
.br
.ti -1c
.BI "virtual void \fBsetSort\fR ( const QSqlIndex & sort )"
.br
.ti -1c
.BI "enum \fBRefresh\fR { RefreshData = 1, RefreshColumns = 2, RefreshAll = 3 }"
.br
.ti -1c
.BI "void \fBrefresh\fR ( Refresh mode )"
.br
.ti -1c
.BI "virtual void \fBsortColumn\fR ( int col, bool ascending = TRUE, bool wholeRows = FALSE )"
.br
.ti -1c
.BI "virtual QString \fBtext\fR ( int row, int col ) const"
.br
.ti -1c
.BI "QVariant \fBvalue\fR ( int row, int col ) const"
.br
.ti -1c
.BI "QSqlRecord * \fBcurrentRecord\fR () const"
.br
.ti -1c
.BI "void \fBinstallEditorFactory\fR ( QSqlEditorFactory * f )"
.br
.ti -1c
.BI "void \fBinstallPropertyMap\fR ( QSqlPropertyMap * m )"
.br
.ti -1c
.BI "virtual int \fBnumCols\fR () const"
.br
.ti -1c
.BI "virtual int \fBnumRows\fR () const"
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "virtual void \fBfind\fR ( const QString & str, bool caseSensitive, bool backwards )"
.br
.ti -1c
.BI "virtual void \fBsortAscending\fR ( int col )"
.br
.ti -1c
.BI "virtual void \fBsortDescending\fR ( int col )"
.br
.ti -1c
.BI "virtual void \fBrefresh\fR ()"
.br
.ti -1c
.BI "virtual void \fBsetColumnWidth\fR ( int col, int w )"
.br
.ti -1c
.BI "virtual void \fBadjustColumn\fR ( int col )"
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void \fBcurrentChanged\fR ( QSqlRecord * record )"
.br
.ti -1c
.BI "void \fBprimeInsert\fR ( QSqlRecord * buf )"
.br
.ti -1c
.BI "void \fBprimeUpdate\fR ( QSqlRecord * buf )"
.br
.ti -1c
.BI "void \fBprimeDelete\fR ( QSqlRecord * buf )"
.br
.ti -1c
.BI "void \fBbeforeInsert\fR ( QSqlRecord * buf )"
.br
.ti -1c
.BI "void \fBbeforeUpdate\fR ( QSqlRecord * buf )"
.br
.ti -1c
.BI "void \fBbeforeDelete\fR ( QSqlRecord * buf )"
.br
.ti -1c
.BI "void \fBcursorChanged\fR ( QSql::Op mode )"
.br
.in -1c
.SS "Properties"
.in +1c
.ti -1c
.BI "bool \fBautoEdit\fR - whether the data table automatically applies edits"
.br
.ti -1c
.BI "bool \fBconfirmCancels\fR - whether the data table confirms cancel operations"
.br
.ti -1c
.BI "bool \fBconfirmDelete\fR - whether the data table confirms delete operations"
.br
.ti -1c
.BI "bool \fBconfirmEdits\fR - whether the data table confirms edit operations"
.br
.ti -1c
.BI "bool \fBconfirmInsert\fR - whether the data table confirms insert operations"
.br
.ti -1c
.BI "bool \fBconfirmUpdate\fR - whether the data table confirms update operations"
.br
.ti -1c
.BI "DateFormat \fBdateFormat\fR - the format used for displaying date/time values"
.br
.ti -1c
.BI "QString \fBfalseText\fR - the text used to represent false values"
.br
.ti -1c
.BI "QString \fBfilter\fR - the data filter for the data table"
.br
.ti -1c
.BI "QString \fBnullText\fR - the text used to represent NULL values"
.br
.ti -1c
.BI "int \fBnumCols\fR - the number of columns in the table  \fI(read " "only" ")\fR"
.br
.ti -1c
.BI "int \fBnumRows\fR - the number of rows in the table  \fI(read " "only" ")\fR"
.br
.ti -1c
.BI "QStringList \fBsort\fR - the data table's sort"
.br
.ti -1c
.BI "QString \fBtrueText\fR - the text used to represent true values"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual bool \fBinsertCurrent\fR ()"
.br
.ti -1c
.BI "virtual bool \fBupdateCurrent\fR ()"
.br
.ti -1c
.BI "virtual bool \fBdeleteCurrent\fR ()"
.br
.ti -1c
.BI "virtual QSql::Confirm \fBconfirmEdit\fR ( QSql::Op m )"
.br
.ti -1c
.BI "virtual QSql::Confirm \fBconfirmCancel\fR ( QSql::Op m )"
.br
.ti -1c
.BI "virtual void \fBhandleError\fR ( const QSqlError & e )"
.br
.ti -1c
.BI "virtual bool \fBbeginInsert\fR ()"
.br
.ti -1c
.BI "virtual QWidget * \fBbeginUpdate\fR ( int row, int col, bool replace )"
.br
.ti -1c
.BI "int \fBindexOf\fR ( uint i ) const"
.br
.ti -1c
.BI "void \fBreset\fR ()"
.br
.ti -1c
.BI "void \fBsetSize\fR ( QSqlCursor * sql )"
.br
.ti -1c
.BI "virtual void \fBpaintField\fR ( QPainter * p, const QSqlField * field, const QRect & cr, bool selected )"
.br
.ti -1c
.BI "virtual int \fBfieldAlignment\fR ( const QSqlField * field )"
.br
.in -1c
.SH DESCRIPTION
The QDataTable class provides a flexible SQL table widget that supports browsing and editing.
.PP
QDataTable supports various functions for presenting and editing SQL data from a QSqlCursor in a table.
.PP
If you want a to present your data in a form use QDataBrowser, or for read-only forms, QDataView.
.PP
When displaying data, QDataTable only retrieves data for visible rows. If the driver supports the 'query size' property the QDataTable will have the correct number of rows and the vertical scrollbar will accurately reflect the number of rows displayed in proportion to the number of rows in the dataset. If the driver does not support the 'query size' property, rows are dynamically fetched from the database on an as-needed basis with the scrollbar becoming more accurate as the user scrolls down through the records. This allows extremely large queries to be displayed as quickly as possible, with minimum memory usage.
.PP
QDataTable inherits QTable's API and extends it with functions to sort and filter the data and sort columns. See setSqlCursor(), setFilter(), setSort(), setSorting(), sortColumn() and refresh().
.PP
When displaying editable cursors, cell editing will be enabled. (For more information on editable cursors, see QSqlCursor). QDataTable can be used to modify existing data and to add new records. When a user makes changes to a field in the table, the cursor's edit buffer is used. The table will not send changes in the edit buffer to the database until the user moves to a different record in the grid or presses Enter. Cell editing is initiated by pressing F2 (or right clicking and then clicking the appropriate popup menu item) and canceled by pressing Esc. If there is a problem updating or adding data, errors are handled automatically (see handleError() to change this behavior). Note that if autoEdit() is FALSE navigating to another record will cancel the insert or update.
.PP
The user can be asked to confirm all edits with setConfirmEdits(). For more precise control use setConfirmInsert(), setConfirmUpdate(), setConfirmDelete() and setConfirmCancels(). Use setAutoEdit() to control the behaviour of the table when the user edits a record and then navigates. (Note that setAutoDelete() is unrelated; it is used to set whether the QSqlCursor is deleted when the table is deleted.)
.PP
Since the data table can perform edits, it must be able to uniquely identify every record so that edits are correctly applied. Because of this the underlying cursor must have a valid primary index to ensure that a unique record is inserted, updated or deleted within the database otherwise the database may be changed to an inconsistent state.
.PP
QDataTable creates editors using the default QSqlEditorFactory. Different editor factories can be used by calling installEditorFactory(). A property map is used to map between the cell's value and the editor. You can use your own property map with installPropertyMap().
.PP
The contents of a cell is available as a QString with text() or as a QVariant with value(). The current record is returned by currentRecord(). Use the find() function to search for a string in the table.
.PP
Editing actions can be applied programatically. For example, the insertCurrent() function reads the fields from the current record into the cursor and performs the insert. The updateCurrent() and deleteCurrent() functions perform similarly to update and delete the current record respectively.
.PP
Columns in the table can be created automatically based on the cursor (see setSqlCursor()). Columns can be manipulated manually using addColumn(), removeColumn() and setColumn().
.PP
The table automatically copies many of the properties of the cursor to format the display of data within cells (alignment, visibility, etc.). The cursor can be changed with setSqlCursor(). The filter (see setFilter()) and sort defined within the table are used instead of the filter and sort set on the cursor. For sorting options see setSort(), sortColumn(), sortAscending() and sortDescending(). Note that sorting operations will not behave as expected if you are using a QSqlSelectCursor because it uses user-defined SQL queries to obtain data.
.PP
The text used to represent NULL, TRUE and FALSE values can be changed with setNullText(), setTrueText() and setFalseText() respectively. You can change the appearance of cells by reimplementing paintField().
.PP
Whenever a new row is selected in the table the currentChanged() signal is emitted. The primeInsert() signal is emitted when an insert is initiated. The primeUpdate() and primeDelete() signals are emitted when update and deletion are initiated respectively. Just before the database is updated a signal is emitted; beforeInsert(), beforeUpdate() or beforeDelete() as appropriate.
.PP
See also Database Classes.
.SS "Member Type Documentation"
.SH "QDataTable::Refresh"
This enum describes the refresh options.
.TP
\fCQDataTable::RefreshData\fR - refresh the data, i.e. read it from the database
.TP
\fCQDataTable::RefreshColumns\fR - refresh the list of fields, e.g. the column headings
.TP
\fCQDataTable::RefreshAll\fR - refresh both the data and the list of fields
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QDataTable::QDataTable ( QWidget * parent = 0, const char * name = 0 )"
Constructs a data table which is a child of \fIparent\fR, called name \fIname\fR.
.SH "QDataTable::QDataTable ( QSqlCursor * cursor, bool autoPopulate = FALSE, QWidget * parent = 0, const char * name = 0 )"
Constructs a data table which is a child of \fIparent\fR, called name \fIname\fR using the cursor \fIcursor\fR.
.PP
If \fIautoPopulate\fR is TRUE (the default is FALSE), columns are automatically created based upon the fields in the \fIcursor\fR record. Note that \fIautoPopulate\fR only governs the creation of columns; to load the cursor's data into the table use refresh().
.PP
If the \fIcursor\fR is read-only, the table also becomes read-only. In addition, the table adopts the cursor's driver's definition for representing NULL values as strings.
.SH "QDataTable::~QDataTable ()"
Destroys the object and frees any allocated resources.
.SH "void QDataTable::addColumn ( const QString & fieldName, const QString & label = QString::null, int width = -1, const QIconSet & iconset = QIconSet ( ) )\fC [virtual]\fR"
Adds the next column to be displayed using the field \fIfieldName\fR, column label \fIlabel\fR, width \fIwidth\fR and iconset \fIiconset\fR.
.PP
If \fIlabel\fR is specified, it is used as the column's header label, otherwise the field's display label is used when setSqlCursor() is called. The \fIiconset\fR is used to set the icon used by the column header; by default there is no icon.
.PP
See also setSqlCursor() and refresh().
.PP
Examples:
.)l sql/overview/subclass1/main.cpp, sql/overview/subclass3/main.cpp, sql/overview/table2/main.cpp, and sql/sqltable/main.cpp.
.SH "void QDataTable::adjustColumn ( int col )\fC [virtual slot]\fR"
Resizes column \fIcol\fR so that the column width is wide enough to display the widest item the column contains (including the column label). If the table's QSqlCursor is not currently active, the cursor will be refreshed before the column width is calculated. Be aware that this function may be slow on tables that contain large result sets.
.PP
Reimplemented from QTable.
.SH "bool QDataTable::autoDelete () const"
Returns TRUE if the table will automatically delete the cursor specified by setSqlCursor(); otherwise returns FALSE.
.SH "bool QDataTable::autoEdit () const"
Returns TRUE if the data table automatically applies edits; otherwise returns FALSE. See the "autoEdit" property for details.
.SH "void QDataTable::beforeDelete ( QSqlRecord * buf )\fC [signal]\fR"
This signal is emitted just before the currently selected record is deleted from the database. The \fIbuf\fR parameter points to the edit buffer being deleted. Connect to this signal to, for example, copy some of the fields for later use.
.SH "void QDataTable::beforeInsert ( QSqlRecord * buf )\fC [signal]\fR"
This signal is emitted just before the cursor's edit buffer is inserted into the database. The \fIbuf\fR parameter points to the edit buffer being inserted. Connect to this signal to, for example, populate a key field with a unique sequence number.
.SH "void QDataTable::beforeUpdate ( QSqlRecord * buf )\fC [signal]\fR"
This signal is emitted just before the cursor's edit buffer is updated in the database. The \fIbuf\fR parameter points to the edit buffer being updated. Connect to this signal when you want to transform the user's data behind-the-scenes.
.SH "bool QDataTable::beginInsert ()\fC [virtual protected]\fR"
Protected virtual function called when editing is about to begin on a new record. If the table is read-only, or if there's no cursor or the cursor does not allow inserts, nothing happens.
.PP
Editing takes place using the cursor's edit buffer(see QSqlCursor::editBuffer()).
.PP
When editing begins, a new row is created in the table marked with an asterisk '*' in the row's vertical header column, i.e. at the left of the row.
.SH "QWidget * QDataTable::beginUpdate ( int row, int col, bool replace )\fC [virtual protected]\fR"
Protected virtual function called when editing is about to begin on an existing row. If the table is read-only, or if there's no cursor, nothing happens.
.PP
Editing takes place using the cursor's edit buffer (see QSqlCursor::editBuffer()).
.PP
\fIrow\fR and \fIcol\fR refer to the row and column in the QDataTable.
.PP
(\fIreplace\fR is provided for reimplementors and reflects the API of QTable::beginEdit().)
.SH "QSql::Confirm QDataTable::confirmCancel ( QSql::Op m )\fC [virtual protected]\fR"
Protected virtual function which returns a confirmation for cancelling an edit mode of \fIm\fR. Derived classes can reimplement this function to provide their own cancel dialog. The default implementation uses a message box which prompts the user to confirm the cancel.
.SH "bool QDataTable::confirmCancels () const"
Returns TRUE if the data table confirms cancel operations; otherwise returns FALSE. See the "confirmCancels" property for details.
.SH "bool QDataTable::confirmDelete () const"
Returns TRUE if the data table confirms delete operations; otherwise returns FALSE. See the "confirmDelete" property for details.
.SH "QSql::Confirm QDataTable::confirmEdit ( QSql::Op m )\fC [virtual protected]\fR"
Protected virtual function which returns a confirmation for an edit of mode \fIm\fR. Derived classes can reimplement this function to provide their own confirmation dialog. The default implementation uses a message box which prompts the user to confirm the edit action.
.SH "bool QDataTable::confirmEdits () const"
Returns TRUE if the data table confirms edit operations; otherwise returns FALSE. See the "confirmEdits" property for details.
.SH "bool QDataTable::confirmInsert () const"
Returns TRUE if the data table confirms insert operations; otherwise returns FALSE. See the "confirmInsert" property for details.
.SH "bool QDataTable::confirmUpdate () const"
Returns TRUE if the data table confirms update operations; otherwise returns FALSE. See the "confirmUpdate" property for details.
.SH "void QDataTable::currentChanged ( QSqlRecord * record )\fC [signal]\fR"
This signal is emitted whenever a new row is selected in the table. The \fIrecord\fR parameter points to the contents of the newly selected record.
.SH "QSqlRecord * QDataTable::currentRecord () const"
Returns the currently selected record, or 0 if there is no current selection. The table owns the pointer, so do \fInot\fR delete it or otherwise modify it or the cursor it points to.
.SH "void QDataTable::cursorChanged ( QSql::Op mode )\fC [signal]\fR"
This signal is emitted whenever the cursor record was changed due to an edit. The \fImode\fR parameter is the type of edit that just took place.
.SH "DateFormat QDataTable::dateFormat () const"
Returns the format used for displaying date/time values. See the "dateFormat" property for details.
.SH "bool QDataTable::deleteCurrent ()\fC [virtual protected]\fR"
For an editable table, issues a delete on the current cursor's primary index using the values of the currently selected row. If there is no current cursor or there is no current selection, nothing happens. If confirmEdits() or confirmDelete() is TRUE, confirmEdit() is called to confirm the delete. Returns TRUE if the delete succeeded; otherwise FALSE.
.PP
The underlying cursor must have a valid primary index to ensure that a unique record is deleted within the database otherwise the database may be changed to an inconsistent state.
.SH "QString QDataTable::falseText () const"
Returns the text used to represent false values. See the "falseText" property for details.
.SH "int QDataTable::fieldAlignment ( const QSqlField * field )\fC [virtual protected]\fR"
Returns the alignment for \fIfield\fR.
.SH "QString QDataTable::filter () const"
Returns the data filter for the data table. See the "filter" property for details.
.SH "void QDataTable::find ( const QString & str, bool caseSensitive, bool backwards )\fC [virtual slot]\fR"
Searches the current cursor for a cell containing the string \fIstr\fR starting at the current cell and working forwards (or backwards if \fIbackwards\fR is TRUE). If the string is found, the cell containing the string is set as the current cell. If \fIcaseSensitive\fR is FALSE the case of \fIstr\fR will be ignored.
.PP
The search will wrap, i.e. if the first (or if backwards is TRUE, last) cell is reached without finding \fIstr\fR the search will continue until it reaches the starting cell. If \fIstr\fR is not found the search will fail and the current cell will remain unchanged.
.SH "void QDataTable::handleError ( const QSqlError & e )\fC [virtual protected]\fR"
Protected virtual function which is called when an error \fIe\fR has occurred on the current cursor(). The default implementation displays a warning message to the user with information about the error.
.SH "int QDataTable::indexOf ( uint i ) const\fC [protected]\fR"
Returns the index of the field within the current SQL query that is displayed in column \fIi\fR.
.SH "bool QDataTable::insertCurrent ()\fC [virtual protected]\fR"
For an editable table, issues an insert on the current cursor using the values in the cursor's edit buffer. If there is no current cursor or there is no current "insert" row, nothing happens. If confirmEdits() or confirmInsert() is TRUE, confirmEdit() is called to confirm the insert. Returns TRUE if the insert succeeded; otherwise returns FALSE.
.PP
The underlying cursor must have a valid primary index to ensure that a unique record is inserted within the database otherwise the database may be changed to an inconsistent state.
.SH "void QDataTable::installEditorFactory ( QSqlEditorFactory * f )"
Installs a new SQL editor factory \fIf\fR. This enables the user to create and instantiate their own editors for use in cell editing. Note that QDataTable takes ownership of this pointer, and will delete it when it is no longer needed or when installEditorFactory() is called again.
.PP
See also QSqlEditorFactory.
.SH "void QDataTable::installPropertyMap ( QSqlPropertyMap * m )"
Installs a new property map \fIm\fR. This enables the user to create and instantiate their own property maps for use in cell editing. Note that QDataTable takes ownership of this pointer, and will delete it when it is no longer needed or when installPropertMap() is called again.
.PP
See also QSqlPropertyMap.
.SH "QString QDataTable::nullText () const"
Returns the text used to represent NULL values. See the "nullText" property for details.
.SH "int QDataTable::numCols () const\fC [virtual]\fR"
Returns the number of columns in the table. See the "numCols" property for details.
.PP
Reimplemented from QTable.
.SH "int QDataTable::numRows () const\fC [virtual]\fR"
Returns the number of rows in the table. See the "numRows" property for details.
.PP
Reimplemented from QTable.
.SH "void QDataTable::paintField ( QPainter * p, const QSqlField * field, const QRect & cr, bool selected )\fC [virtual protected]\fR"
Paints the \fIfield\fR on the painter \fIp\fR. The painter has already been translated to the appropriate cell's origin where the \fIfield\fR is to be rendered. \fIcr\fR describes the cell coordinates in the content coordinate system. The \fIselected\fR parameter is ignored.
.PP
If you want to draw custom field content you must reimplement paintField() to do the custom drawing. The default implementation renders the \fIfield\fR value as text. If the field is NULL, nullText() is displayed in the cell. If the field is Boolean, trueText() or falseText() is displayed as appropriate.
.PP
Example: sql/overview/table4/main.cpp.
.SH "void QDataTable::primeDelete ( QSqlRecord * buf )\fC [signal]\fR"
This signal is emitted after the cursor is primed for delete by the table, when a delete action is beginning on the table. The \fIbuf\fR parameter points to the edit buffer being deleted. Connect to this signal in order to, for example, record auditing information on deletions.
.SH "void QDataTable::primeInsert ( QSqlRecord * buf )\fC [signal]\fR"
This signal is emitted after the cursor is primed for insert by the table, when an insert action is beginning on the table. The \fIbuf\fR parameter points to the edit buffer being inserted. Connect to this signal in order to, for example, prime the record buffer with default data values.
.SH "void QDataTable::primeUpdate ( QSqlRecord * buf )\fC [signal]\fR"
This signal is emitted after the cursor is primed for update by the table, when an update action is beginning on the table. The \fIbuf\fR parameter points to the edit buffer being updated. Connect to this signal in order to, for example, provide some visual feedback that the user is in 'edit mode'.
.SH "void QDataTable::refresh ()\fC [virtual slot]\fR"
Refreshes the table. The cursor is refreshed using the current filter, the current sort, and the currently defined columns. Equivalent to calling refresh( QDataTable::RefreshData ).
.PP
Examples:
.)l sql/overview/subclass1/main.cpp, sql/overview/table1/main.cpp, sql/overview/table2/main.cpp, and sql/sqltable/main.cpp.
.SH "void QDataTable::refresh ( Refresh mode )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Refreshes the table. If there is no currently defined cursor (see setSqlCursor()), nothing happens. The \fImode\fR parameter determines which type of refresh will take place.
.PP
See also Refresh, setSqlCursor(), and addColumn().
.SH "void QDataTable::removeColumn ( uint col )\fC [virtual]\fR"
Removes column \fIcol\fR from the list of columns to be displayed. If \fIcol\fR does not exist, nothing happens.
.PP
See also QSqlField.
.SH "void QDataTable::reset ()\fC [protected]\fR"
Resets the table so that it displays no data.
.PP
See also setSqlCursor().
.SH "void QDataTable::setAutoDelete ( bool enable )\fC [virtual]\fR"
Sets the cursor auto-delete flag to \fIenable\fR. If \fIenable\fR is TRUE, the table will automatically delete the cursor specified by setSqlCursor(). If \fIenable\fR is FALSE (the default), the cursor will not be deleted.
.SH "void QDataTable::setAutoEdit ( bool autoEdit )\fC [virtual]\fR"
Sets whether the data table automatically applies edits to \fIautoEdit\fR. See the "autoEdit" property for details.
.SH "void QDataTable::setColumn ( uint col, const QString & fieldName, const QString & label = QString::null, int width = -1, const QIconSet & iconset = QIconSet ( ) )\fC [virtual]\fR"
Sets the \fIcol\fR column to display using the field \fIfieldName\fR, column label \fIlabel\fR, width \fIwidth\fR and iconset \fIiconset\fR.
.PP
If \fIlabel\fR is specified, it is used as the column's header label, otherwise the field's display label is used when setSqlCursor() is called. The \fIiconset\fR is used to set the icon used by the column header; by default there is no icon.
.PP
See also setSqlCursor() and refresh().
.SH "void QDataTable::setColumnWidth ( int col, int w )\fC [virtual slot]\fR"
Sets the column \fIcol\fR to the width \fIw\fR. Note that unlike QTable the QDataTable is not immediately redrawn, you must call refresh(QDataTable::RefreshColumns) yourself.
.PP
See also refresh().
.PP
Reimplemented from QTable.
.SH "void QDataTable::setConfirmCancels ( bool confirm )\fC [virtual]\fR"
Sets whether the data table confirms cancel operations to \fIconfirm\fR. See the "confirmCancels" property for details.
.SH "void QDataTable::setConfirmDelete ( bool confirm )\fC [virtual]\fR"
Sets whether the data table confirms delete operations to \fIconfirm\fR. See the "confirmDelete" property for details.
.SH "void QDataTable::setConfirmEdits ( bool confirm )\fC [virtual]\fR"
Sets whether the data table confirms edit operations to \fIconfirm\fR. See the "confirmEdits" property for details.
.SH "void QDataTable::setConfirmInsert ( bool confirm )\fC [virtual]\fR"
Sets whether the data table confirms insert operations to \fIconfirm\fR. See the "confirmInsert" property for details.
.SH "void QDataTable::setConfirmUpdate ( bool confirm )\fC [virtual]\fR"
Sets whether the data table confirms update operations to \fIconfirm\fR. See the "confirmUpdate" property for details.
.SH "void QDataTable::setDateFormat ( const DateFormat f )\fC [virtual]\fR"
Sets the format used for displaying date/time values to \fIf\fR. See the "dateFormat" property for details.
.SH "void QDataTable::setFalseText ( const QString & falseText )\fC [virtual]\fR"
Sets the text used to represent false values to \fIfalseText\fR. See the "falseText" property for details.
.SH "void QDataTable::setFilter ( const QString & filter )\fC [virtual]\fR"
Sets the data filter for the data table to \fIfilter\fR. See the "filter" property for details.
.SH "void QDataTable::setNullText ( const QString & nullText )\fC [virtual]\fR"
Sets the text used to represent NULL values to \fInullText\fR. See the "nullText" property for details.
.SH "void QDataTable::setSize ( QSqlCursor * sql )\fC [protected]\fR"
If the cursor's \fIsql\fR driver supports query sizes, the number of rows in the table is set to the size of the query. Otherwise, the table dynamically resizes itself as it is scrolled. If \fIsql\fR is not active, it is made active by issuing a select() on the cursor using the \fIsql\fR cursor's current filter and current sort.
.SH "void QDataTable::setSort ( const QStringList & sort )\fC [virtual]\fR"
Sets the data table's sort to \fIsort\fR. See the "sort" property for details.
.SH "void QDataTable::setSort ( const QSqlIndex & sort )\fC [virtual]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Sets the sort to be applied to the displayed data to \fIsort\fR. If there is no current cursor, nothing happens. A QSqlIndex contains field names and their ordering (ASC or DESC); these are used to compose the ORDER BY clause.
.PP
See also sort.
.SH "void QDataTable::setSqlCursor ( QSqlCursor * cursor = 0, bool autoPopulate = FALSE, bool autoDelete = FALSE )\fC [virtual]\fR"
Sets \fIcursor\fR as the data source for the table. To force the display of the data from \fIcursor\fR, use refresh(). If \fIautoPopulate\fR is TRUE, columns are automatically created based upon the fields in the \fIcursor\fR record. If \fIautoDelete\fR is TRUE (the default is FALSE), the table will take ownership of the \fIcursor\fR and delete it when appropriate. If the \fIcursor\fR is read-only, the table becomes read-only. The table adopts the cursor's driver's definition for representing NULL values as strings.
.PP
See also refresh(), readOnly, setAutoDelete(), and QSqlDriver::nullText().
.SH "void QDataTable::setTrueText ( const QString & trueText )\fC [virtual]\fR"
Sets the text used to represent true values to \fItrueText\fR. See the "trueText" property for details.
.SH "QStringList QDataTable::sort () const"
Returns the data table's sort. See the "sort" property for details.
.SH "void QDataTable::sortAscending ( int col )\fC [virtual slot]\fR"
Sorts column \fIcol\fR in ascending order.
.PP
See also sorting.
.SH "void QDataTable::sortColumn ( int col, bool ascending = TRUE, bool wholeRows = FALSE )\fC [virtual]\fR"
Sorts column \fIcol\fR in ascending order if \fIascending\fR is TRUE (the default); otherwise sorts in descending order.
.PP
The \fIwholeRows\fR parameter is ignored; QDataTable always sorts whole rows by the specified column.
.PP
Reimplemented from QTable.
.SH "void QDataTable::sortDescending ( int col )\fC [virtual slot]\fR"
Sorts column \fIcol\fR in descending order.
.PP
See also sorting.
.SH "QSqlCursor * QDataTable::sqlCursor () const"
Returns the cursor used by the data table.
.SH "QString QDataTable::text ( int row, int col ) const\fC [virtual]\fR"
Returns the text in cell \fIrow\fR, \fIcol\fR, or an empty string if the cell is empty. If the cell's value is NULL then nullText() will be returned. If the cell does not exist then QString::null is returned.
.PP
Reimplemented from QTable.
.SH "QString QDataTable::trueText () const"
Returns the text used to represent true values. See the "trueText" property for details.
.SH "bool QDataTable::updateCurrent ()\fC [virtual protected]\fR"
For an editable table, issues an update using the cursor's edit buffer. If there is no current cursor or there is no current selection, nothing happens. If confirmEdits() or confirmUpdate() is TRUE, confirmEdit() is called to confirm the update. Returns TRUE if the update succeeded; otherwise returns FALSE.
.PP
The underlying cursor must have a valid primary index to ensure that a unique record is updated within the database otherwise the database may be changed to an inconsistent state.
.SH "QVariant QDataTable::value ( int row, int col ) const"
Returns the value in cell \fIrow\fR, \fIcol\fR, or an invalid value if the cell does not exist or has no value.
.SS "Property Documentation"
.SH "bool autoEdit"
This property holds whether the data table automatically applies edits.
.PP
The default value for this property is TRUE. When the user begins an insert or update in the table there are two possible outcomes when they navigate to another record:
.PP
<ol type=1>
.TP
the insert or update is is performed -- this occurs if autoEdit is TRUE
.TP
the insert or update is abandoned -- this occurs if autoEdit is FALSE
.PP
Set this property's value with setAutoEdit() and get this property's value with autoEdit().
.SH "bool confirmCancels"
This property holds whether the data table confirms cancel operations.
.PP
If the confirmCancel property is TRUE, all cancels must be confirmed by the user through a message box (this behavior can be changed by overriding the confirmCancel() function), otherwise all cancels occur immediately. The default is FALSE.
.PP
See also confirmEdits and confirmCancel().
.PP
Set this property's value with setConfirmCancels() and get this property's value with confirmCancels().
.SH "bool confirmDelete"
This property holds whether the data table confirms delete operations.
.PP
If the confirmDelete property is TRUE, all deletions must be confirmed by the user through a message box (this behaviour can be changed by overriding the confirmEdit() function), otherwise all delete operations occur immediately.
.PP
See also confirmCancels, confirmEdits, confirmUpdate, and confirmInsert.
.PP
Set this property's value with setConfirmDelete() and get this property's value with confirmDelete().
.SH "bool confirmEdits"
This property holds whether the data table confirms edit operations.
.PP
If the confirmEdits property is TRUE, the data table confirms all edit operations (inserts, updates and deletes). Finer control of edit confirmation can be achieved using confirmCancels, confirmInsert, confirmUpdate and confirmDelete.
.PP
See also confirmCancels, confirmInsert, confirmUpdate, and confirmDelete.
.PP
Set this property's value with setConfirmEdits() and get this property's value with confirmEdits().
.SH "bool confirmInsert"
This property holds whether the data table confirms insert operations.
.PP
If the confirmInsert property is TRUE, all insertions must be confirmed by the user through a message box (this behaviour can be changed by overriding the confirmEdit() function), otherwise all insert operations occur immediately.
.PP
See also confirmCancels, confirmEdits, confirmUpdate, and confirmDelete.
.PP
Set this property's value with setConfirmInsert() and get this property's value with confirmInsert().
.SH "bool confirmUpdate"
This property holds whether the data table confirms update operations.
.PP
If the confirmUpdate property is TRUE, all updates must be confirmed by the user through a message box (this behaviour can be changed by overriding the confirmEdit() function), otherwise all update operations occur immediately.
.PP
See also confirmCancels, confirmEdits, confirmInsert, and confirmDelete.
.PP
Set this property's value with setConfirmUpdate() and get this property's value with confirmUpdate().
.SH "DateFormat dateFormat"
This property holds the format used for displaying date/time values.
.PP
The dateFormat property is used for displaying date/time values in the table. The default value is Qt::LocalDate.
.PP
Set this property's value with setDateFormat() and get this property's value with dateFormat().
.SH "QString falseText"
This property holds the text used to represent false values.
.PP
The falseText property will be used to represent NULL values in the table. The default value is "False".
.PP
Set this property's value with setFalseText() and get this property's value with falseText().
.SH "QString filter"
This property holds the data filter for the data table.
.PP
The filter applies to the data shown in the table. To view data with a new filter, use refresh(). A filter string is an SQL WHERE clause without the WHERE keyword.
.PP
There is no default filter.
.PP
See also sort.
.PP
Set this property's value with setFilter() and get this property's value with filter().
.SH "QString nullText"
This property holds the text used to represent NULL values.
.PP
The nullText property will be used to represent NULL values in the table. The default value is provided by the cursor's driver.
.PP
Set this property's value with setNullText() and get this property's value with nullText().
.SH "int numCols"
This property holds the number of columns in the table.
.PP
Get this property's value with numCols().
.SH "int numRows"
This property holds the number of rows in the table.
.PP
Get this property's value with numRows().
.SH "QStringList sort"
This property holds the data table's sort.
.PP
The table's sort affects the order in which data records are displayed in the table. To apply a sort, use refresh().
.PP
When examining the sort property, a string list is returned with each item having the form 'fieldname order' (e.g., 'id ASC', 'surname DESC').
.PP
There is no default sort.
.PP
Note that if you want to iterate over the sort list, you should iterate over a copy, e.g.
.PP
.nf
.br
    QStringList list = myDataTable.sort();
.br
    QStringList::Iterator it = list.begin();
.br
    while( it != list.end() ) {
.br
        myProcessing( *it );
.br
        ++it;
.br
    }
.br
.fi
.PP
See also filter and refresh().
.PP
Set this property's value with setSort() and get this property's value with sort().
.SH "QString trueText"
This property holds the text used to represent true values.
.PP
The trueText property will be used to represent NULL values in the table. The default value is "True".
.PP
Set this property's value with setTrueText() and get this property's value with trueText().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qdatatable.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qdatatable.3qt) and the Qt
version (3.3.8).
