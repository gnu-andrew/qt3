'\" t
.TH QListViewItemIterator 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QListViewItemIterator \- Iterator for collections of QListViewItems
.SH SYNOPSIS
\fC#include <qlistview.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "enum \fBIteratorFlag\fR { Visible = 0x00000001, Invisible = 0x00000002, Selected = 0x00000004, Unselected = 0x00000008, Selectable = 0x00000010, NotSelectable = 0x00000020, DragEnabled = 0x00000040, DragDisabled = 0x00000080, DropEnabled = 0x00000100, DropDisabled = 0x00000200, Expandable = 0x00000400, NotExpandable = 0x00000800, Checked = 0x00001000, NotChecked = 0x00002000 }"
.br
.ti -1c
.BI "\fBQListViewItemIterator\fR ()"
.br
.ti -1c
.BI "\fBQListViewItemIterator\fR ( QListViewItem * item )"
.br
.ti -1c
.BI "\fBQListViewItemIterator\fR ( QListViewItem * item, int iteratorFlags )"
.br
.ti -1c
.BI "\fBQListViewItemIterator\fR ( const QListViewItemIterator & it )"
.br
.ti -1c
.BI "\fBQListViewItemIterator\fR ( QListView * lv )"
.br
.ti -1c
.BI "\fBQListViewItemIterator\fR ( QListView * lv, int iteratorFlags )"
.br
.ti -1c
.BI "QListViewItemIterator & \fBoperator=\fR ( const QListViewItemIterator & it )"
.br
.ti -1c
.BI "\fB~QListViewItemIterator\fR ()"
.br
.ti -1c
.BI "QListViewItemIterator & \fBoperator++\fR ()"
.br
.ti -1c
.BI "const QListViewItemIterator \fBoperator++\fR ( int )"
.br
.ti -1c
.BI "QListViewItemIterator & \fBoperator+=\fR ( int j )"
.br
.ti -1c
.BI "QListViewItemIterator & \fBoperator--\fR ()"
.br
.ti -1c
.BI "const QListViewItemIterator \fBoperator--\fR ( int )"
.br
.ti -1c
.BI "QListViewItemIterator & \fBoperator-=\fR ( int j )"
.br
.ti -1c
.BI "QListViewItem * \fBoperator*\fR ()"
.br
.ti -1c
.BI "QListViewItem * \fBcurrent\fR () const"
.br
.in -1c
.SH DESCRIPTION
The QListViewItemIterator class provides an iterator for collections of QListViewItems.
.PP
Construct an instance of a QListViewItemIterator, with either a QListView* or a QListViewItem* as argument, to operate on the tree of QListViewItems, starting from the argument.
.PP
A QListViewItemIterator iterates over all the items from its starting point. This means that it always makes the first child of the current item the new current item. If there is no child, the next sibling becomes the new current item; and if there is no next sibling, the next sibling of the parent becomes current.
.PP
The following example creates a list of all the items that have been selected by the user, storing pointers to the items in a QPtrList:
.PP
.nf
.br
    QPtrList<QListViewItem> lst;
.br
    QListViewItemIterator it( myListView );
.br
    while ( it.current() ) {
.br
        if ( it.current()->isSelected() )
.br
            lst.append( it.current() );
.br
        ++it;
.br
    }
.br
.fi
.PP
An alternative approach is to use an IteratorFlag:
.PP
.nf
.br
    QPtrList<QListViewItem> lst;
.br
    QListViewItemIterator it( myListView, QListViewItemIterator::Selected );
.br
    while ( it.current() ) {
.br
        lst.append( it.current() );
.br
        ++it;
.br
    }
.br
.fi
.PP
A QListViewItemIterator provides a convenient and easy way to traverse a hierarchical QListView.
.PP
Multiple QListViewItemIterators can operate on the tree of QListViewItems. A QListView knows about all iterators operating on its QListViewItems. So when a QListViewItem gets removed all iterators that point to this item are updated and point to the following item if possible, otherwise to a valid item before the current one or to 0. Note however that deleting the parent item of an item that an iterator points to is not safe.
.PP
See also QListView, QListViewItem, and Advanced Widgets.
.SS "Member Type Documentation"
.SH "QListViewItemIterator::IteratorFlag"
These flags can be passed to a QListViewItemIterator constructor (OR-ed together if more than one is used), so that the iterator will only iterate over items that match the given flags.
.TP
\fCQListViewItemIterator::Visible\fR
.TP
\fCQListViewItemIterator::Invisible\fR
.TP
\fCQListViewItemIterator::Selected\fR
.TP
\fCQListViewItemIterator::Unselected\fR
.TP
\fCQListViewItemIterator::Selectable\fR
.TP
\fCQListViewItemIterator::NotSelectable\fR
.TP
\fCQListViewItemIterator::DragEnabled\fR
.TP
\fCQListViewItemIterator::DragDisabled\fR
.TP
\fCQListViewItemIterator::DropEnabled\fR
.TP
\fCQListViewItemIterator::DropDisabled\fR
.TP
\fCQListViewItemIterator::Expandable\fR
.TP
\fCQListViewItemIterator::NotExpandable\fR
.TP
\fCQListViewItemIterator::Checked\fR
.TP
\fCQListViewItemIterator::NotChecked\fR
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QListViewItemIterator::QListViewItemIterator ()"
Constructs an empty iterator.
.SH "QListViewItemIterator::QListViewItemIterator ( QListViewItem * item )"
Constructs an iterator for the QListView that contains the \fIitem\fR. The current iterator item is set to point to the \fIitem\fR.
.SH "QListViewItemIterator::QListViewItemIterator ( QListViewItem * item, int iteratorFlags )"
Constructs an iterator for the QListView that contains the \fIitem\fR using the flags \fIiteratorFlags\fR. The current iterator item is set to point to \fIitem\fR or the next matching item if \fIitem\fR doesn't match the flags.
.PP
See also QListViewItemIterator::IteratorFlag.
.SH "QListViewItemIterator::QListViewItemIterator ( const QListViewItemIterator & it )"
Constructs an iterator for the same QListView as \fIit\fR. The current iterator item is set to point on the current item of \fIit\fR.
.SH "QListViewItemIterator::QListViewItemIterator ( QListView * lv )"
Constructs an iterator for the QListView \fIlv\fR. The current iterator item is set to point on the first child (QListViewItem) of \fIlv\fR.
.SH "QListViewItemIterator::QListViewItemIterator ( QListView * lv, int iteratorFlags )"
Constructs an iterator for the QListView \fIlv\fR with the flags \fIiteratorFlags\fR. The current iterator item is set to point on the first child (QListViewItem) of \fIlv\fR that matches the flags.
.PP
See also QListViewItemIterator::IteratorFlag.
.SH "QListViewItemIterator::~QListViewItemIterator ()"
Destroys the iterator.
.SH "QListViewItem * QListViewItemIterator::current () const"
Returns iterator's current item.
.PP
Examples:
.)l addressbook/centralwidget.cpp, checklists/checklists.cpp, and dirview/dirview.cpp.
.SH "QListViewItem * QListViewItemIterator::operator* ()"
Dereference operator. Returns a reference to the current item. The same as current().
.SH "QListViewItemIterator & QListViewItemIterator::operator++ ()"
Prefix ++. Makes the next item the new current item and returns it. Returns 0 if the current item is the last item or the QListView is 0.
.SH "const QListViewItemIterator QListViewItemIterator::operator++ ( int )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Postfix ++. Makes the next item the new current item and returns the item that \fIwas\fR the current item.
.SH "QListViewItemIterator & QListViewItemIterator::operator+= ( int j )"
Sets the current item to the item \fIj\fR positions after the current item. If that item is beyond the last item, the current item is set to 0. Returns the current item.
.SH "QListViewItemIterator & QListViewItemIterator::operator-- ()"
Prefix --. Makes the previous item the new current item and returns it. Returns 0 if the current item is the first item or the QListView is 0.
.SH "const QListViewItemIterator QListViewItemIterator::operator-- ( int )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Postfix --. Makes the previous item the new current item and returns the item that \fIwas\fR the current item.
.SH "QListViewItemIterator & QListViewItemIterator::operator-= ( int j )"
Sets the current item to the item \fIj\fR positions before the current item. If that item is before the first item, the current item is set to 0. Returns the current item.
.SH "QListViewItemIterator & QListViewItemIterator::operator= ( const QListViewItemIterator & it )"
Assignment. Makes a copy of \fIit\fR and returns a reference to its
iterator.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qlistviewitemiterator.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qlistviewitemiterator.3qt) and the Qt
version (3.3.8).
