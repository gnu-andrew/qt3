'\" t
.TH QDateTime 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QDateTime \- Date and time functions
.SH SYNOPSIS
All the functions in this class are reentrant when Qt is built with thread support.</p>
.PP
\fC#include <qdatetime.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQDateTime\fR ()"
.br
.ti -1c
.BI "\fBQDateTime\fR ( const QDate & date )"
.br
.ti -1c
.BI "\fBQDateTime\fR ( const QDate & date, const QTime & time )"
.br
.ti -1c
.BI "bool \fBisNull\fR () const"
.br
.ti -1c
.BI "bool \fBisValid\fR () const"
.br
.ti -1c
.BI "QDate \fBdate\fR () const"
.br
.ti -1c
.BI "QTime \fBtime\fR () const"
.br
.ti -1c
.BI "uint \fBtoTime_t\fR () const"
.br
.ti -1c
.BI "void \fBsetDate\fR ( const QDate & date )"
.br
.ti -1c
.BI "void \fBsetTime\fR ( const QTime & time )"
.br
.ti -1c
.BI "void \fBsetTime_t\fR ( uint secsSince1Jan1970UTC )"
.br
.ti -1c
.BI "void \fBsetTime_t\fR ( uint secsSince1Jan1970UTC, Qt::TimeSpec ts )"
.br
.ti -1c
.BI "QString \fBtoString\fR ( Qt::DateFormat f = Qt::TextDate ) const"
.br
.ti -1c
.BI "QString \fBtoString\fR ( const QString & format ) const"
.br
.ti -1c
.BI "QDateTime \fBaddDays\fR ( int ndays ) const"
.br
.ti -1c
.BI "QDateTime \fBaddMonths\fR ( int nmonths ) const"
.br
.ti -1c
.BI "QDateTime \fBaddYears\fR ( int nyears ) const"
.br
.ti -1c
.BI "QDateTime \fBaddSecs\fR ( int nsecs ) const"
.br
.ti -1c
.BI "int \fBdaysTo\fR ( const QDateTime & dt ) const"
.br
.ti -1c
.BI "int \fBsecsTo\fR ( const QDateTime & dt ) const"
.br
.ti -1c
.BI "bool \fBoperator==\fR ( const QDateTime & dt ) const"
.br
.ti -1c
.BI "bool \fBoperator!=\fR ( const QDateTime & dt ) const"
.br
.ti -1c
.BI "bool \fBoperator<\fR ( const QDateTime & dt ) const"
.br
.ti -1c
.BI "bool \fBoperator<=\fR ( const QDateTime & dt ) const"
.br
.ti -1c
.BI "bool \fBoperator>\fR ( const QDateTime & dt ) const"
.br
.ti -1c
.BI "bool \fBoperator>=\fR ( const QDateTime & dt ) const"
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "QDateTime \fBcurrentDateTime\fR ()"
.br
.ti -1c
.BI "QDateTime \fBcurrentDateTime\fR ( Qt::TimeSpec ts )"
.br
.ti -1c
.BI "QDateTime \fBfromString\fR ( const QString & s, Qt::DateFormat f = Qt::TextDate )"
.br
.in -1c
.SH RELATED FUNCTION DOCUMENTATION
.in +1c
.ti -1c
.BI "QDataStream & \fBoperator<<\fR ( QDataStream & s, const QDateTime & dt )"
.br
.ti -1c
.BI "QDataStream & \fBoperator>>\fR ( QDataStream & s, QDateTime & dt )"
.br
.in -1c
.SH DESCRIPTION
The QDateTime class provides date and time functions.
.PP
A QDateTime object contains a calendar date and a clock time (a" datetime"). It is a combination of the QDate and QTime classes. It can read the current datetime from the system clock. It provides functions for comparing datetimes and for manipulating a datetime by adding a number of seconds, days, months or years.
.PP
A QDateTime object is typically created either by giving a date and time explicitly in the constructor, or by using the static function currentDateTime(), which returns a QDateTime object set to the system clock's time. The date and time can be changed with setDate() and setTime(). A datetime can also be set using the setTime_t() function, which takes a POSIX-standard "number of seconds since 00:00:00 on January 1, 1970" value. The fromString() function returns a QDateTime given a string and a date format which is used to interpret the date within the string.
.PP
The date() and time() functions provide access to the date and time parts of the datetime. The same information is provided in textual format by the toString() function.
.PP
QDateTime provides a full set of operators to compare two QDateTime objects where smaller means earlier and larger means later.
.PP
You can increment (or decrement) a datetime by a given number of seconds using addSecs() or days using addDays(). Similarly you can use addMonths() and addYears(). The daysTo() function returns the number of days between two datetimes, and secsTo() returns the number of seconds between two datetimes.
.PP
The range of a datetime object is constrained to the ranges of the QDate and QTime objects which it embodies.
.PP
See also QDate, QTime, QDateTimeEdit, and Time and Date.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QDateTime::QDateTime ()"
Constructs a null datetime (i.e. null date and null time). A null datetime is invalid, since the date is invalid.
.PP
See also isValid().
.SH "QDateTime::QDateTime ( const QDate & date )"
Constructs a datetime with date \fIdate\fR and null (but valid) time (00:00:00.000).
.SH "QDateTime::QDateTime ( const QDate & date, const QTime & time )"
Constructs a datetime with date \fIdate\fR and time \fItime\fR.
.SH "QDateTime QDateTime::addDays ( int ndays ) const"
Returns a QDateTime object containing a datetime \fIndays\fR days later than the datetime of this object (or earlier if \fIndays\fR is negative).
.PP
See also daysTo(), addMonths(), addYears(), and addSecs().
.SH "QDateTime QDateTime::addMonths ( int nmonths ) const"
Returns a QDateTime object containing a datetime \fInmonths\fR months later than the datetime of this object (or earlier if \fInmonths\fR is negative).
.PP
See also daysTo(), addDays(), addYears(), and addSecs().
.SH "QDateTime QDateTime::addSecs ( int nsecs ) const"
Returns a QDateTime object containing a datetime \fInsecs\fR seconds later than the datetime of this object (or earlier if \fInsecs\fR is negative).
.PP
See also secsTo(), addDays(), addMonths(), and addYears().
.PP
Example: listviews/listviews.cpp.
.SH "QDateTime QDateTime::addYears ( int nyears ) const"
Returns a QDateTime object containing a datetime \fInyears\fR years later than the datetime of this object (or earlier if \fInyears\fR is negative).
.PP
See also daysTo(), addDays(), addMonths(), and addSecs().
.SH "QDateTime QDateTime::currentDateTime ( Qt::TimeSpec ts )\fC [static]\fR"
Returns the current datetime, as reported by the system clock, for the TimeSpec \fIts\fR. The default TimeSpec is LocalTime.
.PP
See also QDate::currentDate(), QTime::currentTime(), and Qt::TimeSpec.
.PP
Example: listviews/listviews.cpp.
.SH "QDateTime QDateTime::currentDateTime ()\fC [static]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Returns the current datetime, as reported by the system clock.
.PP
See also QDate::currentDate() and QTime::currentTime().
.SH "QDate QDateTime::date () const"
Returns the date part of the datetime.
.PP
See also setDate() and time().
.SH "int QDateTime::daysTo ( const QDateTime & dt ) const"
Returns the number of days from this datetime to \fIdt\fR (which is negative if \fIdt\fR is earlier than this datetime).
.PP
See also addDays() and secsTo().
.SH "QDateTime QDateTime::fromString ( const QString & s, Qt::DateFormat f = Qt::TextDate )\fC [static]\fR"
Returns the QDateTime represented by the string \fIs\fR, using the format \fIf\fR, or an invalid datetime if this is not possible.
.PP
Note for Qt::TextDate: It is recommended that you use the English short month names (e.g. "Jan"). Although localized month names can also be used, they depend on the user's locale settings.
.PP
\fBWarning:\fR Note that Qt::LocalDate cannot be used here.
.SH "bool QDateTime::isNull () const"
Returns TRUE if both the date and the time are null; otherwise returns FALSE. A null datetime is invalid.
.PP
See also QDate::isNull() and QTime::isNull().
.SH "bool QDateTime::isValid () const"
Returns TRUE if both the date and the time are valid; otherwise returns FALSE.
.PP
See also QDate::isValid() and QTime::isValid().
.SH "bool QDateTime::operator!= ( const QDateTime & dt ) const"
Returns TRUE if this datetime is different from \fIdt\fR; otherwise returns FALSE.
.PP
See also operator==().
.SH "bool QDateTime::operator< ( const QDateTime & dt ) const"
Returns TRUE if this datetime is earlier than \fIdt\fR; otherwise returns FALSE.
.SH "bool QDateTime::operator<= ( const QDateTime & dt ) const"
Returns TRUE if this datetime is earlier than or equal to \fIdt\fR; otherwise returns FALSE.
.SH "bool QDateTime::operator== ( const QDateTime & dt ) const"
Returns TRUE if this datetime is equal to \fIdt\fR; otherwise returns FALSE.
.PP
See also operator!=().
.SH "bool QDateTime::operator> ( const QDateTime & dt ) const"
Returns TRUE if this datetime is later than \fIdt\fR; otherwise returns FALSE.
.SH "bool QDateTime::operator>= ( const QDateTime & dt ) const"
Returns TRUE if this datetime is later than or equal to \fIdt\fR; otherwise returns FALSE.
.SH "int QDateTime::secsTo ( const QDateTime & dt ) const"
Returns the number of seconds from this datetime to \fIdt\fR (which is negative if \fIdt\fR is earlier than this datetime).
.PP
Example:
.PP
.nf
.br
    QDateTime dt = QDateTime::currentDateTime();
.br
    QDateTime xmas( QDate(dt.date().year(),12,24), QTime(17,00) );
.br
    qDebug( "There are %d seconds to Christmas", dt.secsTo(xmas) );
.br
.fi
.PP
See also addSecs(), daysTo(), and QTime::secsTo().
.SH "void QDateTime::setDate ( const QDate & date )"
Sets the date part of this datetime to \fIdate\fR.
.PP
See also date() and setTime().
.SH "void QDateTime::setTime ( const QTime & time )"
Sets the time part of this datetime to \fItime\fR.
.PP
See also time() and setDate().
.SH "void QDateTime::setTime_t ( uint secsSince1Jan1970UTC, Qt::TimeSpec ts )"
Sets the date and time to \fIts\fR time (Qt::LocalTime or Qt::UTC) given the number of seconds that have passed since 1970-01-01T00:00:00, Coordinated Universal Time (UTC). On systems that do not support timezones this function will behave as if local time were UTC.
.PP
On Windows, only a subset of \fIsecsSince1Jan1970UTC\fR values are supported, as Windows starts counting from 1980.
.PP
See also toTime_t().
.SH "void QDateTime::setTime_t ( uint secsSince1Jan1970UTC )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Convenience function that sets the date and time to local time based on the given UTC time.
.SH "QTime QDateTime::time () const"
Returns the time part of the datetime.
.PP
See also setTime() and date().
.SH "QString QDateTime::toString ( const QString & format ) const"
Returns the datetime as a string. The \fIformat\fR parameter determines the format of the result string.
.PP
These expressions may be used for the date:
.PP
<center>.nf
.TS
l - l. Expression Output d the day as number without a leading zero (1-31) dd the day as number with a leading zero (01-31) ddd the abbreviated localized day name (e.g. 'Mon'..'Sun'). Uses QDate::shortDayName(). dddd the long localized day name (e.g. 'Monday'..'Sunday'). Uses QDate::longDayName(). M the month as number without a leading zero (1-12) MM the month as number with a leading zero (01-12) MMM the abbreviated localized month name (e.g. 'Jan'..'Dec'). Uses QDate::shortMonthName(). MMMM the long localized month name (e.g. 'January'..'December'). Uses QDate::longMonthName(). yy the year as two digit number (00-99) yyyy
.TE
.fi
</center>
.PP
These expressions may be used for the time:
.PP
<center>.nf
.TS
l - l. Expression Output h the hour without a leading zero (0..23 or 1..12 if AM/PM display) hh the hour with a leading zero (00..23 or 01..12 if AM/PM display) m the minute without a leading zero (0..59) mm the minute with a leading zero (00..59) s the second whithout a leading zero (0..59) ss the second whith a leading zero (00..59) z the milliseconds without leading zeroes (0..999) zzz the milliseconds with leading zeroes (000..999) AP use AM/PM display. \fIAP\fR will be replaced by either "AM" or "PM". ap
.TE
.fi
</center>
.PP
All other input characters will be ignored.
.PP
Example format strings (assumed that the QDateTime is 21<small><sup>st</sup></small> May 2001 14:13:09)
.PP
<center>.nf
.TS
l - l. Format Result dd.MM.yyyy 21.05.2001 ddd MMMM d yy Tue May 21 01 hh:mm:ss.zzz 14:13:09.042 h:m:s ap
.TE
.fi
</center>
.PP
If the datetime is an invalid datetime, then QString::null will be returned.
.PP
See also QDate::toString() and QTime::toString().
.SH "QString QDateTime::toString ( Qt::DateFormat f = Qt::TextDate ) const"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Returns the datetime as a string. The \fIf\fR parameter determines the format of the string.
.PP
If \fIf\fR is Qt::TextDate, the string format is "Wed May 20 03:40:13 1998" (using QDate::shortDayName(), QDate::shortMonthName(), and QTime::toString() to generate the string, so the day and month names will have localized names).
.PP
If \fIf\fR is Qt::ISODate, the string format corresponds to the ISO 8601 extended specification for representations of dates and times, which is YYYY-MM-DDTHH:MM:SS.
.PP
If \fIf\fR is Qt::LocalDate, the string format depends on the locale settings of the system.
.PP
If the format \fIf\fR is invalid or the datetime is invalid, toString() returns a null string.
.PP
See also QDate::toString() and QTime::toString().
.SH "uint QDateTime::toTime_t () const"
Returns the datetime as the number of seconds that have passed since 1970-01-01T00:00:00, Coordinated Universal Time (UTC).
.PP
On systems that do not support timezones, this function will behave as if local time were UTC.
.PP
See also setTime_t().
.SH RELATED FUNCTION DOCUMENTATION
.SH "QDataStream & operator<< ( QDataStream & s, const QDateTime & dt )"
Writes the datetime \fIdt\fR to the stream \fIs\fR.
.PP
See also Format of the QDataStream operators.
.SH "QDataStream & operator>> ( QDataStream & s, QDateTime & dt )"
Reads a datetime from the stream \fIs\fR into \fIdt\fR.
.PP
See also Format of the QDataStream operators.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qdatetime.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qdatetime.3qt) and the Qt
version (3.3.8).
