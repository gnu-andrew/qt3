'\" t
.TH QWhatsThis 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QWhatsThis \- Simple description of any widget, i.e. answering the question "What's this?"
.SH SYNOPSIS
\fC#include <qwhatsthis.h>\fR
.PP
Inherits Qt.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQWhatsThis\fR ( QWidget * widget )"
.br
.ti -1c
.BI "virtual \fB~QWhatsThis\fR ()"
.br
.ti -1c
.BI "virtual QString \fBtext\fR ( const QPoint & )"
.br
.ti -1c
.BI "virtual bool \fBclicked\fR ( const QString & href )"
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "void \fBsetFont\fR ( const QFont & font )"
.br
.ti -1c
.BI "void \fBadd\fR ( QWidget * widget, const QString & text )"
.br
.ti -1c
.BI "void \fBremove\fR ( QWidget * widget )"
.br
.ti -1c
.BI "QString \fBtextFor\fR ( QWidget * w, const QPoint & pos = QPoint ( ), bool includeParents = FALSE )"
.br
.ti -1c
.BI "QToolButton * \fBwhatsThisButton\fR ( QWidget * parent )"
.br
.ti -1c
.BI "void \fBenterWhatsThisMode\fR ()"
.br
.ti -1c
.BI "bool \fBinWhatsThisMode\fR ()"
.br
.ti -1c
.BI "void \fBleaveWhatsThisMode\fR ( const QString & text = QString::null, const QPoint & pos = QCursor::pos ( ), QWidget * w = 0 )"
.br
.ti -1c
.BI "void \fBdisplay\fR ( const QString & text, const QPoint & pos = QCursor::pos ( ), QWidget * w = 0 )"
.br
.in -1c
.SH DESCRIPTION
The QWhatsThis class provides a simple description of any widget, i.e. answering the question "What's this?".
.PP
.PP"
What's this?" help is part of an application's online help system that provides users with information about functionality, usage, background etc., in various levels of detail from short tool tips to full text browsing help windows.
.PP
QWhatsThis provides a single window with an explanatory text that pops up when the user asks "What's this?". The default way to do this is to focus the relevant widget and press Shift+F1. The help text appears immediately; it goes away as soon as the user does something else.
.PP
(Note that if there is an accelerator for Shift+F1, this mechanism will not work.)
.PP
To add "What's this?" text to a widget you simply call QWhatsThis::add() for the widget. For example, to assign text to a menu item, call QMenuData::setWhatsThis(); for a global accelerator key, call QAccel::setWhatsThis() and If you're using actions, use QAction::setWhatsThis().
.PP
The text can be either rich text or plain text. If you specify a rich text formatted string, it will be rendered using the default stylesheet. This makes it possible to embed images. See QStyleSheet::defaultSheet() for details.
.PP
.nf
.br
        const char * fileOpenText = "<p><img source=\\"fileopen\\"> "
.br
                         "Click this button to open a <em>new file</em>. <br>"
.br
                         "You can also select the <b>Open</b> command "
.br
                         "from the <b>File</b> menu.</p>";
.br
        QMimeSourceFactory::defaultFactory()->setPixmap( "fileopen",
.br
                              fileOpenAction->iconSet().pixmap() );
.br
        fileOpenAction->setWhatsThis( fileOpenText );
.fi
.PP
An alternative way to enter "What's this?" mode is to use the ready-made tool bar tool button from QWhatsThis::whatsThisButton(). By invoking this context help button (in the picture below the first one from the right) the user switches into "What's this?" mode. If they now click on a widget the appropriate help text is shown. The mode is left when help is given or when the user presses Esc.
.PP
<center>
.ce 1
.B "[Image Omitted]"
.PP
</center>
.PP
If you are using QMainWindow you can also use the QMainWindow::whatsThis() slot to invoke the mode from a menu item.
.PP
For more control you can create a dedicated QWhatsThis object for a special widget. By subclassing and reimplementing QWhatsThis::text() it is possible to have different help texts, depending on the position of the mouse click. By reimplementing QWhatsThis::clicked() it is possible to have hyperlinks inside the help texts.
.PP
If you wish to control the "What's this?" behavior of a widget manually see QWidget::customWhatsThis().
.PP
The What's This object can be removed using QWhatsThis::remove(), although this is rarely necessary because it is automatically removed when the widget is destroyed.
.PP
See also QToolTip and Help System.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QWhatsThis::QWhatsThis ( QWidget * widget )"
Constructs a dynamic "What's this?" object for \fIwidget\fR. The object is deleted when the \fIwidget\fR is destroyed.
.PP
When the widget is queried by the user the text() function of this QWhatsThis will be called to provide the appropriate text, rather than using the text assigned by add().
.SH "QWhatsThis::~QWhatsThis ()\fC [virtual]\fR"
Destroys the object and frees any allocated resources.
.SH "void QWhatsThis::add ( QWidget * widget, const QString & text )\fC [static]\fR"
Adds \fItext\fR as "What's this" help for \fIwidget\fR. If the text is rich text formatted (i.e. it contains markup) it will be rendered with the default stylesheet QStyleSheet::defaultSheet().
.PP
The text is destroyed if the widget is later destroyed, so it need not be explicitly removed.
.PP
See also remove().
.PP
Examples:
.)l application/application.cpp, helpsystem/mainwindow.cpp, and mdi/application.cpp.
.SH "bool QWhatsThis::clicked ( const QString & href )\fC [virtual]\fR"
This virtual function is called when the user clicks inside the" What's this?" window. \fIhref\fR is the link the user clicked on, or QString::null if there was no link.
.PP
If the function returns TRUE (the default), the "What's this?" window is closed, otherwise it remains visible.
.PP
The default implementation ignores \fIhref\fR and returns TRUE.
.SH "void QWhatsThis::display ( const QString & text, const QPoint & pos = QCursor::pos ( ), QWidget * w = 0 )\fC [static]\fR"
Display \fItext\fR in a help window at the global screen position \fIpos\fR.
.PP
If widget \fIw\fR is not 0 and has its own dedicated QWhatsThis object, this object will receive clicked() messages when the user clicks on hyperlinks inside the help text.
.PP
See also QWhatsThis::clicked().
.SH "void QWhatsThis::enterWhatsThisMode ()\fC [static]\fR"
Enters "What's this?" mode and returns immediately.
.PP
Qt will install a special cursor and take over mouse input until the user clicks somewhere. It then shows any help available and ends "What's this?" mode. Finally, Qt removes the special cursor and help window and then restores ordinary event processing, at which point the left mouse button is no longer pressed.
.PP
The user can also use the Esc key to leave "What's this?" mode.
.PP
See also inWhatsThisMode() and leaveWhatsThisMode().
.SH "bool QWhatsThis::inWhatsThisMode ()\fC [static]\fR"
Returns TRUE if the application is in "What's this?" mode; otherwise returns FALSE.
.PP
See also enterWhatsThisMode() and leaveWhatsThisMode().
.SH "void QWhatsThis::leaveWhatsThisMode ( const QString & text = QString::null, const QPoint & pos = QCursor::pos ( ), QWidget * w = 0 )\fC [static]\fR"
Leaves "What's this?" question mode.
.PP
This function is used internally by widgets that support QWidget::customWhatsThis(); applications do not usually call it. An example of such a widget is QPopupMenu: menus still work normally in "What's this?" mode but also provide help texts for individual menu items.
.PP
If \fItext\fR is not QString::null, a "What's this?" help window is displayed at the global screen position \fIpos\fR. If widget \fIw\fR is not 0 and has its own dedicated QWhatsThis object, this object will receive clicked() messages when the user clicks on hyperlinks inside the help text.
.PP
See also inWhatsThisMode(), enterWhatsThisMode(), and QWhatsThis::clicked().
.SH "void QWhatsThis::remove ( QWidget * widget )\fC [static]\fR"
Removes the "What's this?" help associated with the \fIwidget\fR. This happens automatically if the widget is destroyed.
.PP
See also add().
.SH "void QWhatsThis::setFont ( const QFont & font )\fC [static]\fR"
Sets the font for all "What's this?" helps to \fIfont\fR.
.SH "QString QWhatsThis::text ( const QPoint & )\fC [virtual]\fR"
This virtual function returns the text for position \fIp\fR in the widget that this "What's this?" object documents. If there is no" What's this?" text for the position, QString::null is returned.
.PP
The default implementation returns QString::null.
.SH "QString QWhatsThis::textFor ( QWidget * w, const QPoint & pos = QPoint ( ), bool includeParents = FALSE )\fC [static]\fR"
Returns the what's this text for widget \fIw\fR or QString::null if there is no "What's this?" help for the widget. \fIpos\fR contains the mouse position; this is useful, for example, if you've subclassed to make the text that is displayed position dependent.
.PP
If \fIincludeParents\fR is TRUE, parent widgets are taken into consideration as well when looking for what's this help text.
.PP
See also add().
.SH "QToolButton * QWhatsThis::whatsThisButton ( QWidget * parent )\fC [static]\fR"
Creates a QToolButton preconfigured to enter "What's this?" mode when clicked. You will often use this with a tool bar as \fIparent\fR:
.PP
.nf
.br
        (void) QWhatsThis::whatsThisButton( my_help_tool_bar );
.br
.fi
.PP
Example: helpsystem/mainwindow.cpp.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qwhatsthis.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qwhatsthis.3qt) and the Qt
version (3.3.8).
