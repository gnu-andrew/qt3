'\" t
.TH QDialog 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QDialog \- The base class of dialog windows
.SH SYNOPSIS
\fC#include <qdialog.h>\fR
.PP
Inherits QWidget.
.PP
Inherited by QColorDialog, QErrorMessage, QFileDialog, QFontDialog, QInputDialog, QMessageBox, QMotifDialog, QProgressDialog, QTabDialog, and QWizard.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "explicit \fBQDialog\fR ( QWidget * parent = 0, const char * name = 0, bool modal = FALSE, WFlags f = 0 )"
.br
.ti -1c
.BI "\fB~QDialog\fR ()"
.br
.ti -1c
.BI "enum \fBDialogCode\fR { Rejected, Accepted }"
.br
.ti -1c
.BI "int \fBresult\fR () const"
.br
.ti -1c
.BI "virtual void \fBshow\fR ()"
.br
.ti -1c
.BI "void \fBsetOrientation\fR ( Orientation orientation )"
.br
.ti -1c
.BI "Orientation \fBorientation\fR () const"
.br
.ti -1c
.BI "void \fBsetExtension\fR ( QWidget * extension )"
.br
.ti -1c
.BI "QWidget * \fBextension\fR () const"
.br
.ti -1c
.BI "void \fBsetSizeGripEnabled\fR ( bool )"
.br
.ti -1c
.BI "bool \fBisSizeGripEnabled\fR () const"
.br
.ti -1c
.BI "void \fBsetModal\fR ( bool modal )"
.br
.ti -1c
.BI "bool \fBisModal\fR () const"
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "int \fBexec\fR ()"
.br
.in -1c
.SS "Properties"
.in +1c
.ti -1c
.BI "bool \fBmodal\fR - whether show() should pop up the dialog as modal or modeless"
.br
.ti -1c
.BI "bool \fBsizeGripEnabled\fR - whether the size grip is enabled"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "void \fBsetResult\fR ( int i )"
.br
.in -1c
.SS "Protected Slots"
.in +1c
.ti -1c
.BI "virtual void \fBdone\fR ( int r )"
.br
.ti -1c
.BI "virtual void \fBaccept\fR ()"
.br
.ti -1c
.BI "virtual void \fBreject\fR ()"
.br
.ti -1c
.BI "void \fBshowExtension\fR ( bool showIt )"
.br
.in -1c
.SH DESCRIPTION
The QDialog class is the base class of dialog windows.
.PP
A dialog window is a top-level window mostly used for short-term tasks and brief communications with the user. QDialogs may be modal or modeless. QDialogs support extensibility and can provide a return value. They can have default buttons. QDialogs can also have a QSizeGrip in their lower-right corner, using setSizeGripEnabled().
.PP
Note that QDialog uses the parent widget slightly differently from other classes in Qt. A dialog is always a top-level widget, but if it has a parent, its default location is centered on top of the parent's top-level widget (if it is not top-level itself). It will also share the parent's taskbar entry.
.SH "Modal Dialogs"
A \fBmodal\fR dialog is a dialog that blocks input to other visible windows in the same application. Users must finish interacting with the dialog and close it before they can access any other window in the application. Dialogs that are used to request a file name from the user or that are used to set application preferences are usually modal.
.PP
The most common way to display a modal dialog is to call its exec() function. When the user closes the dialog, exec() will provide a useful return value. Typically we connect a default button, e.g. "OK", to the accept() slot and a" Cancel" button to the reject() slot, to get the dialog to close and return the appropriate value. Alternatively you can connect to the done() slot, passing it Accepted or Rejected.
.PP
An alternative is to call setModal(TRUE), then show(). Unlike exec(), show() returns control to the caller immediately. Calling setModal(TRUE) is especially useful for progress dialogs, where the user must have the ability to interact with the dialog, e.g. to cancel a long running operation. If you use show() and setModal(TRUE) together you must call QApplication::processEvents() periodically during processing to enable the user to interact with the dialog. (See QProgressDialog.)
.SH "Modeless Dialogs"
A \fBmodeless\fR dialog is a dialog that operates independently of other windows in the same application. Find and replace dialogs in word-processors are often modeless to allow the user to interact with both the application's main window and with the dialog.
.PP
Modeless dialogs are displayed using show(), which returns control to the caller immediately.
.SH "Default button"
A dialog's \fIdefault\fR button is the button that's pressed when the user presses Enter (Return). This button is used to signify that the user accepts the dialog's settings and wants to close the dialog. Use QPushButton::setDefault(), QPushButton::isDefault() and QPushButton::autoDefault() to set and control the dialog's default button.
.SH "Escape Key"
If the user presses the Esc key in a dialog, QDialog::reject() will be called. This will cause the window to close: the closeEvent cannot be ignored.
.SH "Extensibility"
Extensibility is the ability to show the dialog in two ways: a partial dialog that shows the most commonly used options, and a full dialog that shows all the options. Typically an extensible dialog will initially appear as a partial dialog, but with a" More" toggle button. If the user presses the "More" button down, the full dialog will appear. The extension widget will be resized to its sizeHint(). If orientation is Horizontal the extension widget's height() will be expanded to the height() of the dialog. If the orientation is Vertical the extension widget's width() will be expanded to the width() of the dialog. Extensibility is controlled with setExtension(), setOrientation() and showExtension().
.SH "Return value (modal dialogs)"
Modal dialogs are often used in situations where a return value is required, e.g. to indicate whether the user pressed "OK" or" Cancel". A dialog can be closed by calling the accept() or the reject() slots, and exec() will return Accepted or Rejected as appropriate. The exec() call returns the result of the dialog. The result is also available from result() if the dialog has not been destroyed. If the WDestructiveClose flag is set, the dialog is deleted after exec() returns.
.SH "Examples"
A modal dialog.
.PP
.nf
.br
        QFileDialog *dlg = new QFileDialog( workingDirectory,
.br
                QString::null, 0, 0, TRUE );
.br
        dlg->setCaption( QFileDialog::tr( "Open" ) );
.br
        dlg->setMode( QFileDialog::ExistingFile );
.br
        QString result;
.br
        if ( dlg->exec() == QDialog::Accepted ) {
.br
            result = dlg->selectedFile();
.br
            workingDirectory = dlg->url();
.br
        }
.br
        delete dlg;
.br
        return result;
.fi
.PP
A modeless dialog. After the show() call, control returns to the main event loop.
.PP
.nf
.br
    int main( int argc, char **argv )
.br
    {
.br
        QApplication a( argc, argv );
.fi
.PP
.nf
.br
        int scale = 10;
.fi
.PP
.nf
.br
        LifeDialog *life = new LifeDialog( scale );
.br
        a.setMainWidget( life );
.br
        life->setCaption("Qt Example - Life");
.br
        life->show();
.fi
.PP
.nf
.br
        return a.exec();
.br
    }
.fi
.PP
See also QTabDialog, QWidget, QProgressDialog, GUI Design Handbook: Dialogs, Standard, Abstract Widget Classes, and Dialog Classes.
.SS "Member Type Documentation"
.SH "QDialog::DialogCode"
The value returned by a modal dialog.
.TP
\fCQDialog::Accepted\fR
.TP
\fCQDialog::Rejected\fR
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.SH "explicit QDialog::QDialog ( QWidget * parent = 0, const char * name = 0, bool modal = FALSE, WFlags f = 0 )"
Constructs a dialog called \fIname\fR, with parent \fIparent\fR.
.PP
A dialog is always a top-level widget, but if it has a parent, its default location is centered on top of the parent. It will also share the parent's taskbar entry.
.PP
The widget flags \fIf\fR are passed on to the QWidget constructor. If, for example, you don't want a What's This button in the titlebar of the dialog, pass WStyle_Customize | WStyle_NormalBorder | WStyle_Title | WStyle_SysMenu in \fIf\fR.
.PP
\fBWarning:\fR In Qt 3.2, the \fImodal\fR flag is obsolete. There is now a setModal() function that can be used for obtaining a modal behavior when calling show(). This is rarely needed, because modal dialogs are usually invoked using exec(), which ignores the \fImodal\fR flag.
.PP
See also QWidget::setWFlags() and Qt::WidgetFlags.
.SH "QDialog::~QDialog ()"
Destroys the QDialog, deleting all its children.
.SH "void QDialog::accept ()\fC [virtual protected slot]\fR"
Hides the modal dialog and sets the result code to Accepted.
.PP
See also reject() and done().
.PP
Examples:
.)l chart/setdataform.cpp and distributor/distributor.ui.h.
.SH "void QDialog::done ( int r )\fC [virtual protected slot]\fR"
Closes the dialog and sets its result code to \fIr\fR. If this dialog is shown with exec(), done() causes the local event loop to finish, and exec() to return \fIr\fR.
.PP
As with QWidget::close(), done() deletes the dialog if the WDestructiveClose flag is set. If the dialog is the application's main widget, the application terminates. If the dialog is the last window closed, the QApplication::lastWindowClosed() signal is emitted.
.PP
See also accept(), reject(), QApplication::mainWidget(), and QApplication::quit().
.SH "int QDialog::exec ()\fC [slot]\fR"
Shows the dialog as a modal dialog, blocking until the user closes it. The function returns a DialogCode result.
.PP
Users cannot interact with any other window in the same application until they close the dialog.
.PP
See also show() and result().
.PP
Examples:
.)l chart/chartform.cpp, dialog/mainwindow.cpp, i18n/main.cpp, network/ftpclient/ftpmainwindow.ui.h, network/networkprotocol/view.cpp, qdir/qdir.cpp, and wizard/main.cpp.
.SH "QWidget * QDialog::extension () const"
Returns the dialog's extension or 0 if no extension has been defined.
.PP
See also setExtension().
.SH "bool QDialog::isModal () const"
Returns TRUE if show() should pop up the dialog as modal or modeless; otherwise returns FALSE. See the "modal" property for details.
.SH "bool QDialog::isSizeGripEnabled () const"
Returns TRUE if the size grip is enabled; otherwise returns FALSE. See the "sizeGripEnabled" property for details.
.SH "Orientation QDialog::orientation () const"
Returns the dialog's extension orientation.
.PP
See also setOrientation().
.SH "void QDialog::reject ()\fC [virtual protected slot]\fR"
Hides the modal dialog and sets the result code to Rejected.
.PP
See also accept() and done().
.SH "int QDialog::result () const"
Returns the modal dialog's result code, Accepted or Rejected.
.PP
Do not call this function if the dialog was constructed with the WDestructiveClose flag.
.SH "void QDialog::setExtension ( QWidget * extension )"
Sets the widget, \fIextension\fR, to be the dialog's extension, deleting any previous extension. The dialog takes ownership of the extension. Note that if 0 is passed any existing extension will be deleted.
.PP
This function must only be called while the dialog is hidden.
.PP
See also showExtension(), setOrientation(), and extension().
.SH "void QDialog::setModal ( bool modal )"
Sets whether show() should pop up the dialog as modal or modeless to \fImodal\fR. See the "modal" property for details.
.SH "void QDialog::setOrientation ( Orientation orientation )"
If \fIorientation\fR is Horizontal, the extension will be displayed to the right of the dialog's main area. If \fIorientation\fR is Vertical, the extension will be displayed below the dialog's main area.
.PP
See also orientation() and setExtension().
.SH "void QDialog::setResult ( int i )\fC [protected]\fR"
Sets the modal dialog's result code to \fIi\fR.
.SH "void QDialog::setSizeGripEnabled ( bool )"
Sets whether the size grip is enabled. See the "sizeGripEnabled" property for details.
.SH "void QDialog::show ()\fC [virtual]\fR"
Shows the dialog as a modeless dialog. Control returns immediately to the calling code.
.PP
The dialog will be modal or modeless according to the value of the modal property.
.PP
See also exec() and modal.
.PP
Examples:
.)l movies/main.cpp, regexptester/main.cpp, showimg/showimg.cpp, and sql/overview/form1/main.cpp.
.PP
Reimplemented from QWidget.
.SH "void QDialog::showExtension ( bool showIt )\fC [protected slot]\fR"
If \fIshowIt\fR is TRUE, the dialog's extension is shown; otherwise the extension is hidden.
.PP
This slot is usually connected to the QButton::toggled() signal of a QPushButton.
.PP
A dialog with a visible extension is not resizeable.
.PP
See also show(), setExtension(), and setOrientation().
.SS "Property Documentation"
.SH "bool modal"
This property holds whether show() should pop up the dialog as modal or modeless.
.PP
By default, this property is false and show() pops up the dialog as modeless.
.PP
exec() ignores the value of this property and always pops up the dialog as modal.
.PP
See also show() and exec().
.PP
Set this property's value with setModal() and get this property's value with isModal().
.SH "bool sizeGripEnabled"
This property holds whether the size grip is enabled.
.PP
A QSizeGrip is placed in the bottom right corner of the dialog when this property is enabled. By default, the size grip is disabled.
.PP
Set this property's value with setSizeGripEnabled() and get this property's value with isSizeGripEnabled().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qdialog.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qdialog.3qt) and the Qt
version (3.3.8).
