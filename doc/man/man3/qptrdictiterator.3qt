'\" t
.TH QPtrDictIterator 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QPtrDictIterator \- Iterator for QPtrDict collections
.SH SYNOPSIS
\fC#include <qptrdict.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQPtrDictIterator\fR ( const QPtrDict<type> & dict )"
.br
.ti -1c
.BI "\fB~QPtrDictIterator\fR ()"
.br
.ti -1c
.BI "uint \fBcount\fR () const"
.br
.ti -1c
.BI "bool \fBisEmpty\fR () const"
.br
.ti -1c
.BI "type * \fBtoFirst\fR ()"
.br
.ti -1c
.BI "\fBoperator type *\fR () const"
.br
.ti -1c
.BI "type * \fBcurrent\fR () const"
.br
.ti -1c
.BI "void * \fBcurrentKey\fR () const"
.br
.ti -1c
.BI "type * \fBoperator()\fR ()"
.br
.ti -1c
.BI "type * \fBoperator++\fR ()"
.br
.ti -1c
.BI "type * \fBoperator+=\fR ( uint jump )"
.br
.in -1c
.SH DESCRIPTION
The QPtrDictIterator class provides an iterator for QPtrDict collections.
.PP
QPtrDictIterator is implemented as a template class. Define a template instance QPtrDictIterator<X> to create a dictionary iterator that operates on QPtrDict<X> (dictionary of X*).
.PP
Example:
.PP
.nf
.br
    QPtrDict<char> fields;
.br
.br
    QLineEdit *le1 = new QLineEdit( this );
.br
    le1->setText( "Simpson" );
.br
    QLineEdit *le2 = new QLineEdit( this );
.br
    le2->setText( "Homer" );
.br
    QLineEdit *le3 = new QLineEdit( this );
.br
    le3->setText( "45" );
.br
.br
    fields.insert( le1, "Surname" );
.br
    fields.insert( le2, "Forename" );
.br
    fields.insert( le3, "Age" );
.br
.br
    QPtrDictIterator<char> it( fields );
.br
    for( ; it.current(); ++it ) {
.br
        QLineEdit *le = (QLineEdit)it.currentKey();
.br
        cout << it.current() << ": " << le->text() << endl;
.br
    }
.br
    cout << endl;
.br
.br
    // Output (random order):
.br
    //  Forename: Homer
.br
    //  Age: 45
.br
    //  Surname: Simpson
.br
.fi
In the example we insert some line edits into a dictionary, associating a string with each. We then iterate over the dictionary printing the associated strings.
.PP
Multiple iterators may independently traverse the same dictionary. A QPtrDict knows about all the iterators that are operating on the dictionary. When an item is removed from the dictionary, QPtrDict updates all iterators that refer the removed item to point to the next item in the traversing order.
.PP
See also QPtrDict, Collection Classes, and Non-GUI Classes.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QPtrDictIterator::QPtrDictIterator ( const QPtrDict<type> & dict )"
Constructs an iterator for \fIdict\fR. The current iterator item is set to point on the first item in the \fIdict\fR.
.SH "QPtrDictIterator::~QPtrDictIterator ()"
Destroys the iterator.
.SH "uint QPtrDictIterator::count () const"
Returns the number of items in the dictionary this iterator operates on.
.PP
See also isEmpty().
.SH "type * QPtrDictIterator::current () const"
Returns a pointer to the current iterator item's value.
.SH "void * QPtrDictIterator::currentKey () const"
Returns the current iterator item's key.
.SH "bool QPtrDictIterator::isEmpty () const"
Returns TRUE if the dictionary is empty; otherwise returns FALSE.
.PP
See also count().
.SH "QPtrDictIterator::operator type * () const"
Cast operator. Returns a pointer to the current iterator item. Same as current().
.SH "type * QPtrDictIterator::operator() ()"
Makes the succeeding item current and returns the original current item.
.PP
If the current iterator item was the last item in the dictionary or if it was 0, 0 is returned.
.SH "type * QPtrDictIterator::operator++ ()"
Prefix ++ makes the succeeding item current and returns the new current item.
.PP
If the current iterator item was the last item in the dictionary or if it was 0, 0 is returned.
.SH "type * QPtrDictIterator::operator+= ( uint jump )"
Sets the current item to the item \fIjump\fR positions after the current item and returns a pointer to that item.
.PP
If that item is beyond the last item or if the dictionary is empty, it sets the current item to 0 and returns 0.
.SH "type * QPtrDictIterator::toFirst ()"
Sets the current iterator item to point to the first item in the
dictionary and returns a pointer to the item. If the dictionary is
empty, it sets the current item to 0 and returns 0.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qptrdictiterator.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qptrdictiterator.3qt) and the Qt
version (3.3.8).
