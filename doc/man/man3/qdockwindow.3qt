'\" t
.TH QDockWindow 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QDockWindow \- Widget which can be docked inside a QDockArea or floated as a top level window on the desktop
.SH SYNOPSIS
\fC#include <qdockwindow.h>\fR
.PP
Inherits QFrame.
.PP
Inherited by QToolBar.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "enum \fBPlace\fR { InDock, OutsideDock }"
.br
.ti -1c
.BI "enum \fBCloseMode\fR { Never = 0, Docked = 1, Undocked = 2, Always = Docked | Undocked }"
.br
.ti -1c
.BI "\fBQDockWindow\fR ( Place p = InDock, QWidget * parent = 0, const char * name = 0, WFlags f = 0 )"
.br
.ti -1c
.BI "\fBQDockWindow\fR ( QWidget * parent, const char * name = 0, WFlags f = 0 )"
.br
.ti -1c
.BI "virtual void \fBsetWidget\fR ( QWidget * w )"
.br
.ti -1c
.BI "QWidget * \fBwidget\fR () const"
.br
.ti -1c
.BI "Place \fBplace\fR () const"
.br
.ti -1c
.BI "QDockArea * \fBarea\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetCloseMode\fR ( int m )"
.br
.ti -1c
.BI "bool \fBisCloseEnabled\fR () const"
.br
.ti -1c
.BI "int \fBcloseMode\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetResizeEnabled\fR ( bool b )"
.br
.ti -1c
.BI "virtual void \fBsetMovingEnabled\fR ( bool b )"
.br
.ti -1c
.BI "bool \fBisResizeEnabled\fR () const"
.br
.ti -1c
.BI "bool \fBisMovingEnabled\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetHorizontallyStretchable\fR ( bool b )"
.br
.ti -1c
.BI "virtual void \fBsetVerticallyStretchable\fR ( bool b )"
.br
.ti -1c
.BI "bool \fBisHorizontallyStretchable\fR () const"
.br
.ti -1c
.BI "bool \fBisVerticallyStretchable\fR () const"
.br
.ti -1c
.BI "void setHorizontalStretchable ( bool b )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "void setVerticalStretchable ( bool b )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "bool isHorizontalStretchable () const  \fI(obsolete)\fR"
.br
.ti -1c
.BI "bool isVerticalStretchable () const  \fI(obsolete)\fR"
.br
.ti -1c
.BI "bool \fBisStretchable\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetOffset\fR ( int o )"
.br
.ti -1c
.BI "int \fBoffset\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetFixedExtentWidth\fR ( int w )"
.br
.ti -1c
.BI "virtual void \fBsetFixedExtentHeight\fR ( int h )"
.br
.ti -1c
.BI "QSize \fBfixedExtent\fR () const"
.br
.ti -1c
.BI "virtual void \fBsetNewLine\fR ( bool b )"
.br
.ti -1c
.BI "bool \fBnewLine\fR () const"
.br
.ti -1c
.BI "Qt::Orientation \fBorientation\fR () const"
.br
.ti -1c
.BI "QBoxLayout * \fBboxLayout\fR ()"
.br
.ti -1c
.BI "virtual void \fBsetOpaqueMoving\fR ( bool b )"
.br
.ti -1c
.BI "bool \fBopaqueMoving\fR () const"
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "virtual void \fBundock\fR ()"
.br
.ti -1c
.BI "virtual void \fBdock\fR ()"
.br
.ti -1c
.BI "virtual void \fBsetOrientation\fR ( Orientation o )"
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void \fBorientationChanged\fR ( Orientation o )"
.br
.ti -1c
.BI "void \fBplaceChanged\fR ( QDockWindow::Place p )"
.br
.ti -1c
.BI "void \fBvisibilityChanged\fR ( bool visible )"
.br
.in -1c
.SS "Properties"
.in +1c
.ti -1c
.BI "int \fBcloseMode\fR - the close mode of a dock window"
.br
.ti -1c
.BI "bool \fBhorizontallyStretchable\fR - whether the dock window is horizontally stretchable"
.br
.ti -1c
.BI "bool \fBmovingEnabled\fR - whether the user can move the dock window within the dock " "area" ", move the dock window to another dock " "area" ", or float the dock window"
.br
.ti -1c
.BI "bool \fBnewLine\fR - whether the dock window prefers to start a new line in the dock area"
.br
.ti -1c
.BI "int \fBoffset\fR - the dock window's preferred offset from the dock area's left edge (top edge for vertical dock " "areas" ")"
.br
.ti -1c
.BI "bool \fBopaqueMoving\fR - whether the dock window will be shown normally whilst it is being moved"
.br
.ti -1c
.BI "Place \fBplace\fR  \fI(read " "only" ")\fR"
.br
.ti -1c
.BI "bool \fBresizeEnabled\fR - whether the dock window is resizeable"
.br
.ti -1c
.BI "bool \fBstretchable\fR - whether the dock window is stretchable in the current orientation()  \fI(read " "only" ")\fR"
.br
.ti -1c
.BI "bool \fBverticallyStretchable\fR - whether the dock window is vertically stretchable"
.br
.in -1c
.SH DESCRIPTION
The QDockWindow class provides a widget which can be docked inside a QDockArea or floated as a top level window on the desktop.
.PP
This class handles moving, resizing, docking and undocking dock windows. QToolBar is a subclass of QDockWindow so the functionality provided for dock windows is available with the same API for toolbars.
.PP
<center>
.ce 1
.B "[Image Omitted]"
.PP
</center> <blockquote><p align="center">\fI Two QDockWindows (QToolBars) in a QDockArea \fR</p> </blockquote>
.PP
<center>
.ce 1
.B "[Image Omitted]"
.PP
</center> <blockquote><p align="center">\fI A Floating QDockWindow \fR</p> </blockquote>
.PP
If the user drags the dock window into the dock area the dock window will be docked. If the user drags the dock area outside any dock areas the dock window will be undocked (floated) and will become a top level window. Double clicking a floating dock window's titlebar will dock the dock window to the last dock area it was docked in. Double clicking a docked dock window's handle will undock (float) the dock window. If the user clicks the close button (which does not appear on dock windows by default - see closeMode) the dock window will disappear. You can control whether or not a dock window has a close button with setCloseMode().
.PP
QMainWindow provides four dock areas (top, left, right and bottom) which can be used by dock windows. For many applications using the dock areas provided by QMainWindow is sufficient. (See the QDockArea documentation if you want to create your own dock areas.) In QMainWindow a right-click popup menu (the dock window menu) is available which lists dock windows and can be used to show or hide them. (The popup menu only lists dock windows that have a caption.)
.PP
When you construct a dock window you \fImust\fR pass it a QDockArea or a QMainWindow as its parent if you want it docked. Pass 0 for the parent if you want it floated.
.PP
.nf
.br
    QToolBar *fileTools = new QToolBar( this, "File Actions" );
.br
    moveDockWindow( fileTools, Left );
.br
.fi
.PP
In the example above we create a new QToolBar in the constructor of a QMainWindow subclass (so that the \fIthis\fR pointer points to the QMainWindow). By default the toolbar will be added to the Top dock area, but we've moved it to the Left dock area.
.PP
A dock window is often used to contain a single widget. In these cases the widget can be set by calling setWidget(). If you're constructing a dock window that contains multiple widgets, e.g. a toolbar, arrange the widgets within a box layout inside the dock window. To do this use the boxLayout() function to get a pointer to the dock window's box layout, then add widgets to the layout using the box layout's QBoxLayout::addWidget() function. The dock window will dynamically set the orientation of the layout to be vertical or horizontal as necessary, although you can control this yourself with setOrientation().
.PP
Although a common use of dock windows is for toolbars, they can be used with any widgets. (See the Qt Designer and Qt Linguist applications, for example.) When using larger widgets it may make sense for the dock window to be resizable by calling setResizeEnabled(). Resizable dock windows are given splitter-like handles to allow the user to resize them within their dock area. When resizable dock windows are undocked they become top level windows and can be resized like any other top level windows, e.g. by dragging a corner or edge.
.PP
Dock windows can be docked and undocked using dock() and undock(). A dock window's orientation can be set with setOrientation(). You can also use QDockArea::moveDockWindow(). If you're using a QMainWindow, QMainWindow::moveDockWindow() and QMainWindow::removeDockWindow() are available.
.PP
A dock window can have some preferred settings, for example, you can set a preferred offset from the left edge (or top edge for vertical dock areas) of the dock area using setOffset(). If you'd prefer a dock window to start on a new line when it is docked use setNewLine(). The setFixedExtentWidth() and setFixedExtentHeight() functions can be used to define the dock window's preferred size, and the setHorizontallyStretchable() and setVerticallyStretchable() functions set whether the dock window can be stretched or not. Dock windows can be moved by default, but this can be changed with setMovingEnabled(). When a dock window is moved it is shown as a rectangular outline, but it can be shown normally using setOpaqueMoving().
.PP
When a dock window's visibility changes, i.e. it is shown or hidden, the visibilityChanged() signal is emitted. When a dock window is docked, undocked or moved inside the dock area the placeChanged() signal is emitted.
.PP
See also Main Window and Related Classes.
.SS "Member Type Documentation"
.SH "QDockWindow::CloseMode"
This enum type specifies when (if ever) a dock window has a close button.
.TP
\fCQDockWindow::Never\fR - The dock window never has a close button and cannot be closed by the user.
.TP
\fCQDockWindow::Docked\fR - The dock window has a close button only when docked.
.TP
\fCQDockWindow::Undocked\fR - The dock window has a close button only when floating.
.TP
\fCQDockWindow::Always\fR - The dock window always has a close button.
.SH "QDockWindow::Place"
This enum specifies the possible locations for a QDockWindow:
.TP
\fCQDockWindow::InDock\fR - Inside a QDockArea.
.TP
\fCQDockWindow::OutsideDock\fR - Floating as a top level window on the desktop.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QDockWindow::QDockWindow ( Place p = InDock, QWidget * parent = 0, const char * name = 0, WFlags f = 0 )"
Constructs a QDockWindow with parent \fIparent\fR, called \fIname\fR and with widget flags \fIf\fR.
.PP
If \fIp\fR is InDock, the dock window is docked into a dock area and \fIparent\fR \fImust\fR be a QDockArea or a QMainWindow. If the \fIparent\fR is a QMainWindow the dock window will be docked in the main window's Top dock area.
.PP
If \fIp\fR is OutsideDock, the dock window is created as a floating window.
.PP
We recommend creating the dock area InDock with a QMainWindow as parent then calling QMainWindow::moveDockWindow() to move the dock window where you want it.
.SH "QDockWindow::QDockWindow ( QWidget * parent, const char * name = 0, WFlags f = 0 )"
Constructs a QDockWindow with parent \fIparent\fR, called \fIname\fR and with widget flags \fIf\fR.
.SH "QDockArea * QDockWindow::area () const"
Returns the dock area in which this dock window is docked, or 0 if the dock window is floating.
.SH "QBoxLayout * QDockWindow::boxLayout ()"
Returns the layout which is used for adding widgets to the dock window. The layout's orientation is set automatically to match the orientation of the dock window. You can add widgets to the layout using the box layout's QBoxLayout::addWidget() function.
.PP
If the dock window only needs to contain a single widget use setWidget() instead.
.PP
See also setWidget() and setOrientation().
.SH "int QDockWindow::closeMode () const"
Returns the close mode of a dock window. See the "closeMode" property for details.
.SH "void QDockWindow::dock ()\fC [virtual slot]\fR"
Docks the dock window into the last dock area in which it was docked.
.PP
If the dock window has no last dock area (e.g. it was created as a floating window and has never been docked), or if the last dock area it was docked in does not exist (e.g. the dock area has been deleted), nothing happens.
.PP
The dock window will dock with the dock area regardless of the return value of QDockArea::isDockWindowAccepted().
.PP
See also undock(), QDockArea::moveDockWindow(), QDockArea::removeDockWindow(), QMainWindow::moveDockWindow(), QMainWindow::removeDockWindow(), and QDockArea::isDockWindowAccepted().
.SH "QSize QDockWindow::fixedExtent () const"
Returns the dock window's preferred size (fixed extent).
.PP
See also setFixedExtentWidth() and setFixedExtentHeight().
.SH "bool QDockWindow::isCloseEnabled () const"
Returns TRUE if the dock window has a close button; otherwise returns FALSE. The result depends on the dock window's Place and its CloseMode.
.PP
See also closeMode.
.SH "bool QDockWindow::isHorizontalStretchable () const"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.SH "bool QDockWindow::isHorizontallyStretchable () const"
Returns TRUE if the dock window is horizontally stretchable; otherwise returns FALSE. See the "horizontallyStretchable" property for details.
.SH "bool QDockWindow::isMovingEnabled () const"
Returns TRUE if the user can move the dock window within the dock area, move the dock window to another dock area, or float the dock window; otherwise returns FALSE. See the "movingEnabled" property for details.
.SH "bool QDockWindow::isResizeEnabled () const"
Returns TRUE if the dock window is resizeable; otherwise returns FALSE. See the "resizeEnabled" property for details.
.SH "bool QDockWindow::isStretchable () const"
Returns TRUE if the dock window is stretchable in the current orientation(); otherwise returns FALSE. See the "stretchable" property for details.
.SH "bool QDockWindow::isVerticalStretchable () const"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.SH "bool QDockWindow::isVerticallyStretchable () const"
Returns TRUE if the dock window is vertically stretchable; otherwise returns FALSE. See the "verticallyStretchable" property for details.
.SH "bool QDockWindow::newLine () const"
Returns TRUE if the dock window prefers to start a new line in the dock area; otherwise returns FALSE. See the "newLine" property for details.
.SH "int QDockWindow::offset () const"
Returns the dock window's preferred offset from the dock area's left edge (top edge for vertical dock areas). See the "offset" property for details.
.SH "bool QDockWindow::opaqueMoving () const"
Returns TRUE if the dock window will be shown normally whilst it is being moved; otherwise returns FALSE. See the "opaqueMoving" property for details.
.SH "Qt::Orientation QDockWindow::orientation () const"
Returns the orientation of the dock window.
.PP
See also orientationChanged().
.SH "void QDockWindow::orientationChanged ( Orientation o )\fC [signal]\fR"
This signal is emitted when the orientation of the dock window is changed. The new orientation is \fIo\fR.
.SH "Place QDockWindow::place () const"
This function returns where the dock window is placed. This is either InDock or OutsideDock.
.PP
See also QDockArea::moveDockWindow(), QDockArea::removeDockWindow(), QMainWindow::moveDockWindow(), and QMainWindow::removeDockWindow().
.SH "void QDockWindow::placeChanged ( QDockWindow::Place p )\fC [signal]\fR"
This signal is emitted when the dock window is docked (\fIp\fR is InDock), undocked (\fIp\fR is OutsideDock) or moved inside the the dock area.
.PP
See also QDockArea::moveDockWindow(), QDockArea::removeDockWindow(), QMainWindow::moveDockWindow(), and QMainWindow::removeDockWindow().
.SH "void QDockWindow::setCloseMode ( int m )\fC [virtual]\fR"
Sets the close mode of a dock window to \fIm\fR. See the "closeMode" property for details.
.SH "void QDockWindow::setFixedExtentHeight ( int h )\fC [virtual]\fR"
Sets the dock window's preferred height for its fixed extent (size) to \fIh\fR.
.PP
See also setFixedExtentWidth().
.SH "void QDockWindow::setFixedExtentWidth ( int w )\fC [virtual]\fR"
Sets the dock window's preferred width for its fixed extent (size) to \fIw\fR.
.PP
See also setFixedExtentHeight().
.SH "void QDockWindow::setHorizontalStretchable ( bool b )"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.SH "void QDockWindow::setHorizontallyStretchable ( bool b )\fC [virtual]\fR"
Sets whether the dock window is horizontally stretchable to \fIb\fR. See the "horizontallyStretchable" property for details.
.SH "void QDockWindow::setMovingEnabled ( bool b )\fC [virtual]\fR"
Sets whether the user can move the dock window within the dock area, move the dock window to another dock area, or float the dock window to \fIb\fR. See the "movingEnabled" property for details.
.SH "void QDockWindow::setNewLine ( bool b )\fC [virtual]\fR"
Sets whether the dock window prefers to start a new line in the dock area to \fIb\fR. See the "newLine" property for details.
.SH "void QDockWindow::setOffset ( int o )\fC [virtual]\fR"
Sets the dock window's preferred offset from the dock area's left edge (top edge for vertical dock areas) to \fIo\fR. See the "offset" property for details.
.SH "void QDockWindow::setOpaqueMoving ( bool b )\fC [virtual]\fR"
Sets whether the dock window will be shown normally whilst it is being moved to \fIb\fR. See the "opaqueMoving" property for details.
.SH "void QDockWindow::setOrientation ( Orientation o )\fC [virtual slot]\fR"
Sets the orientation of the dock window to \fIo\fR. The orientation is propagated to the layout boxLayout().
.PP
\fBWarning:\fR All undocked QToolBars will always have a horizontal orientation.
.SH "void QDockWindow::setResizeEnabled ( bool b )\fC [virtual]\fR"
Sets whether the dock window is resizeable to \fIb\fR. See the "resizeEnabled" property for details.
.SH "void QDockWindow::setVerticalStretchable ( bool b )"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.SH "void QDockWindow::setVerticallyStretchable ( bool b )\fC [virtual]\fR"
Sets whether the dock window is vertically stretchable to \fIb\fR. See the "verticallyStretchable" property for details.
.SH "void QDockWindow::setWidget ( QWidget * w )\fC [virtual]\fR"
Sets the dock window's main widget to \fIw\fR.
.PP
See also boxLayout().
.SH "void QDockWindow::undock ()\fC [virtual slot]\fR"
Undocks the QDockWindow from its current dock area if it is docked; otherwise does nothing.
.PP
See also dock(), QDockArea::moveDockWindow(), QDockArea::removeDockWindow(), QMainWindow::moveDockWindow(), and QMainWindow::removeDockWindow().
.SH "void QDockWindow::visibilityChanged ( bool visible )\fC [signal]\fR"
This signal is emitted when the visibility of the dock window relatively to its dock area is changed. If \fIvisible\fR is TRUE, the QDockWindow is now visible to the dock area, otherwise it has been hidden.
.PP
A dock window can be hidden if it has a close button which the user has clicked. In the case of a QMainWindow a dock window can have its visibility changed (hidden or shown) by clicking its name in the dock window menu that lists the QMainWindow's dock windows.
.SH "QWidget * QDockWindow::widget () const"
Returns the dock window's main widget.
.PP
See also setWidget().
.SS "Property Documentation"
.SH "int closeMode"
This property holds the close mode of a dock window.
.PP
Defines when (if ever) the dock window has a close button. The choices are Never, Docked (i.e. only when docked), Undocked (only when undocked, i.e. floated) or Always.
.PP
The default is Never.
.PP
Set this property's value with setCloseMode() and get this property's value with closeMode().
.SH "bool horizontallyStretchable"
This property holds whether the dock window is horizontally stretchable.
.PP
A dock window is horizontally stretchable if you call setHorizontallyStretchable(TRUE) or setResizeEnabled(TRUE).
.PP
See also resizeEnabled.
.PP
Bugs and limitations:
.TP
Strecthability is broken. You must call setResizeEnabled(TRUE) to get proper behavior and even then QDockWindow does not limit stretchablilty.
.PP
Set this property's value with setHorizontallyStretchable() and get this property's value with isHorizontallyStretchable().
.SH "bool movingEnabled"
This property holds whether the user can move the dock window within the dock area, move the dock window to another dock area, or float the dock window.
.PP
This property is TRUE by default.
.PP
Set this property's value with setMovingEnabled() and get this property's value with isMovingEnabled().
.SH "bool newLine"
This property holds whether the dock window prefers to start a new line in the dock area.
.PP
The default is FALSE, i.e. the dock window doesn't require a new line in the dock area.
.PP
Set this property's value with setNewLine() and get this property's value with newLine().
.SH "int offset"
This property holds the dock window's preferred offset from the dock area's left edge (top edge for vertical dock areas).
.PP
The default is 0.
.PP
Set this property's value with setOffset() and get this property's value with offset().
.SH "bool opaqueMoving"
This property holds whether the dock window will be shown normally whilst it is being moved.
.PP
If this property is FALSE, (the default), the dock window will be represented by an outline rectangle whilst it is being moved.
.PP
\fBWarning:\fR Currently opaque moving has some problems and we do not recommend using it at this time. We expect to fix these problems in a future release.
.PP
Set this property's value with setOpaqueMoving() and get this property's value with opaqueMoving().
.SH "bool resizeEnabled"
This property holds whether the dock window is resizeable.
.PP
A resizeable dock window can be resized using splitter-like handles inside a dock area and like every other top level window when floating.
.PP
A dock window is both horizontally and vertically stretchable if you call setResizeEnabled(TRUE).
.PP
This property is FALSE by default.
.PP
See also verticallyStretchable and horizontallyStretchable.
.PP
Set this property's value with setResizeEnabled() and get this property's value with isResizeEnabled().
.SH "bool stretchable"
This property holds whether the dock window is stretchable in the current orientation().
.PP
This property can be set using setHorizontallyStretchable() and setVerticallyStretchable(), or with setResizeEnabled().
.PP
See also resizeEnabled.
.PP
Bugs and limitations:
.TP
Strecthability is broken. You must call setResizeEnabled(TRUE) to get proper behavior and even then QDockWindow does not limit stretchablilty.
.PP
Get this property's value with isStretchable().
.SH "bool verticallyStretchable"
This property holds whether the dock window is vertically stretchable.
.PP
A dock window is vertically stretchable if you call setVerticallyStretchable(TRUE) or setResizeEnabled(TRUE).
.PP
See also resizeEnabled.
.PP
Bugs and limitations:
.TP
Strecthability is broken. You must call setResizeEnabled(TRUE) to get proper behavior and even then QDockWindow does not limit stretchablilty.
.PP
Set this property's value with setVerticallyStretchable() and get this property's value with isVerticallyStretchable().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qdockwindow.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qdockwindow.3qt) and the Qt
version (3.3.8).
