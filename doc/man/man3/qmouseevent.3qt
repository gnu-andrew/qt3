'\" t
.TH QMouseEvent 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QMouseEvent \- Parameters that describe a mouse event
.SH SYNOPSIS
\fC#include <qevent.h>\fR
.PP
Inherits QEvent.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQMouseEvent\fR ( Type type, const QPoint & pos, int button, int state )"
.br
.ti -1c
.BI "\fBQMouseEvent\fR ( Type type, const QPoint & pos, const QPoint & globalPos, int button, int state )"
.br
.ti -1c
.BI "const QPoint & \fBpos\fR () const"
.br
.ti -1c
.BI "const QPoint & \fBglobalPos\fR () const"
.br
.ti -1c
.BI "int \fBx\fR () const"
.br
.ti -1c
.BI "int \fBy\fR () const"
.br
.ti -1c
.BI "int \fBglobalX\fR () const"
.br
.ti -1c
.BI "int \fBglobalY\fR () const"
.br
.ti -1c
.BI "ButtonState \fBbutton\fR () const"
.br
.ti -1c
.BI "ButtonState \fBstate\fR () const"
.br
.ti -1c
.BI "ButtonState \fBstateAfter\fR () const"
.br
.ti -1c
.BI "bool \fBisAccepted\fR () const"
.br
.ti -1c
.BI "void \fBaccept\fR ()"
.br
.ti -1c
.BI "void \fBignore\fR ()"
.br
.in -1c
.SH DESCRIPTION
The QMouseEvent class contains parameters that describe a mouse event.
.PP
Mouse events occur when a mouse button is pressed or released inside a widget or when the mouse cursor is moved.
.PP
Mouse move events will occur only when a mouse button is pressed down, unless mouse tracking has been enabled with QWidget::setMouseTracking().
.PP
Qt automatically grabs the mouse when a mouse button is pressed inside a widget; the widget will continue to receive mouse events until the last mouse button is released.
.PP
A mouse event contains a special accept flag that indicates whether the receiver wants the event. You should call QMouseEvent::ignore() if the mouse event is not handled by your widget. A mouse event is propagated up the parent widget chain until a widget accepts it with QMouseEvent::accept() or an event filter consumes it.
.PP
The functions pos(), x() and y() give the cursor position relative to the widget that receives the mouse event. If you move the widget as a result of the mouse event, use the global position returned by globalPos() to avoid a shaking motion.
.PP
The QWidget::setEnabled() function can be used to enable or disable mouse and keyboard events for a widget.
.PP
The event handlers QWidget::mousePressEvent(), QWidget::mouseReleaseEvent(), QWidget::mouseDoubleClickEvent() and QWidget::mouseMoveEvent() receive mouse events.
.PP
See also QWidget::mouseTracking, QWidget::grabMouse(), QCursor::pos(), and Event Classes.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QMouseEvent::QMouseEvent ( Type type, const QPoint & pos, int button, int state )"
Constructs a mouse event object.
.PP
The \fItype\fR parameter must be one of QEvent::MouseButtonPress, QEvent::MouseButtonRelease, QEvent::MouseButtonDblClick or QEvent::MouseMove.
.PP
The \fIpos\fR parameter specifies the position relative to the receiving widget. \fIbutton\fR specifies the button that caused the event, which should be Qt::NoButton (0), if \fItype\fR is MouseMove. \fIstate\fR is the ButtonState at the time of the event.
.PP
The globalPos() is initialized to QCursor::pos(), which may not be appropriate. Use the other constructor to specify the global position explicitly.
.SH "QMouseEvent::QMouseEvent ( Type type, const QPoint & pos, const QPoint & globalPos, int button, int state )"
Constructs a mouse event object.
.PP
The \fItype\fR parameter must be QEvent::MouseButtonPress, QEvent::MouseButtonRelease, QEvent::MouseButtonDblClick or QEvent::MouseMove.
.PP
The \fIpos\fR parameter specifies the position relative to the receiving widget. \fIglobalPos\fR is the position in absolute coordinates. \fIbutton\fR specifies the button that caused the event, which should be Qt::NoButton (0), if \fItype\fR is MouseMove. \fIstate\fR is the ButtonState at the time of the event.
.SH "void QMouseEvent::accept ()"
Sets the accept flag of the mouse event object.
.PP
Setting the accept parameter indicates that the receiver of the event wants the mouse event. Unwanted mouse events are sent to the parent widget.
.PP
The accept flag is set by default.
.PP
See also ignore().
.SH "ButtonState QMouseEvent::button () const"
Returns the button that caused the event.
.PP
Possible return values are LeftButton, RightButton, MidButton and NoButton.
.PP
Note that the returned value is always NoButton for mouse move events.
.PP
See also state() and Qt::ButtonState.
.PP
Examples:
.)l dclock/dclock.cpp, life/life.cpp, and t14/cannon.cpp.
.SH "const QPoint & QMouseEvent::globalPos () const"
Returns the global position of the mouse pointer \fIat the time of the event\fR. This is important on asynchronous window systems like X11. Whenever you move your widgets around in response to mouse events, globalPos() may differ a lot from the current pointer position QCursor::pos(), and from QWidget::mapToGlobal( pos() ).
.PP
See also globalX() and globalY().
.PP
Example: aclock/aclock.cpp.
.SH "int QMouseEvent::globalX () const"
Returns the global x-position of the mouse pointer at the time of the event.
.PP
See also globalY() and globalPos().
.SH "int QMouseEvent::globalY () const"
Returns the global y-position of the mouse pointer at the time of the event.
.PP
See also globalX() and globalPos().
.SH "void QMouseEvent::ignore ()"
Clears the accept flag parameter of the mouse event object.
.PP
Clearing the accept parameter indicates that the event receiver does not want the mouse event. Unwanted mouse events are sent to the parent widget.
.PP
The accept flag is set by default.
.PP
See also accept().
.SH "bool QMouseEvent::isAccepted () const"
Returns TRUE if the receiver of the event wants to keep the key; otherwise returns FALSE.
.SH "const QPoint & QMouseEvent::pos () const"
Returns the position of the mouse pointer relative to the widget that received the event.
.PP
If you move the widget as a result of the mouse event, use the global position returned by globalPos() to avoid a shaking motion.
.PP
See also x(), y(), and globalPos().
.PP
Examples:
.)l chart/canvasview.cpp, drawlines/connect.cpp, life/life.cpp, popup/popup.cpp, qmag/qmag.cpp, t14/cannon.cpp, and tooltip/tooltip.cpp.
.SH "ButtonState QMouseEvent::state () const"
Returns the button state (a combination of mouse buttons and keyboard modifiers), i.e. what buttons and keys were being pressed immediately before the event was generated.
.PP
This means that if you have a QEvent::MouseButtonPress or a QEvent::MouseButtonDblClick state() will \fInot\fR include the mouse button that's pressed. But once the mouse button has been released, the QEvent::MouseButtonRelease event will have the button() that was pressed.
.PP
This value is mainly interesting for QEvent::MouseMove; for the other cases, button() is more useful.
.PP
The returned value is LeftButton, RightButton, MidButton, ShiftButton, ControlButton and AltButton OR'ed together.
.PP
See also button(), stateAfter(), and Qt::ButtonState.
.PP
Examples:
.)l popup/popup.cpp and showimg/showimg.cpp.
.SH "ButtonState QMouseEvent::stateAfter () const"
Returns the state of buttons after the event.
.PP
See also state() and Qt::ButtonState.
.SH "int QMouseEvent::x () const"
Returns the x-position of the mouse pointer, relative to the widget that received the event.
.PP
See also y() and pos().
.PP
Example: showimg/showimg.cpp.
.SH "int QMouseEvent::y () const"
Returns the y-position of the mouse pointer, relative to the widget that received the event.
.PP
See also x() and pos().
.PP
Example: showimg/showimg.cpp.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qmouseevent.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qmouseevent.3qt) and the Qt
version (3.3.8).
