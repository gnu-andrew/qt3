'\" t
.TH QThread 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QThread \- Platform-independent threads
.SH SYNOPSIS
All the functions in this class are thread-safe when Qt is built with thread support.</p>
.PP
\fC#include <qthread.h>\fR
.PP
Inherits Qt.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQThread\fR ( unsigned int stackSize = 0 )"
.br
.ti -1c
.BI "virtual \fB~QThread\fR ()"
.br
.ti -1c
.BI "bool \fBwait\fR ( unsigned long time = ULONG_MAX )"
.br
.ti -1c
.BI "enum \fBPriority\fR { IdlePriority, LowestPriority, LowPriority, NormalPriority, HighPriority, HighestPriority, TimeCriticalPriority, InheritPriority }"
.br
.ti -1c
.BI "void \fBstart\fR ( Priority priority = InheritPriority )"
.br
.ti -1c
.BI "void \fBterminate\fR ()"
.br
.ti -1c
.BI "bool \fBfinished\fR () const"
.br
.ti -1c
.BI "bool \fBrunning\fR () const"
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "Qt::HANDLE \fBcurrentThread\fR ()"
.br
.ti -1c
.BI "void postEvent ( QObject * receiver, QEvent * event )  \fI(obsolete)\fR"
.br
.ti -1c
.BI "void \fBexit\fR ()"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual void \fBrun\fR () = 0"
.br
.in -1c
.SS "Static Protected Members"
.in +1c
.ti -1c
.BI "void \fBsleep\fR ( unsigned long secs )"
.br
.ti -1c
.BI "void \fBmsleep\fR ( unsigned long msecs )"
.br
.ti -1c
.BI "void \fBusleep\fR ( unsigned long usecs )"
.br
.in -1c
.SH DESCRIPTION
The QThread class provides platform-independent threads.
.PP
A QThread represents a separate thread of control within the program; it shares data with all the other threads within the process but executes independently in the way that a separate program does on a multitasking operating system. Instead of starting in main(), QThreads begin executing in run(). You inherit run() to include your code. For example:
.PP
.nf
.br
    class MyThread : public QThread {
.br
.br
    public:
.br
.br
        virtual void run();
.br
.br
    };
.br
.br
    void MyThread::run()
.br
    {
.br
        for( int count = 0; count < 20; count++ ) {
.br
            sleep( 1 );
.br
            qDebug( "Ping!" );
.br
        }
.br
    }
.br
.br
    int main()
.br
    {
.br
        MyThread a;
.br
        MyThread b;
.br
        a.start();
.br
        b.start();
.br
        a.wait();
.br
        b.wait();
.br
    }
.br
.fi
.PP
This will start two threads, each of which writes Ping! 20 times to the screen and exits. The wait() calls at the end of main() are necessary because exiting main() ends the program, unceremoniously killing all other threads. Each MyThread stops executing when it reaches the end of MyThread::run(), just as an application does when it leaves main().
.PP
See also Thread Support in Qt, Environment Classes, and Threading.
.SS "Member Type Documentation"
.SH "QThread::Priority"
This enum type indicates how the operating system should schedule newly created threads.
.TP
\fCQThread::IdlePriority\fR - scheduled only when no other threads are running.
.TP
\fCQThread::LowestPriority\fR - scheduled less often than LowPriority.
.TP
\fCQThread::LowPriority\fR - scheduled less often than NormalPriority.
.TP
\fCQThread::NormalPriority\fR - the default priority of the operating system.
.TP
\fCQThread::HighPriority\fR - scheduled more often than NormalPriority.
.TP
\fCQThread::HighestPriority\fR - scheduled more often then HighPriority.
.TP
\fCQThread::TimeCriticalPriority\fR - scheduled as often as possible.
.TP
\fCQThread::InheritPriority\fR - use the same priority as the creating thread. This is the default.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QThread::QThread ( unsigned int stackSize = 0 )"
Constructs a new thread. The thread does not begin executing until start() is called.
.PP
If \fIstackSize\fR is greater than zero, the maximum stack size is set to \fIstackSize\fR bytes, otherwise the maximum stack size is automatically determined by the operating system.
.PP
\fBWarning:\fR Most operating systems place minimum and maximum limits on thread stack sizes. The thread will fail to start if the stack size is outside these limits.
.SH "QThread::~QThread ()\fC [virtual]\fR"
QThread destructor.
.PP
Note that deleting a QThread object will not stop the execution of the thread it represents. Deleting a running QThread (i.e. finished() returns FALSE) will probably result in a program crash. You can wait() on a thread to make sure that it has finished.
.SH "Qt::HANDLE QThread::currentThread ()\fC [static]\fR"
This returns the thread handle of the currently executing thread.
.PP
\fBWarning:\fR The handle returned by this function is used for internal purposes and should \fInot\fR be used in any application code. On Windows, the returned value is a pseudo handle for the current thread, and it cannot be used for numerical comparison.
.SH "void QThread::exit ()\fC [static]\fR"
Ends the execution of the calling thread and wakes up any threads waiting for its termination.
.SH "bool QThread::finished () const"
Returns TRUE if the thread is finished; otherwise returns FALSE.
.SH "void QThread::msleep ( unsigned long msecs )\fC [static protected]\fR"
System independent sleep. This causes the current thread to sleep for \fImsecs\fR milliseconds
.SH "void QThread::postEvent ( QObject * receiver, QEvent * event )\fC [static]\fR"
\fBThis function is obsolete.\fR It is provided to keep old source working. We strongly advise against using it in new code.
.PP
Use QApplication::postEvent() instead.
.SH "void QThread::run ()\fC [pure virtual protected]\fR"
This method is pure virtual, and must be implemented in derived classes in order to do useful work. Returning from this method will end the execution of the thread.
.PP
See also wait().
.SH "bool QThread::running () const"
Returns TRUE if the thread is running; otherwise returns FALSE.
.SH "void QThread::sleep ( unsigned long secs )\fC [static protected]\fR"
System independent sleep. This causes the current thread to sleep for \fIsecs\fR seconds.
.SH "void QThread::start ( Priority priority = InheritPriority )"
Begins execution of the thread by calling run(), which should be reimplemented in a QThread subclass to contain your code. The operating system will schedule the thread according to the \fIpriority\fR argument.
.PP
If you try to start a thread that is already running, this function will wait until the the thread has finished and then restart the thread.
.PP
See also Priority.
.SH "void QThread::terminate ()"
This function terminates the execution of the thread. The thread may or may not be terminated immediately, depending on the operating system's scheduling policies. Use QThread::wait() after terminate() for synchronous termination.
.PP
When the thread is terminated, all threads waiting for the the thread to finish will be woken up.
.PP
\fBWarning:\fR This function is dangerous, and its use is discouraged. The thread can be terminated at any point in its code path. Threads can be terminated while modifying data. There is no chance for the thread to cleanup after itself, unlock any held mutexes, etc. In short, use this function only if \fIabsolutely\fR necessary.
.SH "void QThread::usleep ( unsigned long usecs )\fC [static protected]\fR"
System independent sleep. This causes the current thread to sleep for \fIusecs\fR microseconds
.SH "bool QThread::wait ( unsigned long time = ULONG_MAX )"
A thread calling this function will block until either of these conditions is met:
.TP
The thread associated with this QThread object has finished execution (i.e. when it returns from run()). This function will return TRUE if the thread has finished. It also returns TRUE if the thread has not been started yet.
.TP
\fItime\fR milliseconds has elapsed. If \fItime\fR is ULONG_MAX (the default), then the wait will never timeout (the thread must return from run()). This function will return FALSE if the wait timed out.
.PP
This provides similar functionality to the POSIX \fCpthread_join()\fR function.

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qthread.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qthread.3qt) and the Qt
version (3.3.8).
