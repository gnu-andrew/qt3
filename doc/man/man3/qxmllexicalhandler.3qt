'\" t
.TH QXmlLexicalHandler 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QXmlLexicalHandler \- Interface to report the lexical content of XML data
.SH SYNOPSIS
All the functions in this class are reentrant when Qt is built with thread support.</p>
.PP
\fC#include <qxml.h>\fR
.PP
Inherited by QXmlDefaultHandler.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "virtual bool \fBstartDTD\fR ( const QString & name, const QString & publicId, const QString & systemId ) = 0"
.br
.ti -1c
.BI "virtual bool \fBendDTD\fR () = 0"
.br
.ti -1c
.BI "virtual bool \fBstartEntity\fR ( const QString & name ) = 0"
.br
.ti -1c
.BI "virtual bool \fBendEntity\fR ( const QString & name ) = 0"
.br
.ti -1c
.BI "virtual bool \fBstartCDATA\fR () = 0"
.br
.ti -1c
.BI "virtual bool \fBendCDATA\fR () = 0"
.br
.ti -1c
.BI "virtual bool \fBcomment\fR ( const QString & ch ) = 0"
.br
.ti -1c
.BI "virtual QString \fBerrorString\fR () = 0"
.br
.in -1c
.SH DESCRIPTION
The QXmlLexicalHandler class provides an interface to report the lexical content of XML data.
.PP
The events in the lexical handler apply to the entire document, not just to the document element, and all lexical handler events appear between the content handler's startDocument and endDocument events.
.PP
You can set the lexical handler with QXmlReader::setLexicalHandler().
.PP
This interface's design is based on the the SAX2 extension LexicalHandler.
.PP
The interface provides the startDTD(), endDTD(), startEntity(), endEntity(), startCDATA(), endCDATA() and comment() functions.
.PP
See also the Introduction to SAX2.
.PP
See also QXmlDTDHandler, QXmlDeclHandler, QXmlContentHandler, QXmlEntityResolver, QXmlErrorHandler, and XML.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "bool QXmlLexicalHandler::comment ( const QString & ch )\fC [pure virtual]\fR"
The reader calls this function to report an XML comment anywhere in the document. It reports the text of the comment in \fIch\fR.
.PP
If this function returns FALSE the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.
.SH "bool QXmlLexicalHandler::endCDATA ()\fC [pure virtual]\fR"
The reader calls this function to report the end of a CDATA section.
.PP
If this function returns FALSE the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.
.PP
See also startCDATA() and QXmlContentHandler::characters().
.SH "bool QXmlLexicalHandler::endDTD ()\fC [pure virtual]\fR"
The reader calls this function to report the end of a DTD declaration, if any.
.PP
If this function returns FALSE the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.
.PP
See also startDTD().
.SH "bool QXmlLexicalHandler::endEntity ( const QString & name )\fC [pure virtual]\fR"
The reader calls this function to report the end of an entity called \fIname\fR.
.PP
For every startEntity() call, there is a corresponding endEntity() call. The calls to startEntity() and endEntity() are properly nested.
.PP
If this function returns FALSE the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.
.PP
See also startEntity(), QXmlContentHandler::skippedEntity(), and QXmlSimpleReader::setFeature().
.SH "QString QXmlLexicalHandler::errorString ()\fC [pure virtual]\fR"
The reader calls this function to get an error string if any of the handler functions returns FALSE.
.SH "bool QXmlLexicalHandler::startCDATA ()\fC [pure virtual]\fR"
The reader calls this function to report the start of a CDATA section. The content of the CDATA section is reported through the QXmlContentHandler::characters() function. This function is intended only to report the boundary.
.PP
If this function returns FALSE the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.
.PP
See also endCDATA().
.SH "bool QXmlLexicalHandler::startDTD ( const QString & name, const QString & publicId, const QString & systemId )\fC [pure virtual]\fR"
The reader calls this function to report the start of a DTD declaration, if any. It reports the name of the document type in \fIname\fR, the public identifier in \fIpublicId\fR and the system identifier in \fIsystemId\fR.
.PP
If the public identifier is missing, \fIpublicId\fR is set to QString::null. If the system identifier is missing, \fIsystemId\fR is set to QString::null. Note that it is not valid XML to have a public identifier but no system identifier; in such cases a parse error will occur.
.PP
All declarations reported through QXmlDTDHandler or QXmlDeclHandler appear between the startDTD() and endDTD() calls.
.PP
If this function returns FALSE the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.
.PP
See also endDTD().
.SH "bool QXmlLexicalHandler::startEntity ( const QString & name )\fC [pure virtual]\fR"
The reader calls this function to report the start of an entity called \fIname\fR.
.PP
Note that if the entity is unknown, the reader reports it through QXmlContentHandler::skippedEntity() and not through this function.
.PP
If this function returns FALSE the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.
.PP
See also endEntity() and QXmlSimpleReader::setFeature().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/qxmllexicalhandler.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive Qt documentation is provided in HTML format; it is
located at $QTDIR/doc/html and can be read using Qt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qxmllexicalhandler.3qt) and the Qt
version (3.3.8).
