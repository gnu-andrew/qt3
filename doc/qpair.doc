/****************************************************************************
**
** QPair class documentation
**
** Copyright (C) 1992-2008 Trolltech ASA.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be used under the terms of the GNU General
** Public License versions 2.0 or 3.0 as published by the Free
** Software Foundation and appearing in the files LICENSE.GPL2
** and LICENSE.GPL3 included in the packaging of this file.
** Alternatively you may (at your option) use any later version
** of the GNU General Public License if such license has been
** publicly approved by Trolltech ASA (or its successors, if any)
** and the KDE Free Qt Foundation.
**
** Please review the following information to ensure GNU General
** Public Licensing requirements will be met:
** http://trolltech.com/products/qt/licenses/licensing/opensource/.
** If you are unsure which license is appropriate for your use, please
** review the following information:
** http://trolltech.com/products/qt/licenses/licensing/licensingoverview
** or contact the sales department at sales@trolltech.com.
**
** This file may be used under the terms of the Q Public License as
** defined by Trolltech ASA and appearing in the file LICENSE.QPL
** included in the packaging of this file.  Licensees holding valid Qt
** Commercial licenses may use this file in accordance with the Qt
** Commercial License Agreement provided with the Software.
**
** This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
** INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE. Trolltech reserves all rights not granted
** herein.
**
**********************************************************************/

/*****************************************************************************
  QPair documentation
 *****************************************************************************/


/*!
    \class QPair qpair.h
    \brief The QPair class is a value-based template class that provides a pair of elements.

    \ingroup qtl
    \ingroup tools
    \ingroup shared
    
    QPair is a Qt implementation of an STL-like pair. It can be used
    in your application if the standard pair\<\> is not available on
    your target platforms.

    QPair\<T1, T2\> defines a template instance to create a pair of
    values that contains two values of type T1 and T2. Please note
    that QPair does not store pointers to the two elements; it holds a
    copy of every member. This is why these kinds of classes are
    called \e{value based}. If you're interested in \e{pointer based}
    classes see, for example, QPtrList and QDict.

    QPair holds one copy of type T1 and one copy of type T2, but does
    not provide iterators to access these elements. Instead, the two
    elements (\c first and \c second) are public member variables of
    the pair. QPair owns the contained elements. For more relaxed
    ownership semantics, see QPtrCollection and friends which are
    pointer-based containers.

    Some classes cannot be used within a QPair: for example, all
    classes derived from QObject and thus all classes that implement
    widgets. Only "values" can be used in a QPair. To qualify as a
    value the class must provide:

    \list
    \i A copy constructor
    \i An assignment operator
    \i A constructor that takes no arguments
    \endlist

    Note that C++ defaults to field-by-field assignment operators and
    copy constructors if no explicit version is supplied. In many
    cases this is sufficient.

    QPair uses an STL-like syntax to manipulate and address the
    objects it contains. See the \link qtl.html QTL
    documentation\endlink for more information.

    Functions that need to return two values can use a QPair.
*/

/*! \enum QPair::first_type
	The type of the first element in the pair. */

/*! \enum QPair::second_type
	The type of the second element in the pair. */


/*!
    \fn QPair::QPair()

    Constructs an empty pair. The \c first and \c second elements are
    default constructed. 
*/

/*!
    \fn QPair::QPair( const T1& t1, const T2& t2 )

    Constructs a pair and initializes the \c first element with \a t1
    and the \c second element with \a t2.
*/

/*!
    \fn bool operator==( const QPair<T1, T2>& x, const QPair<T1, T2>& y )

    Returns TRUE if \a x is equal to \a y; otherwise returns FALSE.
    Two QPairs are equal if both their \c first and \c second elements
    are equal.
*/

/*!
    \fn bool operator<( const QPair<T1, T2>& x, const QPair<T1, T2>& y )

    Returns TRUE if \a x is less than \a y; otherwise returns FALSE.
    \a x is less than \a y if x.first is less than y.first, or if
    x.second is less than y.second and x.first is the same as y.first.

    For example, (0, 1) < (0, 4) and (0, 4) < (1, 0).
*/

/*! \fn QPair<T1, T2> qMakePair( const T1& x, const T2& y )

    Convenience wrapper for the QPair constructor.
*/

/*! \fn QDataStream& operator>>( QDataStream& s, QPair<T1, T2>& p )

    Reads a pair \a p from the stream \a s. The types T1 and T2 must
    implement the streaming operator as well.
*/

/*! \fn QDataStream& operator<<( QDataStream& s, const QPair<T1, T2>& p )

    Writes the pair \a p to the stream \a s. The types T1 and T2 must
    implement the streaming operator as well.
*/
