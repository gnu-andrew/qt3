/****************************************************************************
**
** QSortedList documentation
**
** Copyright (C) 1992-2008 Trolltech ASA.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be used under the terms of the GNU General
** Public License versions 2.0 or 3.0 as published by the Free
** Software Foundation and appearing in the files LICENSE.GPL2
** and LICENSE.GPL3 included in the packaging of this file.
** Alternatively you may (at your option) use any later version
** of the GNU General Public License if such license has been
** publicly approved by Trolltech ASA (or its successors, if any)
** and the KDE Free Qt Foundation.
**
** Please review the following information to ensure GNU General
** Public Licensing requirements will be met:
** http://trolltech.com/products/qt/licenses/licensing/opensource/.
** If you are unsure which license is appropriate for your use, please
** review the following information:
** http://trolltech.com/products/qt/licenses/licensing/licensingoverview
** or contact the sales department at sales@trolltech.com.
**
** This file may be used under the terms of the Q Public License as
** defined by Trolltech ASA and appearing in the file LICENSE.QPL
** included in the packaging of this file.  Licensees holding valid Qt
** Commercial licenses may use this file in accordance with the Qt
** Commercial License Agreement provided with the Software.
**
** This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
** INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE. Trolltech reserves all rights not granted
** herein.
**
**********************************************************************/

/*!
  \class QSortedList qsortedlist.h
  \brief The QSortedList class provides a list sorted by operator< and operator==.

  \obsolete

  If you want to sort a QPtrList you have to reimplement the
  QGList::compareItems() method.  If the elements of your list support
  operator<() and operator==(), you can use QSortedList instead.
  Its compareItems() calls operator<() and operator==() and returns an
  appropriate result.

  Otherwise, this is as QPtrList.

  \sa QPtrList
*/


/*!
  \fn QSortedList::QSortedList()
  Constructs an empty list.
*/

/*!
  \fn QSortedList::QSortedList( const QSortedList<type> &list )
  Constructs a copy of \a list.

  Each item in \a list is copied to this new list.
*/

/*!
  \fn QSortedList::~QSortedList()
  Removes all items from the list and destroys the list.

  All list iterators that access this list will be reset.
*/

/*!
  \fn QSortedList<type>& QSortedList::operator=(const QSortedList<type>& list)
  Assigns \a list to this list and returns a reference to this list.

  This list is first cleared; each item in \a list is then
  appended to this list.  Only the pointers are copied
  (shallow copy) unless newItem() has been reimplemented().
*/

/*!
   \fn int QSortedList::compareItems( QPtrCollection::Item s1, QPtrCollection::Item s2 )

   \reimp

   This reimplementation uses operator< and operator== to compare.
*/
